
cdc_moon_demo.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003db2  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80005e00  80005e00  00006200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000fc  80006000  80006000  00006400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  800060fc  800060fc  000064fc  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000101  00000008  80006100  00006808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000007  00000109  80006201  00006909  2**0
                  ALLOC
  9 .bss          00000758  00000110  00000110  00000000  2**2
                  ALLOC
 10 .heap         00006798  00000868  00000868  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  00006909  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000a50  00000000  00000000  00006940  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00001d68  00000000  00000000  00007390  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001a4ca  00000000  00000000  000090f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 000025b4  00000000  00000000  000235c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009fd2  00000000  00000000  00025b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001970  00000000  00000000  0002fb48  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000077e2  00000000  00000000  000314b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000449c  00000000  00000000  00038c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00cc5686  00000000  00000000  0003d136  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000a90  00000000  00000000  00d027c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c6 78 	sub	pc,pc,-14728

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e6 7c 	sub	pc,pc,-6532

Disassembly of section .text:

80002008 <tc_init_waveform>:
80002008:	76 09       	ld.w	r9,r11[0x0]
8000200a:	58 29       	cp.w	r9,2


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000200c:	e0 88 00 03 	brls	80002012 <tc_init_waveform+0xa>
80002010:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80002012:	76 18       	ld.w	r8,r11[0x4]
80002014:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002018:	af ba       	sbr	r10,0xf
8000201a:	10 9b       	mov	r11,r8
8000201c:	e6 1b c0 00 	andh	r11,0xc000,COH
80002020:	16 4a       	or	r10,r11
80002022:	10 9b       	mov	r11,r8
80002024:	e6 1b 30 00 	andh	r11,0x3000,COH
80002028:	16 4a       	or	r10,r11
8000202a:	10 9b       	mov	r11,r8
8000202c:	e6 1b 0c 00 	andh	r11,0xc00,COH
80002030:	16 4a       	or	r10,r11
80002032:	10 9b       	mov	r11,r8
80002034:	e6 1b 03 00 	andh	r11,0x300,COH
80002038:	16 4a       	or	r10,r11
8000203a:	10 9b       	mov	r11,r8
8000203c:	e6 1b 00 c0 	andh	r11,0xc0,COH
80002040:	16 4a       	or	r10,r11
80002042:	10 9b       	mov	r11,r8
80002044:	e6 1b 00 30 	andh	r11,0x30,COH
80002048:	16 4a       	or	r10,r11
8000204a:	10 9b       	mov	r11,r8
8000204c:	e6 1b 00 0c 	andh	r11,0xc,COH
80002050:	16 4a       	or	r10,r11
80002052:	10 9b       	mov	r11,r8
80002054:	e6 1b 00 03 	andh	r11,0x3,COH
80002058:	16 4a       	or	r10,r11
8000205a:	10 9b       	mov	r11,r8
8000205c:	e2 1b 60 00 	andl	r11,0x6000,COH
80002060:	16 4a       	or	r10,r11
80002062:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
80002066:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
8000206a:	10 9b       	mov	r11,r8
8000206c:	e2 1b 0c 00 	andl	r11,0xc00,COH
80002070:	16 4a       	or	r10,r11
80002072:	10 9b       	mov	r11,r8
80002074:	e2 1b 03 00 	andl	r11,0x300,COH
80002078:	16 4a       	or	r10,r11
8000207a:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
8000207e:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
80002082:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002086:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
8000208a:	10 9b       	mov	r11,r8
8000208c:	e2 1b 00 30 	andl	r11,0x30,COH
80002090:	16 4a       	or	r10,r11
80002092:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002096:	f5 e8 10 38 	or	r8,r10,r8<<0x3
8000209a:	a5 69       	lsl	r9,0x4
8000209c:	2f f9       	sub	r9,-1
8000209e:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
800020a2:	5e fd       	retal	0

800020a4 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800020a4:	58 2b       	cp.w	r11,2
800020a6:	e0 88 00 03 	brls	800020ac <tc_start+0x8>
800020aa:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
800020ac:	a7 6b       	lsl	r11,0x6
800020ae:	16 0c       	add	r12,r11
800020b0:	30 58       	mov	r8,5
800020b2:	99 08       	st.w	r12[0x0],r8
800020b4:	5e fd       	retal	0

800020b6 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800020b6:	58 2b       	cp.w	r11,2
800020b8:	e0 88 00 03 	brls	800020be <tc_read_sr+0x8>
800020bc:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
800020be:	a7 6b       	lsl	r11,0x6
800020c0:	2e 0b       	sub	r11,-32
800020c2:	16 0c       	add	r12,r11
800020c4:	78 0c       	ld.w	r12,r12[0x0]
}
800020c6:	5e fc       	retal	r12

800020c8 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800020c8:	58 2b       	cp.w	r11,2
800020ca:	e0 88 00 03 	brls	800020d0 <tc_write_rc+0x8>
800020ce:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800020d0:	f6 08 15 04 	lsl	r8,r11,0x4
800020d4:	2f f8       	sub	r8,-1
800020d6:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
800020da:	e2 18 80 00 	andl	r8,0x8000,COH
800020de:	c0 c0       	breq	800020f6 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800020e0:	a7 6b       	lsl	r11,0x6
800020e2:	16 0c       	add	r12,r11
800020e4:	2e 4c       	sub	r12,-28
800020e6:	78 08       	ld.w	r8,r12[0x0]
800020e8:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
800020ec:	e0 18 00 00 	andl	r8,0x0
800020f0:	f3 e8 10 08 	or	r8,r9,r8
800020f4:	99 08       	st.w	r12[0x0],r8

  return value;
800020f6:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
800020fa:	5e fc       	retal	r12

800020fc <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
800020fc:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80002100:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002104:	58 2b       	cp.w	r11,2
80002106:	e0 88 00 04 	brls	8000210e <tc_configure_interrupts+0x12>
8000210a:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
8000210e:	ee 19 00 01 	eorh	r9,0x1
80002112:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002116:	74 08       	ld.w	r8,r10[0x0]
80002118:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
8000211c:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
80002120:	a7 6e       	lsl	lr,0x6
80002122:	fd e7 10 7e 	or	lr,lr,r7<<0x7
80002126:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
8000212a:	0e 4e       	or	lr,r7
8000212c:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
80002130:	fd e7 10 5e 	or	lr,lr,r7<<0x5
80002134:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
80002138:	fd e7 10 4e 	or	lr,lr,r7<<0x4
8000213c:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
80002140:	fd e7 10 3e 	or	lr,lr,r7<<0x3
80002144:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
80002148:	fd e7 10 2e 	or	lr,lr,r7<<0x2
8000214c:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80002150:	fd e8 10 18 	or	r8,lr,r8<<0x1
80002154:	f6 0e 15 06 	lsl	lr,r11,0x6
80002158:	f8 0e 00 0e 	add	lr,r12,lr
8000215c:	2d ce       	sub	lr,-36
8000215e:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80002160:	58 09       	cp.w	r9,0
80002162:	c0 20       	breq	80002166 <tc_configure_interrupts+0x6a>
80002164:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002166:	74 08       	ld.w	r8,r10[0x0]
80002168:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
8000216c:	e0 65 00 80 	mov	r5,128
80002170:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80002174:	74 08       	ld.w	r8,r10[0x0]
80002176:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
8000217a:	f9 b4 00 40 	moveq	r4,64
8000217e:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80002182:	74 08       	ld.w	r8,r10[0x0]
80002184:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002188:	f9 b3 00 20 	moveq	r3,32
8000218c:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80002190:	74 08       	ld.w	r8,r10[0x0]
80002192:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002196:	f9 b2 00 10 	moveq	r2,16
8000219a:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000219e:	74 08       	ld.w	r8,r10[0x0]
800021a0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
800021a4:	f9 b6 00 08 	moveq	r6,8
800021a8:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
800021ac:	74 08       	ld.w	r8,r10[0x0]
800021ae:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800021b2:	f9 b7 00 04 	moveq	r7,4
800021b6:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
800021ba:	74 08       	ld.w	r8,r10[0x0]
800021bc:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800021c0:	f9 be 00 02 	moveq	lr,2
800021c4:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800021c8:	74 08       	ld.w	r8,r10[0x0]
800021ca:	ec 18 00 01 	eorl	r8,0x1
800021ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021d2:	eb e8 10 08 	or	r8,r5,r8
800021d6:	08 48       	or	r8,r4
800021d8:	06 48       	or	r8,r3
800021da:	04 48       	or	r8,r2
800021dc:	0c 48       	or	r8,r6
800021de:	0e 48       	or	r8,r7
800021e0:	1c 48       	or	r8,lr
800021e2:	f6 0a 15 06 	lsl	r10,r11,0x6
800021e6:	f8 0a 00 0a 	add	r10,r12,r10
800021ea:	2d 8a       	sub	r10,-40
800021ec:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800021ee:	a7 6b       	lsl	r11,0x6
800021f0:	2e 0b       	sub	r11,-32
800021f2:	16 0c       	add	r12,r11
800021f4:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800021f6:	58 09       	cp.w	r9,0
800021f8:	c0 31       	brne	800021fe <tc_configure_interrupts+0x102>
800021fa:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
800021fe:	d5 03       	csrf	0x10
80002200:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002204 <twi_master_interrupt_handler>:
/*! \brief TWI interrupt handler.
 */
ISR(twi_master_interrupt_handler, CONF_TWI_IRQ_GROUP, CONF_TWI_IRQ_LEVEL)
{
	// get masked status register value
	int status = twi_inst->sr & twi_it_mask;
80002204:	4a 68       	lddpc	r8,8000229c <twi_master_interrupt_handler+0x98>
80002206:	70 08       	ld.w	r8,r8[0x0]
80002208:	70 89       	ld.w	r9,r8[0x20]
8000220a:	4a 6a       	lddpc	r10,800022a0 <twi_master_interrupt_handler+0x9c>
8000220c:	74 0a       	ld.w	r10,r10[0x0]
8000220e:	f5 e9 00 09 	and	r9,r10,r9

	// this is a NACK
	if (status & AVR32_TWI_SR_NACK_MASK) {
80002212:	12 9a       	mov	r10,r9
80002214:	e2 1a 01 00 	andl	r10,0x100,COH
80002218:	c3 81       	brne	80002288 <twi_master_interrupt_handler+0x84>
		goto nack;
	}
	// this is a RXRDY
	else if (status & AVR32_TWI_SR_RXRDY_MASK) {
8000221a:	12 9a       	mov	r10,r9
8000221c:	e2 1a 00 02 	andl	r10,0x2,COH
80002220:	c1 60       	breq	8000224c <twi_master_interrupt_handler+0x48>
		// get data from Receive Holding Register
		*twi_rx_data = twi_inst->rhr;
80002222:	4a 19       	lddpc	r9,800022a4 <twi_master_interrupt_handler+0xa0>
80002224:	72 0a       	ld.w	r10,r9[0x0]
80002226:	70 cb       	ld.w	r11,r8[0x30]
80002228:	b4 8b       	st.b	r10[0x0],r11
		twi_rx_data++;
8000222a:	72 0a       	ld.w	r10,r9[0x0]
8000222c:	2f fa       	sub	r10,-1
8000222e:	93 0a       	st.w	r9[0x0],r10
		// last byte to receive
		if (--twi_rx_nb_bytes == 1) {
80002230:	49 e9       	lddpc	r9,800022a8 <twi_master_interrupt_handler+0xa4>
80002232:	72 0a       	ld.w	r10,r9[0x0]
80002234:	20 1a       	sub	r10,1
80002236:	93 0a       	st.w	r9[0x0],r10
80002238:	72 09       	ld.w	r9,r9[0x0]
8000223a:	58 19       	cp.w	r9,1
8000223c:	c0 31       	brne	80002242 <twi_master_interrupt_handler+0x3e>
			// set stop bit
			twi_inst->cr = AVR32_TWI_STOP_MASK;
8000223e:	30 29       	mov	r9,2
80002240:	91 09       	st.w	r8[0x0],r9
		}
		// receive complete
		if (twi_rx_nb_bytes == 0) {
80002242:	49 a9       	lddpc	r9,800022a8 <twi_master_interrupt_handler+0xa4>
80002244:	72 09       	ld.w	r9,r9[0x0]
80002246:	58 09       	cp.w	r9,0
80002248:	c2 30       	breq	8000228e <twi_master_interrupt_handler+0x8a>
8000224a:	d6 03       	rete
			// finish the receive operation
			goto complete;
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWI_SR_TXRDY_MASK) {
8000224c:	12 9a       	mov	r10,r9
8000224e:	e2 1a 00 04 	andl	r10,0x4,COH
80002252:	c1 70       	breq	80002280 <twi_master_interrupt_handler+0x7c>
		// decrease transmitted bytes number
		twi_tx_nb_bytes--;
80002254:	49 69       	lddpc	r9,800022ac <twi_master_interrupt_handler+0xa8>
80002256:	72 0a       	ld.w	r10,r9[0x0]
80002258:	20 1a       	sub	r10,1
8000225a:	93 0a       	st.w	r9[0x0],r10
		// no more bytes to transmit
		if (twi_tx_nb_bytes <= 0) {
8000225c:	72 09       	ld.w	r9,r9[0x0]
8000225e:	58 09       	cp.w	r9,0
80002260:	e0 89 00 0a 	brgt	80002274 <twi_master_interrupt_handler+0x70>
			// enable TXCOMP IT and unmask all others IT
			twi_it_mask = AVR32_TWI_IER_TXCOMP_MASK;
80002264:	48 f9       	lddpc	r9,800022a0 <twi_master_interrupt_handler+0x9c>
80002266:	30 1a       	mov	r10,1
80002268:	93 0a       	st.w	r9[0x0],r10
			twi_inst->idr = ~0UL;
8000226a:	3f fa       	mov	r10,-1
8000226c:	91 aa       	st.w	r8[0x28],r10
			twi_inst->ier = twi_it_mask;
8000226e:	72 09       	ld.w	r9,r9[0x0]
80002270:	91 99       	st.w	r8[0x24],r9
80002272:	d6 03       	rete
		} else {
			// put the byte in the Transmit Holding Register
			twi_inst->thr = *twi_tx_data++;
80002274:	48 fa       	lddpc	r10,800022b0 <twi_master_interrupt_handler+0xac>
80002276:	74 09       	ld.w	r9,r10[0x0]
80002278:	13 3b       	ld.ub	r11,r9++
8000227a:	91 db       	st.w	r8[0x34],r11
8000227c:	95 09       	st.w	r10[0x0],r9
8000227e:	d6 03       	rete
		}
	}
	// this is a TXCOMP
	else if (status & AVR32_TWI_SR_TXCOMP_MASK) {
80002280:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80002284:	c0 51       	brne	8000228e <twi_master_interrupt_handler+0x8a>
80002286:	d6 03       	rete
	}

	return;

nack:
	twi_nack = true;
80002288:	30 1a       	mov	r10,1
8000228a:	48 b9       	lddpc	r9,800022b4 <twi_master_interrupt_handler+0xb0>
8000228c:	b2 8a       	st.b	r9[0x0],r10

complete:
	// disable all interrupts
	twi_inst->idr = ~0UL;
8000228e:	3f f9       	mov	r9,-1
80002290:	91 a9       	st.w	r8[0x28],r9
	twi_inst->sr;
80002292:	70 88       	ld.w	r8,r8[0x20]
	twi_busy = false;
80002294:	30 09       	mov	r9,0
80002296:	48 98       	lddpc	r8,800022b8 <twi_master_interrupt_handler+0xb4>
80002298:	b0 89       	st.b	r8[0x0],r9
8000229a:	d6 03       	rete
8000229c:	00 00       	add	r0,r0
8000229e:	01 1c       	ld.sh	r12,r0++
800022a0:	00 00       	add	r0,r0
800022a2:	01 18       	ld.sh	r8,r0++
800022a4:	00 00       	add	r0,r0
800022a6:	01 28       	ld.uh	r8,r0++
800022a8:	00 00       	add	r0,r0
800022aa:	01 24       	ld.uh	r4,r0++
800022ac:	00 00       	add	r0,r0
800022ae:	01 14       	ld.sh	r4,r0++
800022b0:	00 00       	add	r0,r0
800022b2:	01 20       	ld.uh	r0,r0++
800022b4:	00 00       	add	r0,r0
800022b6:	01 11       	ld.sh	r1,r0++
800022b8:	00 00       	add	r0,r0
800022ba:	01 10       	ld.sh	r0,r0++

800022bc <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
800022bc:	18 98       	mov	r8,r12
	uint32_t val;

	if (len == 0)
800022be:	58 0b       	cp.w	r11,0
800022c0:	c0 21       	brne	800022c4 <twi_mk_addr+0x8>
800022c2:	5e fd       	retal	0
		return 0;

	val = addr[0];
800022c4:	19 8c       	ld.ub	r12,r12[0x0]
	if (len > 1) {
800022c6:	58 1b       	cp.w	r11,1
800022c8:	e0 8a 00 05 	brle	800022d2 <twi_mk_addr+0x16>
		val <<= 8;
		val |= addr[1];
800022cc:	11 99       	ld.ub	r9,r8[0x1]
800022ce:	f3 ec 10 8c 	or	r12,r9,r12<<0x8
	}
	if (len > 2) {
800022d2:	58 2b       	cp.w	r11,2
800022d4:	5e ac       	retle	r12
		val <<= 8;
		val |= addr[2];
800022d6:	11 a8       	ld.ub	r8,r8[0x2]
800022d8:	f1 ec 10 8c 	or	r12,r8,r12<<0x8
	}
	return val;
}
800022dc:	5e fc       	retal	r12
800022de:	d7 03       	nop

800022e0 <twi_is_busy>:
}


bool twi_is_busy(void)
{
	if (twi_busy) {
800022e0:	48 28       	lddpc	r8,800022e8 <twi_is_busy+0x8>
800022e2:	11 8c       	ld.ub	r12,r8[0x0]
		return true;          // Still receiving/transmitting...
	} else {
		return false;
	}
}
800022e4:	5e fc       	retal	r12
800022e6:	00 00       	add	r0,r0
800022e8:	00 00       	add	r0,r0
800022ea:	01 10       	ld.sh	r0,r0++

800022ec <twi_master_write>:
	return TWI_SUCCESS;
}


int twi_master_write(volatile avr32_twi_t *twi, const twi_package_t *package)
{
800022ec:	eb cd 40 c0 	pushm	r6-r7,lr
800022f0:	18 96       	mov	r6,r12
800022f2:	16 97       	mov	r7,r11
	// No data to send
	if (package->length == 0) {
800022f4:	76 38       	ld.w	r8,r11[0xc]
800022f6:	58 08       	cp.w	r8,0
800022f8:	c0 51       	brne	80002302 <twi_master_write+0x16>
800022fa:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
		return TWI_INVALID_ARGUMENT;
	}

	while (twi_is_busy()) {
		cpu_relax();
800022fe:	fe cf ff fc 	sub	pc,pc,-4
	// No data to send
	if (package->length == 0) {
		return TWI_INVALID_ARGUMENT;
	}

	while (twi_is_busy()) {
80002302:	f0 1f 00 1f 	mcall	8000237c <twi_master_write+0x90>
80002306:	cf c1       	brne	800022fe <twi_master_write+0x12>
		cpu_relax();
	};

	twi_nack = false;
80002308:	30 09       	mov	r9,0
8000230a:	49 e8       	lddpc	r8,80002380 <twi_master_write+0x94>
8000230c:	b0 89       	st.b	r8[0x0],r9
	twi_busy = true;
8000230e:	30 19       	mov	r9,1
80002310:	49 d8       	lddpc	r8,80002384 <twi_master_write+0x98>
80002312:	b0 89       	st.b	r8[0x0],r9

	// Enable master transfer, disable slave
	twi->cr =   AVR32_TWI_CR_MSEN_MASK
80002314:	32 48       	mov	r8,36
80002316:	8d 08       	st.w	r6[0x0],r8
			| AVR32_TWI_CR_SVDIS_MASK
#endif
			;

	// set write mode, slave address and 3 internal address byte length
	twi->mmr = (0 << AVR32_TWI_MMR_MREAD_OFFSET) |
80002318:	6e 18       	ld.w	r8,r7[0x4]
8000231a:	a9 68       	lsl	r8,0x8
8000231c:	e2 18 03 00 	andl	r8,0x300,COH
80002320:	0f 89       	ld.ub	r9,r7[0x0]
80002322:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80002326:	8d 18       	st.w	r6[0x4],r8
			(package->chip << AVR32_TWI_MMR_DADR_OFFSET) |
			((package->addr_length << AVR32_TWI_MMR_IADRSZ_OFFSET) & AVR32_TWI_MMR_IADRSZ_MASK);

	// Set pointer to TWI instance for IT
	twi_inst = twi;
80002328:	49 88       	lddpc	r8,80002388 <twi_master_write+0x9c>
8000232a:	91 06       	st.w	r8[0x0],r6

	// set internal address for remote chip
	twi->iadr = twi_mk_addr(package->addr, package->addr_length);
8000232c:	6e 1b       	ld.w	r11,r7[0x4]
8000232e:	ee cc ff ff 	sub	r12,r7,-1
80002332:	f0 1f 00 17 	mcall	8000238c <twi_master_write+0xa0>
80002336:	8d 3c       	st.w	r6[0xc],r12

	// get a pointer to applicative data
	twi_tx_data = package->buffer;
80002338:	6e 29       	ld.w	r9,r7[0x8]
8000233a:	49 68       	lddpc	r8,80002390 <twi_master_write+0xa4>
8000233c:	91 09       	st.w	r8[0x0],r9

	// get a copy of nb bytes to write
	twi_tx_nb_bytes = package->length;
8000233e:	6e 3a       	ld.w	r10,r7[0xc]
80002340:	49 59       	lddpc	r9,80002394 <twi_master_write+0xa8>
80002342:	93 0a       	st.w	r9[0x0],r10

	// put the first byte in the Transmit Holding Register
	twi->thr = *twi_tx_data++;
80002344:	70 09       	ld.w	r9,r8[0x0]
80002346:	13 3a       	ld.ub	r10,r9++
80002348:	8d da       	st.w	r6[0x34],r10
8000234a:	91 09       	st.w	r8[0x0],r9

	// mask NACK and TXRDY interrupts
	twi_it_mask = AVR32_TWI_IER_NACK_MASK | AVR32_TWI_IER_TXRDY_MASK;
8000234c:	49 38       	lddpc	r8,80002398 <twi_master_write+0xac>
8000234e:	e0 69 01 04 	mov	r9,260
80002352:	91 09       	st.w	r8[0x0],r9

	// update IMR through IER
	twi->ier = twi_it_mask;
80002354:	70 08       	ld.w	r8,r8[0x0]
80002356:	8d 98       	st.w	r6[0x24],r8

	// send data
	while (twi_is_busy()) {
80002358:	c0 38       	rjmp	8000235e <twi_master_write+0x72>
		cpu_relax();
8000235a:	fe cf ff fc 	sub	pc,pc,-4

	// update IMR through IER
	twi->ier = twi_it_mask;

	// send data
	while (twi_is_busy()) {
8000235e:	f0 1f 00 08 	mcall	8000237c <twi_master_write+0x90>
80002362:	cf c1       	brne	8000235a <twi_master_write+0x6e>
		cpu_relax();
	}

	// Disable master transfer
	twi->cr =  AVR32_TWI_CR_MSDIS_MASK;
80002364:	30 88       	mov	r8,8
80002366:	8d 08       	st.w	r6[0x0],r8

	if (twi_nack) {
80002368:	48 68       	lddpc	r8,80002380 <twi_master_write+0x94>
8000236a:	11 8c       	ld.ub	r12,r8[0x0]
8000236c:	58 0c       	cp.w	r12,0
8000236e:	f9 bc 01 fb 	movne	r12,-5
80002372:	f9 bc 00 00 	moveq	r12,0
		return TWI_RECEIVE_NACK;
	}

	return TWI_SUCCESS;
}
80002376:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000237a:	00 00       	add	r0,r0
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	22 e0       	sub	r0,46
80002380:	00 00       	add	r0,r0
80002382:	01 11       	ld.sh	r1,r0++
80002384:	00 00       	add	r0,r0
80002386:	01 10       	ld.sh	r0,r0++
80002388:	00 00       	add	r0,r0
8000238a:	01 1c       	ld.sh	r12,r0++
8000238c:	80 00       	ld.sh	r0,r0[0x0]
8000238e:	22 bc       	sub	r12,43
80002390:	00 00       	add	r0,r0
80002392:	01 20       	ld.uh	r0,r0++
80002394:	00 00       	add	r0,r0
80002396:	01 14       	ld.sh	r4,r0++
80002398:	00 00       	add	r0,r0
8000239a:	01 18       	ld.sh	r8,r0++

8000239c <twi_master_read>:
	}
	return val;
}

int twi_master_read(volatile avr32_twi_t *twi, const twi_package_t *package)
{
8000239c:	eb cd 40 c0 	pushm	r6-r7,lr
800023a0:	18 96       	mov	r6,r12
800023a2:	16 97       	mov	r7,r11
	// check argument
	if (package->length == 0) {
800023a4:	76 38       	ld.w	r8,r11[0xc]
800023a6:	58 08       	cp.w	r8,0
800023a8:	c0 51       	brne	800023b2 <twi_master_read+0x16>
800023aa:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
		return TWI_INVALID_ARGUMENT;
	}
#if 1	//20141209
	while (twi_is_busy()) {
		cpu_relax();
800023ae:	fe cf ff fc 	sub	pc,pc,-4
	// check argument
	if (package->length == 0) {
		return TWI_INVALID_ARGUMENT;
	}
#if 1	//20141209
	while (twi_is_busy()) {
800023b2:	f0 1f 00 21 	mcall	80002434 <twi_master_read+0x98>
800023b6:	cf c1       	brne	800023ae <twi_master_read+0x12>
		cpu_relax();
	};
#endif
	twi_nack = false;
800023b8:	30 09       	mov	r9,0
800023ba:	4a 08       	lddpc	r8,80002438 <twi_master_read+0x9c>
800023bc:	b0 89       	st.b	r8[0x0],r9
	twi_busy = true;
800023be:	30 19       	mov	r9,1
800023c0:	49 f8       	lddpc	r8,8000243c <twi_master_read+0xa0>
800023c2:	b0 89       	st.b	r8[0x0],r9

	// set read mode, slave address and 3 internal address byte length
	twi->mmr = (package->chip << AVR32_TWI_MMR_DADR_OFFSET) |
800023c4:	0f 89       	ld.ub	r9,r7[0x0]
800023c6:	6e 18       	ld.w	r8,r7[0x4]
800023c8:	a9 68       	lsl	r8,0x8
800023ca:	e2 18 03 00 	andl	r8,0x300,COH
800023ce:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800023d2:	ad a8       	sbr	r8,0xc
800023d4:	8d 18       	st.w	r6[0x4],r8
			((package->addr_length << AVR32_TWI_MMR_IADRSZ_OFFSET) & AVR32_TWI_MMR_IADRSZ_MASK) |
			(1 << AVR32_TWI_MMR_MREAD_OFFSET);

	// Set pointer to TWIM instance for IT
	twi_inst = twi;
800023d6:	49 b8       	lddpc	r8,80002440 <twi_master_read+0xa4>
800023d8:	91 06       	st.w	r8[0x0],r6

	// set internal address for remote chip
	twi->iadr = twi_mk_addr(package->addr, package->addr_length);
800023da:	6e 1b       	ld.w	r11,r7[0x4]
800023dc:	ee cc ff ff 	sub	r12,r7,-1
800023e0:	f0 1f 00 19 	mcall	80002444 <twi_master_read+0xa8>
800023e4:	8d 3c       	st.w	r6[0xc],r12

	// get a pointer to applicative data
	twi_rx_data = package->buffer;
800023e6:	6e 29       	ld.w	r9,r7[0x8]
800023e8:	49 88       	lddpc	r8,80002448 <twi_master_read+0xac>
800023ea:	91 09       	st.w	r8[0x0],r9

	// get a copy of nb bytes to read
	twi_rx_nb_bytes = package->length;
800023ec:	6e 39       	ld.w	r9,r7[0xc]
800023ee:	49 88       	lddpc	r8,8000244c <twi_master_read+0xb0>
800023f0:	91 09       	st.w	r8[0x0],r9

	// Enable master transfer
	twi->cr =  AVR32_TWI_CR_MSEN_MASK;
800023f2:	30 49       	mov	r9,4
800023f4:	8d 09       	st.w	r6[0x0],r9

	// Send start condition
	twi->cr = AVR32_TWI_START_MASK;
800023f6:	30 19       	mov	r9,1
800023f8:	8d 09       	st.w	r6[0x0],r9

	// only one byte to receive
	if (twi_rx_nb_bytes == 1) {
800023fa:	70 08       	ld.w	r8,r8[0x0]
800023fc:	12 38       	cp.w	r8,r9
800023fe:	c0 31       	brne	80002404 <twi_master_read+0x68>
		// set stop bit
		twi->cr = AVR32_TWI_STOP_MASK;
80002400:	30 28       	mov	r8,2
80002402:	8d 08       	st.w	r6[0x0],r8
	}

	// mask NACK and RXRDY interrupts
	twi_it_mask = AVR32_TWI_IER_NACK_MASK | AVR32_TWI_IER_RXRDY_MASK;
80002404:	49 38       	lddpc	r8,80002450 <twi_master_read+0xb4>
80002406:	e0 69 01 02 	mov	r9,258
8000240a:	91 09       	st.w	r8[0x0],r9

	// update IMR through IER
	twi->ier = twi_it_mask;
8000240c:	70 08       	ld.w	r8,r8[0x0]
8000240e:	8d 98       	st.w	r6[0x24],r8
#if 1	//20141209
	// get data
	while (twi_is_busy()) {
80002410:	c0 38       	rjmp	80002416 <twi_master_read+0x7a>
		cpu_relax();
80002412:	fe cf ff fc 	sub	pc,pc,-4

	// update IMR through IER
	twi->ier = twi_it_mask;
#if 1	//20141209
	// get data
	while (twi_is_busy()) {
80002416:	f0 1f 00 08 	mcall	80002434 <twi_master_read+0x98>
8000241a:	cf c1       	brne	80002412 <twi_master_read+0x76>
		cpu_relax();
	}
#endif
	// Disable master transfer
	twi->cr =  AVR32_TWI_CR_MSDIS_MASK;
8000241c:	30 88       	mov	r8,8
8000241e:	8d 08       	st.w	r6[0x0],r8

	if (twi_nack) {
80002420:	48 68       	lddpc	r8,80002438 <twi_master_read+0x9c>
80002422:	11 8c       	ld.ub	r12,r8[0x0]
80002424:	58 0c       	cp.w	r12,0
80002426:	f9 bc 01 fb 	movne	r12,-5
8000242a:	f9 bc 00 00 	moveq	r12,0
		return TWI_RECEIVE_NACK;
	}

	return TWI_SUCCESS;
}
8000242e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002432:	00 00       	add	r0,r0
80002434:	80 00       	ld.sh	r0,r0[0x0]
80002436:	22 e0       	sub	r0,46
80002438:	00 00       	add	r0,r0
8000243a:	01 11       	ld.sh	r1,r0++
8000243c:	00 00       	add	r0,r0
8000243e:	01 10       	ld.sh	r0,r0++
80002440:	00 00       	add	r0,r0
80002442:	01 1c       	ld.sh	r12,r0++
80002444:	80 00       	ld.sh	r0,r0[0x0]
80002446:	22 bc       	sub	r12,43
80002448:	00 00       	add	r0,r0
8000244a:	01 28       	ld.uh	r8,r0++
8000244c:	00 00       	add	r0,r0
8000244e:	01 24       	ld.uh	r4,r0++
80002450:	00 00       	add	r0,r0
80002452:	01 18       	ld.sh	r8,r0++

80002454 <twi_master_init>:
	return TWI_SUCCESS;
}


int twi_master_init(volatile avr32_twi_t *twi, const twi_options_t *opt)
{
80002454:	eb cd 40 e0 	pushm	r5-r7,lr
80002458:	18 97       	mov	r7,r12
8000245a:	16 95       	mov	r5,r11
	irqflags_t flags = sysreg_read(AVR32_SR);
8000245c:	e1 b8 00 00 	mfsr	r8,0x0
	int status = TWI_SUCCESS;

	// Set pointer to TWIM instance for IT
	twi_inst = twi;
80002460:	49 f9       	lddpc	r9,800024dc <twi_master_init+0x88>
80002462:	93 0c       	st.w	r9[0x0],r12

	// Disable TWI interrupts
	cpu_irq_disable();
80002464:	d3 03       	ssrf	0x10
	twi->idr = ~0UL;
80002466:	3f f9       	mov	r9,-1
80002468:	99 a9       	st.w	r12[0x28],r9
	twi->sr;
8000246a:	78 89       	ld.w	r9,r12[0x20]

	// Reset TWI
	twi->cr = AVR32_TWI_CR_SWRST_MASK;
8000246c:	e0 69 00 80 	mov	r9,128
80002470:	99 09       	st.w	r12[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002472:	e6 18 00 01 	andh	r8,0x1,COH
80002476:	c0 21       	brne	8000247a <twi_master_init+0x26>
      cpu_irq_enable();
80002478:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Dummy read in SR
	twi->sr;
8000247a:	6e 88       	ld.w	r8,r7[0x20]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000247c:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002480:	d3 03       	ssrf	0x10

	// register Register twim_master_interrupt_handler interrupt
	// on level CONF_TWI_IRQ_LEVEL
	flags = cpu_irq_save();
	irq_register_handler(&twi_master_interrupt_handler, CONF_TWI_IRQ_LINE,
80002482:	30 3a       	mov	r10,3
80002484:	e0 6b 01 60 	mov	r11,352
80002488:	49 6c       	lddpc	r12,800024e0 <twi_master_init+0x8c>
8000248a:	f0 1f 00 17 	mcall	800024e4 <twi_master_init+0x90>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000248e:	e6 16 00 01 	andh	r6,0x1,COH
80002492:	c0 21       	brne	80002496 <twi_master_init+0x42>
      cpu_irq_enable();
80002494:	d5 03       	csrf	0x10
		unsigned long pba_hz)
{
	unsigned int ckdiv = 0;
	unsigned int c_lh_div;

	c_lh_div = pba_hz / (speed * 2) - 4;
80002496:	6a 19       	ld.w	r9,r5[0x4]
80002498:	a1 79       	lsl	r9,0x1
8000249a:	6a 08       	ld.w	r8,r5[0x0]
8000249c:	f0 09 0d 08 	divu	r8,r8,r9
800024a0:	20 48       	sub	r8,4

	// cldiv must fit in 8 bits, ckdiv must fit in 3 bits
	while ((c_lh_div > 0xFF) && (ckdiv < 0x7)) {
800024a2:	e0 48 00 ff 	cp.w	r8,255
800024a6:	e0 8b 00 04 	brhi	800024ae <twi_master_init+0x5a>
800024aa:	30 09       	mov	r9,0
800024ac:	c0 f8       	rjmp	800024ca <twi_master_init+0x76>
800024ae:	30 09       	mov	r9,0
800024b0:	30 0c       	mov	r12,0
		// increase clock divider
		ckdiv++;
800024b2:	2f f9       	sub	r9,-1

		// divide cldiv value
		c_lh_div /= 2;
800024b4:	a1 98       	lsr	r8,0x1
	unsigned int c_lh_div;

	c_lh_div = pba_hz / (speed * 2) - 4;

	// cldiv must fit in 8 bits, ckdiv must fit in 3 bits
	while ((c_lh_div > 0xFF) && (ckdiv < 0x7)) {
800024b6:	e0 48 00 ff 	cp.w	r8,255
800024ba:	5f bb       	srhi	r11
800024bc:	58 69       	cp.w	r9,6
800024be:	5f 8a       	srls	r10
800024c0:	f7 ea 00 0a 	and	r10,r11,r10
800024c4:	f8 0a 18 00 	cp.b	r10,r12
800024c8:	cf 51       	brne	800024b2 <twi_master_init+0x5e>
		// divide cldiv value
		c_lh_div /= 2;
	}

	// set clock waveform generator register
	twi->cwgr = ((c_lh_div << AVR32_TWI_CWGR_CLDIV_OFFSET) |
800024ca:	b1 69       	lsl	r9,0x10
800024cc:	f3 e8 10 89 	or	r9,r9,r8<<0x8
800024d0:	f3 e8 10 08 	or	r8,r9,r8
800024d4:	8f 48       	st.w	r7[0x10],r8

	// Probe the component
	//status = twi_probe(twi, opt->chip);

	return status;
}
800024d6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800024da:	00 00       	add	r0,r0
800024dc:	00 00       	add	r0,r0
800024de:	01 1c       	ld.sh	r12,r0++
800024e0:	80 00       	ld.sh	r0,r0[0x0]
800024e2:	22 04       	sub	r4,32
800024e4:	80 00       	ld.sh	r0,r0[0x0]
800024e6:	28 78       	sub	r8,-121

800024e8 <ui_com_open>:
{
	LED_On(LED0);
}

void ui_com_open(uint8_t port)
{
800024e8:	d4 01       	pushm	lr
	LED_On(LED2);
800024ea:	30 4c       	mov	r12,4
800024ec:	f0 1f 00 02 	mcall	800024f4 <ui_com_open+0xc>
}
800024f0:	d8 02       	popm	pc
800024f2:	00 00       	add	r0,r0
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	26 4c       	sub	r12,100

800024f8 <ui_wakeup>:
	LED_Off(LED1);
	LED_Off(LED2);
}

void ui_wakeup(void)
{
800024f8:	d4 01       	pushm	lr
	LED_On(LED0);
800024fa:	30 1c       	mov	r12,1
800024fc:	f0 1f 00 02 	mcall	80002504 <ui_wakeup+0xc>
}
80002500:	d8 02       	popm	pc
80002502:	00 00       	add	r0,r0
80002504:	80 00       	ld.sh	r0,r0[0x0]
80002506:	26 4c       	sub	r12,100

80002508 <ui_process>:
void ui_com_overflow(void)
{
}

void ui_process(uint16_t framenumber)
{
80002508:	d4 01       	pushm	lr
	if ((framenumber % 1000) == 0) {
8000250a:	5c 7c       	castu.h	r12
8000250c:	e0 69 4d d3 	mov	r9,19923
80002510:	ea 19 10 62 	orh	r9,0x1062
80002514:	f8 09 06 48 	mulu.d	r8,r12,r9
80002518:	f2 08 16 06 	lsr	r8,r9,0x6
8000251c:	e0 69 03 e8 	mov	r9,1000
80002520:	b3 38       	mul	r8,r9
80002522:	10 1c       	sub	r12,r8
80002524:	5c 8c       	casts.h	r12
80002526:	c0 51       	brne	80002530 <ui_process+0x28>
		LED_On(LED1);
80002528:	30 2c       	mov	r12,2
8000252a:	f0 1f 00 07 	mcall	80002544 <ui_process+0x3c>
8000252e:	d8 02       	popm	pc
	}
	if ((framenumber % 1000) == 500) {
80002530:	e0 68 01 f4 	mov	r8,500
80002534:	f0 0c 19 00 	cp.h	r12,r8
80002538:	c0 41       	brne	80002540 <ui_process+0x38>
		LED_Off(LED1);
8000253a:	30 2c       	mov	r12,2
8000253c:	f0 1f 00 03 	mcall	80002548 <ui_process+0x40>
80002540:	d8 02       	popm	pc
80002542:	00 00       	add	r0,r0
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	26 4c       	sub	r12,100
80002548:	80 00       	ld.sh	r0,r0[0x0]
8000254a:	26 9c       	sub	r12,105

8000254c <ui_com_close>:
{
	LED_On(LED2);
}

void ui_com_close(uint8_t port)
{
8000254c:	d4 01       	pushm	lr
	LED_Off(LED2);
8000254e:	30 4c       	mov	r12,4
80002550:	f0 1f 00 02 	mcall	80002558 <ui_com_close+0xc>
}
80002554:	d8 02       	popm	pc
80002556:	00 00       	add	r0,r0
80002558:	80 00       	ld.sh	r0,r0[0x0]
8000255a:	26 9c       	sub	r12,105

8000255c <ui_powerdown>:
	LED_Off(LED1);
	LED_Off(LED2);
}

void ui_powerdown(void)
{
8000255c:	d4 01       	pushm	lr
	LED_Off(LED0);
8000255e:	30 1c       	mov	r12,1
80002560:	f0 1f 00 05 	mcall	80002574 <ui_powerdown+0x18>
	LED_Off(LED1);
80002564:	30 2c       	mov	r12,2
80002566:	f0 1f 00 04 	mcall	80002574 <ui_powerdown+0x18>
	LED_Off(LED2);
8000256a:	30 4c       	mov	r12,4
8000256c:	f0 1f 00 02 	mcall	80002574 <ui_powerdown+0x18>
}
80002570:	d8 02       	popm	pc
80002572:	00 00       	add	r0,r0
80002574:	80 00       	ld.sh	r0,r0[0x0]
80002576:	26 9c       	sub	r12,105

80002578 <ui_init>:

#include <asf.h>
#include "ui.h"

void ui_init(void)
{
80002578:	d4 01       	pushm	lr
	LED_On(LED0);
8000257a:	30 1c       	mov	r12,1
8000257c:	f0 1f 00 05 	mcall	80002590 <ui_init+0x18>
	LED_Off(LED1);
80002580:	30 2c       	mov	r12,2
80002582:	f0 1f 00 05 	mcall	80002594 <ui_init+0x1c>
	LED_Off(LED2);
80002586:	30 4c       	mov	r12,4
80002588:	f0 1f 00 03 	mcall	80002594 <ui_init+0x1c>
}
8000258c:	d8 02       	popm	pc
8000258e:	00 00       	add	r0,r0
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	26 4c       	sub	r12,100
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	26 9c       	sub	r12,105

80002598 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#	define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002598:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000259a:	30 3b       	mov	r11,3
8000259c:	30 7c       	mov	r12,7
8000259e:	f0 1f 00 14 	mcall	800025ec <board_init+0x54>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800025a2:	30 3b       	mov	r11,3
800025a4:	30 8c       	mov	r12,8
800025a6:	f0 1f 00 12 	mcall	800025ec <board_init+0x54>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800025aa:	30 3b       	mov	r11,3
800025ac:	31 5c       	mov	r12,21
800025ae:	f0 1f 00 10 	mcall	800025ec <board_init+0x54>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800025b2:	30 3b       	mov	r11,3
800025b4:	31 6c       	mov	r12,22
800025b6:	f0 1f 00 0e 	mcall	800025ec <board_init+0x54>
//20141103	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
//20141103	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
//20141103	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);

//20141103
	gpio_configure_pin(SGA100_ACC_INT_PIN,GPIO_DIR_INPUT);
800025ba:	30 0b       	mov	r11,0
800025bc:	30 5c       	mov	r12,5
800025be:	f0 1f 00 0c 	mcall	800025ec <board_init+0x54>
	gpio_configure_pin(BMA150_ACC_INT_PIN,GPIO_DIR_INPUT);
800025c2:	30 0b       	mov	r11,0
800025c4:	32 2c       	mov	r12,34
800025c6:	f0 1f 00 0a 	mcall	800025ec <board_init+0x54>
	gpio_configure_pin(ITG3200_GYR_INT_PIN,GPIO_DIR_INPUT);
800025ca:	30 0b       	mov	r11,0
800025cc:	32 3c       	mov	r12,35
800025ce:	f0 1f 00 08 	mcall	800025ec <board_init+0x54>
	gpio_configure_pin(AK8975_MAG_INT_PIN,GPIO_DIR_INPUT);
800025d2:	30 0b       	mov	r11,0
800025d4:	30 6c       	mov	r12,6
800025d6:	f0 1f 00 06 	mcall	800025ec <board_init+0x54>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800025da:	30 2b       	mov	r11,2
800025dc:	48 5c       	lddpc	r12,800025f0 <board_init+0x58>
800025de:	f0 1f 00 06 	mcall	800025f4 <board_init+0x5c>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800025e2:	30 2b       	mov	r11,2
800025e4:	48 5c       	lddpc	r12,800025f8 <board_init+0x60>
800025e6:	f0 1f 00 04 	mcall	800025f4 <board_init+0x5c>

	// Assign GPIO pins to USB.
	gpio_enable_module(USB_GPIO_MAP,
			sizeof(USB_GPIO_MAP) / sizeof(USB_GPIO_MAP[0]));
#endif
}
800025ea:	d8 02       	popm	pc
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	27 a8       	sub	r8,122
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	60 10       	ld.w	r0,r0[0x4]
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	27 78       	sub	r8,119
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	60 00       	ld.w	r0,r0[0x0]

800025fc <LED_Toggle>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800025fc:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80002600:	49 18       	lddpc	r8,80002644 <LED_Toggle+0x48>
80002602:	70 09       	ld.w	r9,r8[0x0]
80002604:	f9 e9 20 09 	eor	r9,r12,r9
80002608:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000260a:	58 0c       	cp.w	r12,0
8000260c:	5e 0c       	reteq	r12
8000260e:	48 f8       	lddpc	r8,80002648 <LED_Toggle+0x4c>
80002610:	21 08       	sub	r8,16
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
80002612:	18 9a       	mov	r10,r12
80002614:	5c 9a       	brev	r10
80002616:	f4 0a 12 00 	clz	r10,r10
8000261a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
8000261c:	f4 09 15 04 	lsl	r9,r10,0x4
80002620:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002622:	70 09       	ld.w	r9,r8[0x0]
80002624:	a9 69       	lsl	r9,0x8
80002626:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
8000262a:	70 1b       	ld.w	r11,r8[0x4]
8000262c:	f3 4b 00 5c 	st.w	r9[92],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002630:	70 1b       	ld.w	r11,r8[0x4]
80002632:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002636:	70 1b       	ld.w	r11,r8[0x4]
80002638:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000263a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000263e:	ce a1       	brne	80002612 <LED_Toggle+0x16>
80002640:	5e fc       	retal	r12
80002642:	00 00       	add	r0,r0
80002644:	00 00       	add	r0,r0
80002646:	00 08       	add	r8,r0
80002648:	80 00       	ld.sh	r0,r0[0x0]
8000264a:	60 20       	ld.w	r0,r0[0x8]

8000264c <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000264c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002650:	49 18       	lddpc	r8,80002694 <LED_On+0x48>
80002652:	70 09       	ld.w	r9,r8[0x0]
80002654:	f9 e9 10 09 	or	r9,r12,r9
80002658:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000265a:	58 0c       	cp.w	r12,0
8000265c:	5e 0c       	reteq	r12
8000265e:	48 f8       	lddpc	r8,80002698 <LED_On+0x4c>
80002660:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002662:	18 9a       	mov	r10,r12
80002664:	5c 9a       	brev	r10
80002666:	f4 0a 12 00 	clz	r10,r10
8000266a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
8000266c:	f4 09 15 04 	lsl	r9,r10,0x4
80002670:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002672:	70 09       	ld.w	r9,r8[0x0]
80002674:	a9 69       	lsl	r9,0x8
80002676:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000267a:	70 1b       	ld.w	r11,r8[0x4]
8000267c:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002680:	70 1b       	ld.w	r11,r8[0x4]
80002682:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002686:	70 1b       	ld.w	r11,r8[0x4]
80002688:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000268a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000268e:	ce a1       	brne	80002662 <LED_On+0x16>
80002690:	5e fc       	retal	r12
80002692:	00 00       	add	r0,r0
80002694:	00 00       	add	r0,r0
80002696:	00 08       	add	r8,r0
80002698:	80 00       	ld.sh	r0,r0[0x0]
8000269a:	60 20       	ld.w	r0,r0[0x8]

8000269c <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000269c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800026a0:	49 28       	lddpc	r8,800026e8 <LED_Off+0x4c>
800026a2:	70 09       	ld.w	r9,r8[0x0]
800026a4:	f8 0a 11 ff 	rsub	r10,r12,-1
800026a8:	f5 e9 00 09 	and	r9,r10,r9
800026ac:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800026ae:	58 0c       	cp.w	r12,0
800026b0:	5e 0c       	reteq	r12
800026b2:	48 f8       	lddpc	r8,800026ec <LED_Off+0x50>
800026b4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800026b6:	18 9a       	mov	r10,r12
800026b8:	5c 9a       	brev	r10
800026ba:	f4 0a 12 00 	clz	r10,r10
800026be:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800026c0:	f4 09 15 04 	lsl	r9,r10,0x4
800026c4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800026c6:	70 09       	ld.w	r9,r8[0x0]
800026c8:	a9 69       	lsl	r9,0x8
800026ca:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800026ce:	70 1b       	ld.w	r11,r8[0x4]
800026d0:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800026d4:	70 1b       	ld.w	r11,r8[0x4]
800026d6:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800026da:	70 1b       	ld.w	r11,r8[0x4]
800026dc:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800026de:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800026e2:	ce a1       	brne	800026b6 <LED_Off+0x1a>
800026e4:	5e fc       	retal	r12
800026e6:	00 00       	add	r0,r0
800026e8:	00 00       	add	r0,r0
800026ea:	00 08       	add	r8,r0
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	60 20       	ld.w	r0,r0[0x8]

800026f0 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800026f0:	fe 68 14 00 	mov	r8,-125952
800026f4:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800026f6:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800026fa:	91 09       	st.w	r8[0x0],r9
}
800026fc:	5e fc       	retal	r12
800026fe:	d7 03       	nop

80002700 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002700:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002702:	e0 68 8a 3f 	mov	r8,35391
80002706:	ea 18 01 f7 	orh	r8,0x1f7
8000270a:	10 3c       	cp.w	r12,r8
8000270c:	e0 88 00 06 	brls	80002718 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80002710:	30 1c       	mov	r12,1
80002712:	f0 1f 00 04 	mcall	80002720 <flashc_set_bus_freq+0x20>
80002716:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80002718:	30 0c       	mov	r12,0
8000271a:	f0 1f 00 02 	mcall	80002720 <flashc_set_bus_freq+0x20>
8000271e:	d8 02       	popm	pc
80002720:	80 00       	ld.sh	r0,r0[0x0]
80002722:	26 f0       	sub	r0,111

80002724 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002724:	f8 08 16 05 	lsr	r8,r12,0x5
80002728:	a9 68       	lsl	r8,0x8
8000272a:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
8000272e:	58 1b       	cp.w	r11,1
80002730:	c0 d0       	breq	8000274a <gpio_enable_module_pin+0x26>
80002732:	c0 63       	brcs	8000273e <gpio_enable_module_pin+0x1a>
80002734:	58 2b       	cp.w	r11,2
80002736:	c1 00       	breq	80002756 <gpio_enable_module_pin+0x32>
80002738:	58 3b       	cp.w	r11,3
8000273a:	c1 40       	breq	80002762 <gpio_enable_module_pin+0x3e>
8000273c:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000273e:	30 19       	mov	r9,1
80002740:	f2 0c 09 49 	lsl	r9,r9,r12
80002744:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002746:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002748:	c1 28       	rjmp	8000276c <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000274a:	30 19       	mov	r9,1
8000274c:	f2 0c 09 49 	lsl	r9,r9,r12
80002750:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002752:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002754:	c0 c8       	rjmp	8000276c <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002756:	30 19       	mov	r9,1
80002758:	f2 0c 09 49 	lsl	r9,r9,r12
8000275c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000275e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002760:	c0 68       	rjmp	8000276c <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002762:	30 19       	mov	r9,1
80002764:	f2 0c 09 49 	lsl	r9,r9,r12
80002768:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000276a:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000276c:	30 19       	mov	r9,1
8000276e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002772:	91 2c       	st.w	r8[0x8],r12
80002774:	5e fd       	retal	0
80002776:	d7 03       	nop

80002778 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002778:	d4 21       	pushm	r4-r7,lr
8000277a:	18 97       	mov	r7,r12
8000277c:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000277e:	58 0b       	cp.w	r11,0
80002780:	c0 31       	brne	80002786 <gpio_enable_module+0xe>
80002782:	30 05       	mov	r5,0
80002784:	c0 d8       	rjmp	8000279e <gpio_enable_module+0x26>
80002786:	30 06       	mov	r6,0
80002788:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000278a:	6e 1b       	ld.w	r11,r7[0x4]
8000278c:	6e 0c       	ld.w	r12,r7[0x0]
8000278e:	f0 1f 00 06 	mcall	800027a4 <gpio_enable_module+0x2c>
80002792:	18 45       	or	r5,r12
		gpiomap++;
80002794:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002796:	2f f6       	sub	r6,-1
80002798:	0c 34       	cp.w	r4,r6
8000279a:	fe 9b ff f8 	brhi	8000278a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000279e:	0a 9c       	mov	r12,r5
800027a0:	d8 22       	popm	r4-r7,pc
800027a2:	00 00       	add	r0,r0
800027a4:	80 00       	ld.sh	r0,r0[0x0]
800027a6:	27 24       	sub	r4,114

800027a8 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800027a8:	f8 08 16 05 	lsr	r8,r12,0x5
800027ac:	a9 68       	lsl	r8,0x8
800027ae:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800027b2:	16 99       	mov	r9,r11
800027b4:	e2 19 00 04 	andl	r9,0x4,COH
800027b8:	c0 70       	breq	800027c6 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800027ba:	30 19       	mov	r9,1
800027bc:	f2 0c 09 49 	lsl	r9,r9,r12
800027c0:	f1 49 00 74 	st.w	r8[116],r9
800027c4:	c0 68       	rjmp	800027d0 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800027c6:	30 19       	mov	r9,1
800027c8:	f2 0c 09 49 	lsl	r9,r9,r12
800027cc:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800027d0:	16 99       	mov	r9,r11
800027d2:	e2 19 00 80 	andl	r9,0x80,COH
800027d6:	c2 40       	breq	8000281e <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
800027d8:	16 99       	mov	r9,r11
800027da:	e2 19 01 80 	andl	r9,0x180,COH
800027de:	c0 90       	breq	800027f0 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800027e0:	30 19       	mov	r9,1
800027e2:	f2 0c 09 49 	lsl	r9,r9,r12
800027e6:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800027ea:	f1 49 00 b8 	st.w	r8[184],r9
800027ee:	c1 88       	rjmp	8000281e <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
800027f0:	16 99       	mov	r9,r11
800027f2:	e2 19 02 80 	andl	r9,0x280,COH
800027f6:	c0 90       	breq	80002808 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
800027f8:	30 19       	mov	r9,1
800027fa:	f2 0c 09 49 	lsl	r9,r9,r12
800027fe:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002802:	f1 49 00 b8 	st.w	r8[184],r9
80002806:	c0 c8       	rjmp	8000281e <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002808:	16 99       	mov	r9,r11
8000280a:	e2 19 03 80 	andl	r9,0x380,COH
8000280e:	c0 80       	breq	8000281e <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002810:	30 19       	mov	r9,1
80002812:	f2 0c 09 49 	lsl	r9,r9,r12
80002816:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
8000281a:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000281e:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002822:	c1 50       	breq	8000284c <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002824:	e2 1b 00 02 	andl	r11,0x2,COH
80002828:	c0 70       	breq	80002836 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
8000282a:	30 19       	mov	r9,1
8000282c:	f2 0c 09 49 	lsl	r9,r9,r12
80002830:	f1 49 00 54 	st.w	r8[84],r9
80002834:	c0 68       	rjmp	80002840 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002836:	30 19       	mov	r9,1
80002838:	f2 0c 09 49 	lsl	r9,r9,r12
8000283c:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002840:	30 19       	mov	r9,1
80002842:	f2 0c 09 49 	lsl	r9,r9,r12
80002846:	f1 49 00 44 	st.w	r8[68],r9
8000284a:	c0 68       	rjmp	80002856 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
8000284c:	30 19       	mov	r9,1
8000284e:	f2 0c 09 49 	lsl	r9,r9,r12
80002852:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002856:	30 19       	mov	r9,1
80002858:	f2 0c 09 4c 	lsl	r12,r9,r12
8000285c:	91 1c       	st.w	r8[0x4],r12
}
8000285e:	5e fc       	retal	r12

80002860 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002860:	f8 08 16 05 	lsr	r8,r12,0x5
80002864:	a9 68       	lsl	r8,0x8
80002866:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
8000286a:	71 88       	ld.w	r8,r8[0x60]
8000286c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002870:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002874:	5e fc       	retal	r12

80002876 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002876:	c0 08       	rjmp	80002876 <_unhandled_interrupt>

80002878 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002878:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000287c:	49 99       	lddpc	r9,800028e0 <INTC_register_interrupt+0x68>
8000287e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002882:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002886:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002888:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000288c:	58 0a       	cp.w	r10,0
8000288e:	c0 91       	brne	800028a0 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002890:	49 59       	lddpc	r9,800028e4 <INTC_register_interrupt+0x6c>
80002892:	49 6a       	lddpc	r10,800028e8 <INTC_register_interrupt+0x70>
80002894:	12 1a       	sub	r10,r9
80002896:	fe 79 08 00 	mov	r9,-63488
8000289a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000289e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800028a0:	58 1a       	cp.w	r10,1
800028a2:	c0 a1       	brne	800028b6 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800028a4:	49 09       	lddpc	r9,800028e4 <INTC_register_interrupt+0x6c>
800028a6:	49 2a       	lddpc	r10,800028ec <INTC_register_interrupt+0x74>
800028a8:	12 1a       	sub	r10,r9
800028aa:	bf aa       	sbr	r10,0x1e
800028ac:	fe 79 08 00 	mov	r9,-63488
800028b0:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028b4:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800028b6:	58 2a       	cp.w	r10,2
800028b8:	c0 a1       	brne	800028cc <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800028ba:	48 b9       	lddpc	r9,800028e4 <INTC_register_interrupt+0x6c>
800028bc:	48 da       	lddpc	r10,800028f0 <INTC_register_interrupt+0x78>
800028be:	12 1a       	sub	r10,r9
800028c0:	bf ba       	sbr	r10,0x1f
800028c2:	fe 79 08 00 	mov	r9,-63488
800028c6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028ca:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
800028cc:	48 69       	lddpc	r9,800028e4 <INTC_register_interrupt+0x6c>
800028ce:	48 aa       	lddpc	r10,800028f4 <INTC_register_interrupt+0x7c>
800028d0:	12 1a       	sub	r10,r9
800028d2:	ea 1a c0 00 	orh	r10,0xc000
800028d6:	fe 79 08 00 	mov	r9,-63488
800028da:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800028de:	5e fc       	retal	r12
800028e0:	80 00       	ld.sh	r0,r0[0x0]
800028e2:	60 60       	ld.w	r0,r0[0x18]
800028e4:	80 00       	ld.sh	r0,r0[0x0]
800028e6:	5e 00       	reteq	r0
800028e8:	80 00       	ld.sh	r0,r0[0x0]
800028ea:	5f 04       	sreq	r4
800028ec:	80 00       	ld.sh	r0,r0[0x0]
800028ee:	5f 12       	srne	r2
800028f0:	80 00       	ld.sh	r0,r0[0x0]
800028f2:	5f 20       	srhs	r0
800028f4:	80 00       	ld.sh	r0,r0[0x0]
800028f6:	5f 2e       	srhs	lr

800028f8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800028f8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800028fa:	49 18       	lddpc	r8,8000293c <INTC_init_interrupts+0x44>
800028fc:	e3 b8 00 01 	mtsr	0x4,r8
80002900:	49 0e       	lddpc	lr,80002940 <INTC_init_interrupts+0x48>
80002902:	30 07       	mov	r7,0
80002904:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002906:	49 0c       	lddpc	r12,80002944 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002908:	49 05       	lddpc	r5,80002948 <INTC_init_interrupts+0x50>
8000290a:	10 15       	sub	r5,r8
8000290c:	fe 76 08 00 	mov	r6,-63488
80002910:	c1 08       	rjmp	80002930 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80002912:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80002914:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002916:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80002918:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
8000291c:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000291e:	10 3a       	cp.w	r10,r8
80002920:	fe 9b ff fc 	brhi	80002918 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002924:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002928:	2f f7       	sub	r7,-1
8000292a:	2f 8e       	sub	lr,-8
8000292c:	59 27       	cp.w	r7,18
8000292e:	c0 50       	breq	80002938 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80002930:	7c 08       	ld.w	r8,lr[0x0]
80002932:	58 08       	cp.w	r8,0
80002934:	ce f1       	brne	80002912 <INTC_init_interrupts+0x1a>
80002936:	cf 7b       	rjmp	80002924 <INTC_init_interrupts+0x2c>
80002938:	d8 22       	popm	r4-r7,pc
8000293a:	00 00       	add	r0,r0
8000293c:	80 00       	ld.sh	r0,r0[0x0]
8000293e:	5e 00       	reteq	r0
80002940:	80 00       	ld.sh	r0,r0[0x0]
80002942:	60 60       	ld.w	r0,r0[0x18]
80002944:	80 00       	ld.sh	r0,r0[0x0]
80002946:	28 76       	sub	r6,-121
80002948:	80 00       	ld.sh	r0,r0[0x0]
8000294a:	5f 04       	sreq	r4

8000294c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000294c:	fe 78 08 00 	mov	r8,-63488
80002950:	e0 69 00 83 	mov	r9,131
80002954:	f2 0c 01 0c 	sub	r12,r9,r12
80002958:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000295c:	f2 ca ff c0 	sub	r10,r9,-64
80002960:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002964:	58 08       	cp.w	r8,0
80002966:	c0 21       	brne	8000296a <_get_interrupt_handler+0x1e>
80002968:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000296a:	f0 08 12 00 	clz	r8,r8
8000296e:	48 5a       	lddpc	r10,80002980 <_get_interrupt_handler+0x34>
80002970:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002974:	f0 08 11 1f 	rsub	r8,r8,31
80002978:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000297a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000297e:	5e fc       	retal	r12
80002980:	80 00       	ld.sh	r0,r0[0x0]
80002982:	60 60       	ld.w	r0,r0[0x18]

80002984 <udd_sleep_mode>:
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80002984:	48 28       	lddpc	r8,8000298c <udd_sleep_mode+0x8>
80002986:	b0 8c       	st.b	r8[0x0],r12
}
80002988:	5e fc       	retal	r12
8000298a:	00 00       	add	r0,r0
8000298c:	00 00       	add	r0,r0
8000298e:	02 10       	sub	r0,r1

80002990 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80002990:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80002992:	fe 68 08 00 	mov	r8,-129024
80002996:	70 09       	ld.w	r9,r8[0x0]
80002998:	af c9       	cbr	r9,0xe
8000299a:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
8000299c:	fe 69 00 00 	mov	r9,-131072
800029a0:	72 0a       	ld.w	r10,r9[0x0]
800029a2:	a9 aa       	sbr	r10,0x8
800029a4:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
800029a6:	70 09       	ld.w	r9,r8[0x0]
800029a8:	af a9       	sbr	r9,0xe
800029aa:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
800029ac:	30 0c       	mov	r12,0
800029ae:	f0 1f 00 02 	mcall	800029b4 <udd_detach+0x24>
}
800029b2:	d8 02       	popm	pc
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	29 84       	sub	r4,-104

800029b8 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
800029b8:	5e fd       	retal	0

800029ba <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800029ba:	fe 68 00 00 	mov	r8,-131072
800029be:	70 09       	ld.w	r9,r8[0x0]
800029c0:	a7 d9       	cbr	r9,0x7
800029c2:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800029c4:	70 09       	ld.w	r9,r8[0x0]
800029c6:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800029ca:	e0 19 ff 80 	andl	r9,0xff80
800029ce:	f9 e9 10 09 	or	r9,r12,r9
800029d2:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800029d4:	70 09       	ld.w	r9,r8[0x0]
800029d6:	a7 b9       	sbr	r9,0x7
800029d8:	91 09       	st.w	r8[0x0],r9
}
800029da:	5e fc       	retal	r12

800029dc <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800029dc:	fe 68 00 00 	mov	r8,-131072
800029e0:	70 0c       	ld.w	r12,r8[0x0]
}
800029e2:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800029e6:	5e fc       	retal	r12

800029e8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800029e8:	fe 68 00 20 	mov	r8,-131040
800029ec:	70 0c       	ld.w	r12,r8[0x0]
}
800029ee:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800029f2:	5e fc       	retal	r12

800029f4 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
800029f4:	fe 68 00 00 	mov	r8,-131072
800029f8:	70 8c       	ld.w	r12,r8[0x20]
}
800029fa:	f9 dc c0 0e 	bfextu	r12,r12,0x0,0xe
800029fe:	5e fc       	retal	r12

80002a00 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80002a00:	48 28       	lddpc	r8,80002a08 <udd_set_setup_payload+0x8>
80002a02:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80002a04:	b0 6b       	st.h	r8[0xc],r11
}
80002a06:	5e fc       	retal	r12
80002a08:	00 00       	add	r0,r0
80002a0a:	07 90       	ld.ub	r0,r3[0x1]

80002a0c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80002a0c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80002a10:	a3 68       	lsl	r8,0x2
80002a12:	e0 38 fe 40 	sub	r8,130624
80002a16:	70 0c       	ld.w	r12,r8[0x0]
}
80002a18:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80002a1c:	5e fc       	retal	r12
80002a1e:	d7 03       	nop

80002a20 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80002a20:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002a22:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80002a26:	30 39       	mov	r9,3
80002a28:	f2 08 18 00 	cp.b	r8,r9
80002a2c:	e0 8b 00 49 	brhi	80002abe <udd_ep_set_halt+0x9e>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80002a30:	f0 09 15 02 	lsl	r9,r8,0x2
80002a34:	fe 6e 01 c0 	mov	lr,-130624
80002a38:	f2 0e 00 0a 	add	r10,r9,lr
80002a3c:	74 0a       	ld.w	r10,r10[0x0]
80002a3e:	e6 1a 00 08 	andh	r10,0x8,COH
80002a42:	c3 f1       	brne	80002ac0 <udd_ep_set_halt+0xa0>

	if (USB_DEVICE_MAX_EP < index) {
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
80002a44:	f0 ca 00 01 	sub	r10,r8,1
80002a48:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
80002a4c:	49 eb       	lddpc	r11,80002ac4 <udd_ep_set_halt+0xa4>
80002a4e:	f6 0a 00 2a 	add	r10,r11,r10<<0x2

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80002a52:	74 0b       	ld.w	r11,r10[0x0]
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
80002a54:	16 9e       	mov	lr,r11
80002a56:	e6 1e 20 00 	andh	lr,0x2000,COH
80002a5a:	c3 31       	brne	80002ac0 <udd_ep_set_halt+0xa0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
80002a5c:	58 0b       	cp.w	r11,0
80002a5e:	c3 05       	brlt	80002abe <udd_ep_set_halt+0x9e>
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
80002a60:	30 0b       	mov	r11,0
80002a62:	f6 0c 18 00 	cp.b	r12,r11
80002a66:	c1 94       	brge	80002a98 <udd_ep_set_halt+0x78>
80002a68:	fe 6c 01 30 	mov	r12,-130768
80002a6c:	f2 0c 00 0b 	add	r11,r9,r12
80002a70:	76 0b       	ld.w	r11,r11[0x0]
80002a72:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
80002a76:	c1 10       	breq	80002a98 <udd_ep_set_halt+0x78>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
80002a78:	74 0b       	ld.w	r11,r10[0x0]
80002a7a:	30 1c       	mov	r12,1
80002a7c:	f7 dc d3 a1 	bfins	r11,r12,0x1d,0x1
80002a80:	95 0b       	st.w	r10[0x0],r11
			udd_enable_bank_interrupt(index);
80002a82:	e0 39 fe 10 	sub	r9,130576
80002a86:	e0 6a 10 00 	mov	r10,4096
80002a8a:	93 0a       	st.w	r9[0x0],r10
			udd_enable_endpoint_interrupt(index);
80002a8c:	f4 08 09 48 	lsl	r8,r10,r8
80002a90:	fe 69 00 00 	mov	r9,-131072
80002a94:	93 68       	st.w	r9[0x18],r8
			return true;
80002a96:	d8 02       	popm	pc
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80002a98:	fe 6a 01 00 	mov	r10,-130816
80002a9c:	f2 0a 00 08 	add	r8,r9,r10
80002aa0:	70 0a       	ld.w	r10,r8[0x0]
80002aa2:	a9 da       	cbr	r10,0x9
80002aa4:	91 0a       	st.w	r8[0x0],r10
	udd_ack_stall(index);
80002aa6:	fe 6e 01 60 	mov	lr,-130720
80002aaa:	f2 0e 00 08 	add	r8,r9,lr
80002aae:	34 0a       	mov	r10,64
80002ab0:	91 0a       	st.w	r8[0x0],r10
	udd_enable_stall_handshake(index);
80002ab2:	e0 39 fe 10 	sub	r9,130576
80002ab6:	e8 68 00 00 	mov	r8,524288
80002aba:	93 08       	st.w	r9[0x0],r8
80002abc:	da 0a       	popm	pc,r12=1
	return true;
80002abe:	d8 0a       	popm	pc,r12=0
80002ac0:	da 0a       	popm	pc,r12=1
80002ac2:	00 00       	add	r0,r0
80002ac4:	00 00       	add	r0,r0
80002ac6:	01 d4       	ld.ub	r4,r0[0x5]

80002ac8 <udd_ep_clear_halt>:
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80002ac8:	d4 01       	pushm	lr
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80002aca:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80002ace:	30 38       	mov	r8,3
80002ad0:	f0 0c 18 00 	cp.b	r12,r8
80002ad4:	e0 88 00 03 	brls	80002ada <udd_ep_clear_halt+0x12>
80002ad8:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80002ada:	18 99       	mov	r9,r12
80002adc:	f8 c8 00 01 	sub	r8,r12,1
80002ae0:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002ae4:	4a aa       	lddpc	r10,80002b8c <udd_ep_clear_halt+0xc4>
80002ae6:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (ptr_job->stall_requested) {
80002aea:	70 0a       	ld.w	r10,r8[0x0]
80002aec:	e6 1a 20 00 	andh	r10,0x2000,COH
80002af0:	c0 31       	brne	80002af6 <udd_ep_clear_halt+0x2e>
80002af2:	30 0b       	mov	r11,0
80002af4:	c1 38       	rjmp	80002b1a <udd_ep_clear_halt+0x52>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80002af6:	70 0a       	ld.w	r10,r8[0x0]
80002af8:	30 0b       	mov	r11,0
80002afa:	f5 db d3 a1 	bfins	r10,r11,0x1d,0x1
80002afe:	91 0a       	st.w	r8[0x0],r10
		udd_disable_bank_interrupt(ep);
80002b00:	f8 0b 15 02 	lsl	r11,r12,0x2
80002b04:	e0 3b fd e0 	sub	r11,130528
80002b08:	e0 6a 10 00 	mov	r10,4096
80002b0c:	97 0a       	st.w	r11[0x0],r10
		udd_disable_endpoint_interrupt(ep);
80002b0e:	f4 0c 09 4c 	lsl	r12,r10,r12
80002b12:	fe 6b 00 00 	mov	r11,-131072
80002b16:	97 5c       	st.w	r11[0x14],r12
80002b18:	30 1b       	mov	r11,1
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80002b1a:	a3 69       	lsl	r9,0x2
80002b1c:	fe 6c 01 c0 	mov	r12,-130624
80002b20:	f2 0c 00 0a 	add	r10,r9,r12
80002b24:	74 0a       	ld.w	r10,r10[0x0]
80002b26:	e6 1a 00 08 	andh	r10,0x8,COH
80002b2a:	c2 30       	breq	80002b70 <udd_ep_clear_halt+0xa8>
		if (Is_udd_stall(ep)) {
80002b2c:	fe 6b 01 30 	mov	r11,-130768
80002b30:	f2 0b 00 0a 	add	r10,r9,r11
80002b34:	74 0a       	ld.w	r10,r10[0x0]
80002b36:	e2 1a 00 40 	andl	r10,0x40,COH
80002b3a:	c0 e0       	breq	80002b56 <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep);
80002b3c:	fe 6c 01 60 	mov	r12,-130720
80002b40:	f2 0c 00 0a 	add	r10,r9,r12
80002b44:	34 0b       	mov	r11,64
80002b46:	95 0b       	st.w	r10[0x0],r11
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
80002b48:	fe 6b 01 f0 	mov	r11,-130576
80002b4c:	f2 0b 00 0a 	add	r10,r9,r11
80002b50:	e4 6b 00 00 	mov	r11,262144
80002b54:	95 0b       	st.w	r10[0x0],r11
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
80002b56:	fe 6c 02 20 	mov	r12,-130528
80002b5a:	f2 0c 00 0a 	add	r10,r9,r12
80002b5e:	e8 6b 00 00 	mov	r11,524288
80002b62:	95 0b       	st.w	r10[0x0],r11
		udd_enable_endpoint_bank_autoswitch(ep);
80002b64:	e0 39 ff 00 	sub	r9,130816
80002b68:	72 0a       	ld.w	r10,r9[0x0]
80002b6a:	a9 ba       	sbr	r10,0x9
80002b6c:	93 0a       	st.w	r9[0x0],r10
80002b6e:	c0 38       	rjmp	80002b74 <udd_ep_clear_halt+0xac>
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
80002b70:	58 0b       	cp.w	r11,0
80002b72:	c0 b0       	breq	80002b88 <udd_ep_clear_halt+0xc0>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80002b74:	70 09       	ld.w	r9,r8[0x0]
80002b76:	58 09       	cp.w	r9,0
80002b78:	c0 84       	brge	80002b88 <udd_ep_clear_halt+0xc0>
			ptr_job->busy = false;
80002b7a:	30 0a       	mov	r10,0
80002b7c:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80002b80:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80002b82:	70 48       	ld.w	r8,r8[0x10]
80002b84:	5d 18       	icall	r8
80002b86:	da 0a       	popm	pc,r12=1
80002b88:	da 0a       	popm	pc,r12=1
80002b8a:	00 00       	add	r0,r0
80002b8c:	00 00       	add	r0,r0
80002b8e:	01 d4       	ld.ub	r4,r0[0x5]

80002b90 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002b90:	30 59       	mov	r9,5
80002b92:	48 58       	lddpc	r8,80002ba4 <udd_ctrl_stall_data+0x14>
80002b94:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80002b96:	e8 69 00 00 	mov	r9,524288
80002b9a:	fe 68 01 f0 	mov	r8,-130576
80002b9e:	91 09       	st.w	r8[0x0],r9
}
80002ba0:	5e fc       	retal	r12
80002ba2:	00 00       	add	r0,r0
80002ba4:	00 00       	add	r0,r0
80002ba6:	02 18       	sub	r8,r1

80002ba8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80002ba8:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80002baa:	48 48       	lddpc	r8,80002bb8 <udd_ctrl_endofrequest+0x10>
80002bac:	70 48       	ld.w	r8,r8[0x10]
80002bae:	58 08       	cp.w	r8,0
80002bb0:	c0 20       	breq	80002bb4 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80002bb2:	5d 18       	icall	r8
80002bb4:	d8 02       	popm	pc
80002bb6:	00 00       	add	r0,r0
80002bb8:	00 00       	add	r0,r0
80002bba:	07 90       	ld.ub	r0,r3[0x1]

80002bbc <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80002bbc:	d4 01       	pushm	lr
80002bbe:	16 99       	mov	r9,r11
	if (ptr_job->busy == false) {
80002bc0:	78 08       	ld.w	r8,r12[0x0]
80002bc2:	58 08       	cp.w	r8,0
80002bc4:	c1 84       	brge	80002bf4 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
80002bc6:	30 0b       	mov	r11,0
80002bc8:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
80002bcc:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans) {
80002bce:	78 48       	ld.w	r8,r12[0x10]
80002bd0:	58 08       	cp.w	r8,0
80002bd2:	c1 10       	breq	80002bf4 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80002bd4:	f4 0b 15 02 	lsl	r11,r10,0x2
80002bd8:	e0 3b ff 00 	sub	r11,130816
80002bdc:	76 0b       	ld.w	r11,r11[0x0]
80002bde:	e2 1b 01 00 	andl	r11,0x100,COH
80002be2:	c0 60       	breq	80002bee <udd_ep_finish_job+0x32>
		ep_num |= USB_EP_DIR_IN;
80002be4:	ea 1a ff ff 	orh	r10,0xffff
80002be8:	e8 1a ff 80 	orl	r10,0xff80
80002bec:	5c 5a       	castu.b	r10
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80002bee:	78 2b       	ld.w	r11,r12[0x8]
80002bf0:	12 9c       	mov	r12,r9
80002bf2:	5d 18       	icall	r8
80002bf4:	d8 02       	popm	pc
80002bf6:	d7 03       	nop

80002bf8 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80002bf8:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
80002bfa:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80002bfe:	f4 cc 00 01 	sub	r12,r10,1
80002c02:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002c06:	30 1b       	mov	r11,1
80002c08:	48 38       	lddpc	r8,80002c14 <udd_ep_abort_job+0x1c>
80002c0a:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80002c0e:	f0 1f 00 03 	mcall	80002c18 <udd_ep_abort_job+0x20>
}
80002c12:	d8 02       	popm	pc
80002c14:	00 00       	add	r0,r0
80002c16:	01 d4       	ld.ub	r4,r0[0x5]
80002c18:	80 00       	ld.sh	r0,r0[0x0]
80002c1a:	2b bc       	sub	r12,-69

80002c1c <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
80002c1c:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002c1e:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
80002c22:	f2 c8 00 01 	sub	r8,r9,1
80002c26:	30 0a       	mov	r10,0
80002c28:	ea 1a 02 00 	orh	r10,0x200
80002c2c:	f4 08 09 4a 	lsl	r10,r10,r8
80002c30:	fe 68 00 00 	mov	r8,-131072
80002c34:	91 5a       	st.w	r8[0x14],r10
	udd_endpoint_dma_set_control(index, 0);
80002c36:	f2 0a 15 04 	lsl	r10,r9,0x4
80002c3a:	e0 3a fd 00 	sub	r10,130304
80002c3e:	30 0b       	mov	r11,0
80002c40:	95 2b       	st.w	r10[0x8],r11
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80002c42:	e0 6a 10 00 	mov	r10,4096
80002c46:	f4 09 09 4a 	lsl	r10,r10,r9
80002c4a:	91 5a       	st.w	r8[0x14],r10
	while (udd_nb_busy_bank(index)) {
80002c4c:	a3 69       	lsl	r9,0x2
80002c4e:	fe 68 01 30 	mov	r8,-130768
80002c52:	f2 08 00 0a 	add	r10,r9,r8
		udd_kill_last_in_bank(index);
80002c56:	fe 68 01 f0 	mov	r8,-130576
80002c5a:	f2 08 00 0e 	add	lr,r9,r8
80002c5e:	e0 6b 20 00 	mov	r11,8192
		while(Is_udd_killing_last_in_bank(index));
80002c62:	e0 39 fe 40 	sub	r9,130624
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80002c66:	c0 68       	rjmp	80002c72 <udd_ep_abort+0x56>
		udd_kill_last_in_bank(index);
80002c68:	9d 0b       	st.w	lr[0x0],r11
		while(Is_udd_killing_last_in_bank(index));
80002c6a:	72 08       	ld.w	r8,r9[0x0]
80002c6c:	e2 18 20 00 	andl	r8,0x2000,COH
80002c70:	cf d1       	brne	80002c6a <udd_ep_abort+0x4e>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80002c72:	74 08       	ld.w	r8,r10[0x0]
80002c74:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80002c78:	cf 81       	brne	80002c68 <udd_ep_abort+0x4c>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
80002c7a:	f0 1f 00 02 	mcall	80002c80 <udd_ep_abort+0x64>
}
80002c7e:	d8 02       	popm	pc
80002c80:	80 00       	ld.sh	r0,r0[0x0]
80002c82:	2b f8       	sub	r8,-65

80002c84 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002c84:	eb cd 40 80 	pushm	r7,lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
80002c88:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80002c8c:	30 38       	mov	r8,3
80002c8e:	f0 07 18 00 	cp.b	r7,r8
80002c92:	e0 8b 00 1f 	brhi	80002cd0 <udd_ep_free+0x4c>
		return;
	}
	udd_disable_endpoint(index);
80002c96:	fe 68 00 00 	mov	r8,-131072
80002c9a:	70 7a       	ld.w	r10,r8[0x1c]
80002c9c:	30 19       	mov	r9,1
80002c9e:	f2 07 09 49 	lsl	r9,r9,r7
80002ca2:	5c d9       	com	r9
80002ca4:	14 69       	and	r9,r10
80002ca6:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80002ca8:	ee 08 15 02 	lsl	r8,r7,0x2
80002cac:	e0 38 ff 00 	sub	r8,130816
80002cb0:	70 09       	ld.w	r9,r8[0x0]
80002cb2:	a1 d9       	cbr	r9,0x1
80002cb4:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80002cb6:	f0 1f 00 08 	mcall	80002cd4 <udd_ep_free+0x50>
	udd_ep_job[index - 1].stall_requested = false;
80002cba:	20 17       	sub	r7,1
80002cbc:	ee 07 00 27 	add	r7,r7,r7<<0x2
80002cc0:	48 68       	lddpc	r8,80002cd8 <udd_ep_free+0x54>
80002cc2:	f0 07 00 27 	add	r7,r8,r7<<0x2
80002cc6:	6e 08       	ld.w	r8,r7[0x0]
80002cc8:	30 09       	mov	r9,0
80002cca:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
80002cce:	8f 08       	st.w	r7[0x0],r8
80002cd0:	e3 cd 80 80 	ldm	sp++,r7,pc
80002cd4:	80 00       	ld.sh	r0,r0[0x0]
80002cd6:	2b f8       	sub	r8,-65
80002cd8:	00 00       	add	r0,r0
80002cda:	01 d4       	ld.ub	r4,r0[0x5]

80002cdc <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80002cdc:	eb cd 40 c0 	pushm	r6-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002ce0:	18 99       	mov	r9,r12
80002ce2:	f8 c8 00 01 	sub	r8,r12,1
80002ce6:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002cea:	4d 1a       	lddpc	r10,80002e2c <udd_ep_trans_done+0x150>
80002cec:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (!ptr_job->busy) {
80002cf0:	70 0a       	ld.w	r10,r8[0x0]
80002cf2:	58 0a       	cp.w	r10,0
80002cf4:	e0 84 00 9a 	brge	80002e28 <udd_ep_trans_done+0x14c>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80002cf8:	70 3a       	ld.w	r10,r8[0xc]
80002cfa:	70 2b       	ld.w	r11,r8[0x8]
80002cfc:	16 3a       	cp.w	r10,r11
80002cfe:	c6 20       	breq	80002dc2 <udd_ep_trans_done+0xe6>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80002d00:	f6 0a 01 0a 	sub	r10,r11,r10

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80002d04:	e0 5a 00 00 	cp.w	r10,65536
80002d08:	e0 88 00 06 	brls	80002d14 <udd_ep_trans_done+0x38>
80002d0c:	e0 7a 00 00 	mov	r10,65536
80002d10:	30 0e       	mov	lr,0
80002d12:	c0 38       	rjmp	80002d18 <udd_ep_trans_done+0x3c>
			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80002d14:	f4 0e 15 10 	lsl	lr,r10,0x10
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80002d18:	f2 0b 15 02 	lsl	r11,r9,0x2
80002d1c:	e0 3b ff 00 	sub	r11,130816
80002d20:	76 07       	ld.w	r7,r11[0x0]
80002d22:	e2 17 01 00 	andl	r7,0x100,COH
80002d26:	c1 20       	breq	80002d4a <udd_ep_trans_done+0x6e>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80002d28:	76 0b       	ld.w	r11,r11[0x0]
80002d2a:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80002d2e:	30 87       	mov	r7,8
80002d30:	ee 0b 09 4b 	lsl	r11,r7,r11
80002d34:	20 1b       	sub	r11,1
80002d36:	f5 eb 00 0b 	and	r11,r10,r11
80002d3a:	c1 80       	breq	80002d6a <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80002d3c:	0e 4e       	or	lr,r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80002d3e:	70 0b       	ld.w	r11,r8[0x0]
80002d40:	30 07       	mov	r7,0
80002d42:	f7 d7 d3 c1 	bfins	r11,r7,0x1e,0x1
80002d46:	91 0b       	st.w	r8[0x0],r11
80002d48:	c1 18       	rjmp	80002d6a <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80002d4a:	76 07       	ld.w	r7,r11[0x0]
80002d4c:	ef d7 c1 62 	bfextu	r7,r7,0xb,0x2
80002d50:	58 17       	cp.w	r7,1
80002d52:	c0 a1       	brne	80002d66 <udd_ep_trans_done+0x8a>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
80002d54:	76 0b       	ld.w	r11,r11[0x0]
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80002d56:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80002d5a:	30 87       	mov	r7,8
80002d5c:	ee 0b 09 4b 	lsl	r11,r7,r11
80002d60:	16 3a       	cp.w	r10,r11
80002d62:	e0 8b 00 04 	brhi	80002d6a <udd_ep_trans_done+0x8e>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80002d66:	e8 1e 00 14 	orl	lr,0x14
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80002d6a:	f2 0b 15 04 	lsl	r11,r9,0x4
80002d6e:	e0 3b fd 00 	sub	r11,130304
80002d72:	70 16       	ld.w	r6,r8[0x4]
80002d74:	70 37       	ld.w	r7,r8[0xc]
80002d76:	ec 07 00 07 	add	r7,r6,r7
80002d7a:	97 17       	st.w	r11[0x4],r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002d7c:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80002d80:	d3 03       	ssrf	0x10
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
80002d82:	76 37       	ld.w	r7,r11[0xc]
80002d84:	e2 17 00 10 	andl	r7,0x10,COH
80002d88:	c1 71       	brne	80002db6 <udd_ep_trans_done+0xda>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80002d8a:	e8 1e 00 21 	orl	lr,0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80002d8e:	97 2e       	st.w	r11[0x8],lr
			ptr_job->nb_trans += next_trans;
80002d90:	70 39       	ld.w	r9,r8[0xc]
80002d92:	f2 0a 00 0a 	add	r10,r9,r10
80002d96:	91 3a       	st.w	r8[0xc],r10
			udd_enable_endpoint_dma_interrupt(ep);
80002d98:	20 1c       	sub	r12,1
80002d9a:	30 08       	mov	r8,0
80002d9c:	ea 18 02 00 	orh	r8,0x200
80002da0:	f0 0c 09 4c 	lsl	r12,r8,r12
80002da4:	fe 68 00 00 	mov	r8,-131072
80002da8:	91 6c       	st.w	r8[0x18],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002daa:	e6 16 00 01 	andh	r6,0x1,COH
80002dae:	c0 21       	brne	80002db2 <udd_ep_trans_done+0xd6>
      cpu_irq_enable();
80002db0:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
80002db2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002db6:	e6 16 00 01 	andh	r6,0x1,COH
80002dba:	c0 21       	brne	80002dbe <udd_ep_trans_done+0xe2>
      cpu_irq_enable();
80002dbc:	d5 03       	csrf	0x10
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80002dbe:	70 3a       	ld.w	r10,r8[0xc]
80002dc0:	91 2a       	st.w	r8[0x8],r10
	}
	if (Is_udd_endpoint_in(ep)) {
80002dc2:	a3 69       	lsl	r9,0x2
80002dc4:	fe 6b 01 00 	mov	r11,-130816
80002dc8:	f2 0b 00 0a 	add	r10,r9,r11
80002dcc:	74 0a       	ld.w	r10,r10[0x0]
80002dce:	e2 1a 01 00 	andl	r10,0x100,COH
80002dd2:	c2 60       	breq	80002e1e <udd_ep_trans_done+0x142>
		if (ptr_job->b_shortpacket) {
80002dd4:	70 0a       	ld.w	r10,r8[0x0]
80002dd6:	e6 1a 40 00 	andh	r10,0x4000,COH
80002dda:	c2 20       	breq	80002e1e <udd_ep_trans_done+0x142>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80002ddc:	fe 6a 01 60 	mov	r10,-130720
80002de0:	f2 0a 00 08 	add	r8,r9,r10
80002de4:	30 1a       	mov	r10,1
80002de6:	91 0a       	st.w	r8[0x0],r10
			if (Is_udd_write_enabled(ep)) {
80002de8:	fe 6b 01 30 	mov	r11,-130768
80002dec:	f2 0b 00 08 	add	r8,r9,r11
80002df0:	70 08       	ld.w	r8,r8[0x0]
80002df2:	e6 18 00 01 	andh	r8,0x1,COH
80002df6:	c0 70       	breq	80002e04 <udd_ep_trans_done+0x128>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
80002df8:	fe 6a 01 90 	mov	r10,-130672
80002dfc:	f2 0a 00 08 	add	r8,r9,r10
80002e00:	30 1a       	mov	r10,1
80002e02:	91 0a       	st.w	r8[0x0],r10
			}
			udd_enable_in_send_interrupt(ep);
80002e04:	e0 39 fe 10 	sub	r9,130576
80002e08:	30 18       	mov	r8,1
80002e0a:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint_interrupt(ep);
80002e0c:	e0 68 10 00 	mov	r8,4096
80002e10:	f0 0c 09 4c 	lsl	r12,r8,r12
80002e14:	fe 68 00 00 	mov	r8,-131072
80002e18:	91 6c       	st.w	r8[0x18],r12
			return;
80002e1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80002e1e:	18 9a       	mov	r10,r12
80002e20:	30 0b       	mov	r11,0
80002e22:	10 9c       	mov	r12,r8
80002e24:	f0 1f 00 03 	mcall	80002e30 <udd_ep_trans_done+0x154>
80002e28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e2c:	00 00       	add	r0,r0
80002e2e:	01 d4       	ld.ub	r4,r0[0x5]
80002e30:	80 00       	ld.sh	r0,r0[0x0]
80002e32:	2b bc       	sub	r12,-69

80002e34 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80002e34:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80002e38:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80002e3c:	30 3e       	mov	lr,3
80002e3e:	fc 0c 18 00 	cp.b	r12,lr
80002e42:	e0 8b 00 40 	brhi	80002ec2 <udd_ep_run+0x8e>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002e46:	fe 6e 00 00 	mov	lr,-131072
80002e4a:	7c 77       	ld.w	r7,lr[0x1c]
80002e4c:	18 96       	mov	r6,r12
80002e4e:	30 1e       	mov	lr,1
80002e50:	fc 0c 09 4e 	lsl	lr,lr,r12
80002e54:	0e 6e       	and	lr,r7
80002e56:	c3 60       	breq	80002ec2 <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80002e58:	f8 0e 15 02 	lsl	lr,r12,0x2
80002e5c:	e0 3e fe 40 	sub	lr,130624
80002e60:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80002e62:	e6 1e 00 08 	andh	lr,0x8,COH
80002e66:	c2 e1       	brne	80002ec2 <udd_ep_run+0x8e>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80002e68:	20 1c       	sub	r12,1
80002e6a:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002e6e:	49 77       	lddpc	r7,80002ec8 <udd_ep_run+0x94>
80002e70:	ee 0c 00 2e 	add	lr,r7,r12<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80002e74:	7c 0c       	ld.w	r12,lr[0x0]
80002e76:	e6 1c 20 00 	andh	r12,0x2000,COH
80002e7a:	c2 41       	brne	80002ec2 <udd_ep_run+0x8e>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002e7c:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
80002e80:	d3 03       	ssrf	0x10
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002e82:	7c 07       	ld.w	r7,lr[0x0]
80002e84:	58 07       	cp.w	r7,0
80002e86:	c0 74       	brge	80002e94 <udd_ep_run+0x60>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e88:	e6 1c 00 01 	andh	r12,0x1,COH
80002e8c:	c0 21       	brne	80002e90 <udd_ep_run+0x5c>
      cpu_irq_enable();
80002e8e:	d5 03       	csrf	0x10
   }

	barrier();
80002e90:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80002e94:	7c 07       	ld.w	r7,lr[0x0]
80002e96:	30 15       	mov	r5,1
80002e98:	ef d5 d3 e1 	bfins	r7,r5,0x1f,0x1
80002e9c:	9d 07       	st.w	lr[0x0],r7
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002e9e:	e6 1c 00 01 	andh	r12,0x1,COH
80002ea2:	c0 21       	brne	80002ea6 <udd_ep_run+0x72>
      cpu_irq_enable();
80002ea4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80002ea6:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
80002ea8:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
80002eaa:	30 09       	mov	r9,0
80002eac:	9d 39       	st.w	lr[0xc],r9
	ptr_job->call_trans = callback;
80002eae:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
80002eb0:	7c 08       	ld.w	r8,lr[0x0]
80002eb2:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80002eb6:	9d 08       	st.w	lr[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80002eb8:	0c 9c       	mov	r12,r6
80002eba:	f0 1f 00 05 	mcall	80002ecc <udd_ep_run+0x98>
80002ebe:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80002ec2:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002ec6:	00 00       	add	r0,r0
80002ec8:	00 00       	add	r0,r0
80002eca:	01 d4       	ld.ub	r4,r0[0x5]
80002ecc:	80 00       	ld.sh	r0,r0[0x0]
80002ece:	2c dc       	sub	r12,-51

80002ed0 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002ed0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ed4:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80002ed8:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002eda:	30 1c       	mov	r12,1
80002edc:	f0 1f 00 19 	mcall	80002f40 <udd_attach+0x70>
	otg_unfreeze_clock();
80002ee0:	fe 68 08 00 	mov	r8,-129024
80002ee4:	70 09       	ld.w	r9,r8[0x0]
80002ee6:	af c9       	cbr	r9,0xe
80002ee8:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
80002eea:	fe 68 08 04 	mov	r8,-129020
80002eee:	70 09       	ld.w	r9,r8[0x0]
80002ef0:	e2 19 40 00 	andl	r9,0x4000,COH
80002ef4:	cf d0       	breq	80002eee <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
80002ef6:	fe 68 00 00 	mov	r8,-131072
80002efa:	70 09       	ld.w	r9,r8[0x0]
80002efc:	a9 c9       	cbr	r9,0x8
80002efe:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80002f00:	fe 68 00 18 	mov	r8,-131048
80002f04:	30 8c       	mov	r12,8
80002f06:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
80002f08:	30 1a       	mov	r10,1
80002f0a:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
80002f0c:	31 09       	mov	r9,16
80002f0e:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80002f10:	30 4b       	mov	r11,4
80002f12:	91 0b       	st.w	r8[0x0],r11
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80002f14:	fe 68 00 08 	mov	r8,-131064
80002f18:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
80002f1a:	91 0b       	st.w	r8[0x0],r11
	udd_ack_msof();
80002f1c:	30 2b       	mov	r11,2
80002f1e:	91 0b       	st.w	r8[0x0],r11
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80002f20:	fe 6b 00 0c 	mov	r11,-131060
80002f24:	97 0a       	st.w	r11[0x0],r10
#endif
	udd_ack_wake_up();
80002f26:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80002f28:	fe 68 08 00 	mov	r8,-129024
80002f2c:	70 09       	ld.w	r9,r8[0x0]
80002f2e:	af a9       	sbr	r9,0xe
80002f30:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f32:	e6 17 00 01 	andh	r7,0x1,COH
80002f36:	c0 21       	brne	80002f3a <udd_attach+0x6a>
      cpu_irq_enable();
80002f38:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002f3a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f3e:	00 00       	add	r0,r0
80002f40:	80 00       	ld.sh	r0,r0[0x0]
80002f42:	29 84       	sub	r4,-104

80002f44 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80002f44:	30 39       	mov	r9,3
80002f46:	48 b8       	lddpc	r8,80002f70 <udd_ctrl_send_zlp_in+0x2c>
80002f48:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f4a:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80002f4e:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80002f50:	fe 6a 01 60 	mov	r10,-130720
80002f54:	30 19       	mov	r9,1
80002f56:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80002f58:	fe 68 01 f0 	mov	r8,-130576
80002f5c:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80002f5e:	30 89       	mov	r9,8
80002f60:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
80002f62:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f64:	16 98       	mov	r8,r11
80002f66:	e6 18 00 01 	andh	r8,0x1,COH
80002f6a:	c0 21       	brne	80002f6e <udd_ctrl_send_zlp_in+0x2a>
      cpu_irq_enable();
80002f6c:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002f6e:	5e fc       	retal	r12
80002f70:	00 00       	add	r0,r0
80002f72:	02 18       	sub	r8,r1

80002f74 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f74:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002f78:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002f7a:	30 1a       	mov	r10,1
80002f7c:	fe 69 02 20 	mov	r9,-130528
80002f80:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f82:	e6 18 00 01 	andh	r8,0x1,COH
80002f86:	c0 21       	brne	80002f8a <udd_ctrl_init+0x16>
      cpu_irq_enable();
80002f88:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002f8a:	30 29       	mov	r9,2
80002f8c:	fe 68 01 60 	mov	r8,-130720
80002f90:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002f92:	48 59       	lddpc	r9,80002fa4 <udd_ctrl_init+0x30>
80002f94:	30 08       	mov	r8,0
80002f96:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002f98:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002f9a:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80002f9c:	48 39       	lddpc	r9,80002fa8 <udd_ctrl_init+0x34>
80002f9e:	93 08       	st.w	r9[0x0],r8
}
80002fa0:	5e fc       	retal	r12
80002fa2:	00 00       	add	r0,r0
80002fa4:	00 00       	add	r0,r0
80002fa6:	07 90       	ld.ub	r0,r3[0x1]
80002fa8:	00 00       	add	r0,r0
80002faa:	02 18       	sub	r8,r1

80002fac <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80002fac:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002fb0:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80002fb4:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80002fb6:	30 1a       	mov	r10,1
80002fb8:	fe 69 02 20 	mov	r9,-130528
80002fbc:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002fbe:	e6 18 00 01 	andh	r8,0x1,COH
80002fc2:	c0 21       	brne	80002fc6 <udd_ctrl_in_sent+0x1a>
      cpu_irq_enable();
80002fc4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002fc6:	4c 38       	lddpc	r8,800030d0 <udd_ctrl_in_sent+0x124>
80002fc8:	70 08       	ld.w	r8,r8[0x0]
80002fca:	58 38       	cp.w	r8,3
80002fcc:	c0 71       	brne	80002fda <udd_ctrl_in_sent+0x2e>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80002fce:	f0 1f 00 42 	mcall	800030d4 <udd_ctrl_in_sent+0x128>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002fd2:	f0 1f 00 42 	mcall	800030d8 <udd_ctrl_in_sent+0x12c>
		return;
80002fd6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002fda:	4c 18       	lddpc	r8,800030dc <udd_ctrl_in_sent+0x130>
80002fdc:	90 08       	ld.sh	r8,r8[0x0]
80002fde:	4c 19       	lddpc	r9,800030e0 <udd_ctrl_in_sent+0x134>
80002fe0:	92 67       	ld.sh	r7,r9[0xc]
80002fe2:	10 17       	sub	r7,r8
80002fe4:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002fe6:	c3 01       	brne	80003046 <udd_ctrl_in_sent+0x9a>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002fe8:	4b f9       	lddpc	r9,800030e4 <udd_ctrl_in_sent+0x138>
80002fea:	92 0a       	ld.sh	r10,r9[0x0]
80002fec:	f4 08 00 08 	add	r8,r10,r8
80002ff0:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80002ff2:	4b c9       	lddpc	r9,800030e0 <udd_ctrl_in_sent+0x134>
80002ff4:	92 39       	ld.sh	r9,r9[0x6]
80002ff6:	f0 09 19 00 	cp.h	r9,r8
80002ffa:	c0 70       	breq	80003008 <udd_ctrl_in_sent+0x5c>
80002ffc:	4b b8       	lddpc	r8,800030e8 <udd_ctrl_in_sent+0x13c>
80002ffe:	11 89       	ld.ub	r9,r8[0x0]
80003000:	30 08       	mov	r8,0
80003002:	f0 09 18 00 	cp.b	r9,r8
80003006:	c1 50       	breq	80003030 <udd_ctrl_in_sent+0x84>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003008:	30 49       	mov	r9,4
8000300a:	4b 28       	lddpc	r8,800030d0 <udd_ctrl_in_sent+0x124>
8000300c:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000300e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003012:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80003014:	31 08       	mov	r8,16
80003016:	fe 6a 01 60 	mov	r10,-130720
8000301a:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000301c:	fe 6a 01 f0 	mov	r10,-130576
80003020:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003022:	12 98       	mov	r8,r9
80003024:	e6 18 00 01 	andh	r8,0x1,COH
80003028:	c0 21       	brne	8000302c <udd_ctrl_in_sent+0x80>
      cpu_irq_enable();
8000302a:	d5 03       	csrf	0x10
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
8000302c:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80003030:	4a c8       	lddpc	r8,800030e0 <udd_ctrl_in_sent+0x134>
80003032:	70 5c       	ld.w	r12,r8[0x14]
80003034:	58 0c       	cp.w	r12,0
80003036:	c1 20       	breq	8000305a <udd_ctrl_in_sent+0xae>
80003038:	5d 1c       	icall	r12
8000303a:	c1 00       	breq	8000305a <udd_ctrl_in_sent+0xae>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
8000303c:	30 09       	mov	r9,0
8000303e:	4a 88       	lddpc	r8,800030dc <udd_ctrl_in_sent+0x130>
80003040:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80003042:	4a 88       	lddpc	r8,800030e0 <udd_ctrl_in_sent+0x134>
80003044:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80003046:	33 f8       	mov	r8,63
80003048:	f0 07 19 00 	cp.h	r7,r8
8000304c:	e0 88 00 07 	brls	8000305a <udd_ctrl_in_sent+0xae>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80003050:	30 09       	mov	r9,0
80003052:	4a 68       	lddpc	r8,800030e8 <udd_ctrl_in_sent+0x13c>
80003054:	b0 89       	st.b	r8[0x0],r9
80003056:	34 07       	mov	r7,64
80003058:	c0 48       	rjmp	80003060 <udd_ctrl_in_sent+0xb4>
	} else {
		b_shortpacket = true;
8000305a:	30 19       	mov	r9,1
8000305c:	4a 38       	lddpc	r8,800030e8 <udd_ctrl_in_sent+0x13c>
8000305e:	b0 89       	st.b	r8[0x0],r9
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003060:	4a 08       	lddpc	r8,800030e0 <udd_ctrl_in_sent+0x134>
80003062:	70 2a       	ld.w	r10,r8[0x8]
80003064:	49 e8       	lddpc	r8,800030dc <udd_ctrl_in_sent+0x130>
80003066:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003068:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000306c:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000306e:	fe 68 01 30 	mov	r8,-130768
80003072:	70 08       	ld.w	r8,r8[0x0]
80003074:	e2 18 00 02 	andl	r8,0x2,COH
80003078:	c0 41       	brne	80003080 <udd_ctrl_in_sent+0xd4>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000307a:	58 07       	cp.w	r7,0
8000307c:	c0 b1       	brne	80003092 <udd_ctrl_in_sent+0xe6>
8000307e:	c1 78       	rjmp	800030ac <udd_ctrl_in_sent+0x100>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003080:	e6 1b 00 01 	andh	r11,0x1,COH
80003084:	c0 21       	brne	80003088 <udd_ctrl_in_sent+0xdc>
      cpu_irq_enable();
80003086:	d5 03       	csrf	0x10
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003088:	30 49       	mov	r9,4
8000308a:	49 28       	lddpc	r8,800030d0 <udd_ctrl_in_sent+0x124>
8000308c:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000308e:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003092:	5c 79       	castu.h	r9
80003094:	f4 09 00 09 	add	r9,r10,r9
80003098:	30 08       	mov	r8,0
8000309a:	ea 18 d0 00 	orh	r8,0xd000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
8000309e:	13 3a       	ld.ub	r10,r9++
800030a0:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800030a2:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800030a6:	ee 0a 19 00 	cp.h	r10,r7
800030aa:	cf a3       	brcs	8000309e <udd_ctrl_in_sent+0xf2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800030ac:	48 c8       	lddpc	r8,800030dc <udd_ctrl_in_sent+0x130>
800030ae:	90 09       	ld.sh	r9,r8[0x0]
800030b0:	f2 07 00 07 	add	r7,r9,r7
800030b4:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800030b6:	30 18       	mov	r8,1
800030b8:	fe 69 01 60 	mov	r9,-130720
800030bc:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
800030be:	fe 69 01 f0 	mov	r9,-130576
800030c2:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800030c4:	e6 1b 00 01 	andh	r11,0x1,COH
800030c8:	c0 21       	brne	800030cc <udd_ctrl_in_sent+0x120>
      cpu_irq_enable();
800030ca:	d5 03       	csrf	0x10
   }

	barrier();
800030cc:	e3 cd 80 80 	ldm	sp++,r7,pc
800030d0:	00 00       	add	r0,r0
800030d2:	02 18       	sub	r8,r1
800030d4:	80 00       	ld.sh	r0,r0[0x0]
800030d6:	2b a8       	sub	r8,-70
800030d8:	80 00       	ld.sh	r0,r0[0x0]
800030da:	2f 74       	sub	r4,-9
800030dc:	00 00       	add	r0,r0
800030de:	02 12       	sub	r2,r1
800030e0:	00 00       	add	r0,r0
800030e2:	07 90       	ld.ub	r0,r3[0x1]
800030e4:	00 00       	add	r0,r0
800030e6:	01 d0       	ld.ub	r0,r0[0x5]
800030e8:	00 00       	add	r0,r0
800030ea:	02 14       	sub	r4,r1

800030ec <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800030ec:	d4 31       	pushm	r0-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
800030ee:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
800030f2:	30 38       	mov	r8,3
800030f4:	f0 07 18 00 	cp.b	r7,r8
800030f8:	e0 8b 00 ae 	brhi	80003254 <udd_ep_alloc+0x168>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
800030fc:	fe 68 00 00 	mov	r8,-131072
80003100:	70 78       	ld.w	r8,r8[0x1c]
80003102:	30 15       	mov	r5,1
80003104:	ea 07 09 45 	lsl	r5,r5,r7
80003108:	eb e8 00 08 	and	r8,r5,r8
8000310c:	e0 81 00 a4 	brne	80003254 <udd_ep_alloc+0x168>
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80003110:	f1 db c0 02 	bfextu	r8,r11,0x0,0x2
80003114:	58 18       	cp.w	r8,1
80003116:	e0 85 00 9f 	brlt	80003254 <udd_ep_alloc+0x168>
8000311a:	58 28       	cp.w	r8,2
8000311c:	e0 8a 00 07 	brle	8000312a <udd_ep_alloc+0x3e>
80003120:	58 38       	cp.w	r8,3
80003122:	e0 81 00 99 	brne	80003254 <udd_ep_alloc+0x168>
80003126:	30 09       	mov	r9,0
80003128:	c0 28       	rjmp	8000312c <udd_ep_alloc+0x40>
8000312a:	30 19       	mov	r9,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
8000312c:	ee 08 15 02 	lsl	r8,r7,0x2
80003130:	e0 38 ff 00 	sub	r8,130816
80003134:	70 0e       	ld.w	lr,r8[0x0]
80003136:	5c 7a       	castu.h	r10
80003138:	30 86       	mov	r6,8
8000313a:	f4 06 0c 4a 	max	r10,r10,r6
8000313e:	e0 66 04 00 	mov	r6,1024
80003142:	f4 06 0d 4a 	min	r10,r10,r6
80003146:	a1 7a       	lsl	r10,0x1
80003148:	20 1a       	sub	r10,1
8000314a:	f4 0a 12 00 	clz	r10,r10
8000314e:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80003152:	ab 7b       	lsl	r11,0xb
80003154:	e2 1b 18 00 	andl	r11,0x1800,COH
80003158:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
8000315c:	f4 0c 11 1c 	rsub	r12,r10,28
80003160:	f7 ec 10 4c 	or	r12,r11,r12<<0x4
80003164:	f9 e9 10 29 	or	r9,r12,r9<<0x2
80003168:	e2 19 19 7c 	andl	r9,0x197c,COH
8000316c:	1c 9a       	mov	r10,lr
8000316e:	e0 1a e6 83 	andl	r10,0xe683
80003172:	14 49       	or	r9,r10
80003174:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80003176:	5c 85       	casts.h	r5

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80003178:	30 28       	mov	r8,2
8000317a:	f0 07 18 00 	cp.b	r7,r8
8000317e:	e0 8b 00 1d 	brhi	800031b8 <udd_ep_alloc+0xcc>
80003182:	fe 69 01 0c 	mov	r9,-130804
80003186:	30 38       	mov	r8,3
		if (Is_udd_endpoint_enabled(i)) {
80003188:	fe 6b 00 00 	mov	r11,-131072
8000318c:	30 1e       	mov	lr,1
8000318e:	76 7c       	ld.w	r12,r11[0x1c]
80003190:	fc 08 09 4a 	lsl	r10,lr,r8
80003194:	f5 ec 00 0c 	and	r12,r10,r12
80003198:	c0 b0       	breq	800031ae <udd_ep_alloc+0xc2>
			ep_allocated |= 1 << i;
8000319a:	f5 e5 10 05 	or	r5,r10,r5
8000319e:	5c 85       	casts.h	r5
			udd_disable_endpoint(i);
800031a0:	76 7c       	ld.w	r12,r11[0x1c]
800031a2:	5c da       	com	r10
800031a4:	18 6a       	and	r10,r12
800031a6:	97 7a       	st.w	r11[0x1c],r10
			udd_unallocate_memory(i);
800031a8:	72 0a       	ld.w	r10,r9[0x0]
800031aa:	a1 da       	cbr	r10,0x1
800031ac:	93 0a       	st.w	r9[0x0],r10
800031ae:	20 18       	sub	r8,1
800031b0:	20 49       	sub	r9,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800031b2:	f0 07 18 00 	cp.b	r7,r8
800031b6:	ce c3       	brcs	8000318e <udd_ep_alloc+0xa2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
800031b8:	5c 75       	castu.h	r5
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
800031ba:	4a 83       	lddpc	r3,80003258 <udd_ep_alloc+0x16c>
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;
800031bc:	30 02       	mov	r2,0

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
800031be:	fe 64 00 00 	mov	r4,-131072
800031c2:	30 11       	mov	r1,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800031c4:	30 36       	mov	r6,3
		if (ep_allocated & (1 << i)) {
800031c6:	0e 9c       	mov	r12,r7
800031c8:	ea 07 08 48 	asr	r8,r5,r7
800031cc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031d0:	c3 b0       	breq	80003246 <udd_ep_alloc+0x15a>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
800031d2:	ee ce 00 01 	sub	lr,r7,1
800031d6:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
800031da:	e6 0e 00 2e 	add	lr,r3,lr<<0x2
			bool b_restart = ptr_job->busy;
800031de:	7c 0a       	ld.w	r10,lr[0x0]
			ptr_job->busy = false;
800031e0:	14 98       	mov	r8,r10
800031e2:	f1 d2 d3 e1 	bfins	r8,r2,0x1f,0x1
800031e6:	9d 08       	st.w	lr[0x0],r8

			udd_allocate_memory(i);
800031e8:	ee 08 15 02 	lsl	r8,r7,0x2
800031ec:	fe 6b 01 00 	mov	r11,-130816
800031f0:	f0 0b 00 09 	add	r9,r8,r11
800031f4:	72 0b       	ld.w	r11,r9[0x0]
800031f6:	a1 bb       	sbr	r11,0x1
800031f8:	93 0b       	st.w	r9[0x0],r11
			udd_enable_endpoint(i);
800031fa:	68 7b       	ld.w	r11,r4[0x1c]
800031fc:	e2 07 09 40 	lsl	r0,r1,r7
80003200:	e1 eb 10 0b 	or	r11,r0,r11
80003204:	89 7b       	st.w	r4[0x1c],r11
			if (!Is_udd_endpoint_configured(i)) {
80003206:	e0 38 fe d0 	sub	r8,130768
8000320a:	70 08       	ld.w	r8,r8[0x0]
8000320c:	e6 18 00 04 	andh	r8,0x4,COH
80003210:	c0 e1       	brne	8000322c <udd_ep_alloc+0x140>
				if (NULL == ptr_job->call_trans) {
80003212:	7c 48       	ld.w	r8,lr[0x10]
80003214:	58 08       	cp.w	r8,0
80003216:	c1 f0       	breq	80003254 <udd_ep_alloc+0x168>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
80003218:	72 09       	ld.w	r9,r9[0x0]
8000321a:	e2 19 01 00 	andl	r9,0x100,COH
8000321e:	c0 20       	breq	80003222 <udd_ep_alloc+0x136>
					i |= USB_EP_DIR_IN;
80003220:	a7 b7       	sbr	r7,0x7
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80003222:	0e 9a       	mov	r10,r7
80003224:	7c 2b       	ld.w	r11,lr[0x8]
80003226:	30 1c       	mov	r12,1
80003228:	5d 18       	icall	r8
8000322a:	d8 3a       	popm	r0-r7,pc,r12=0
						ptr_job->buf_size, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
8000322c:	72 08       	ld.w	r8,r9[0x0]
8000322e:	a9 b8       	sbr	r8,0x9
80003230:	93 08       	st.w	r9[0x0],r8
			if (b_restart) {
80003232:	58 0a       	cp.w	r10,0
80003234:	c0 94       	brge	80003246 <udd_ep_alloc+0x15a>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80003236:	7c 0b       	ld.w	r11,lr[0x0]
80003238:	7c 48       	ld.w	r8,lr[0x10]
8000323a:	7c 29       	ld.w	r9,lr[0x8]
8000323c:	7c 1a       	ld.w	r10,lr[0x4]
8000323e:	f7 db c3 c1 	bfextu	r11,r11,0x1e,0x1
80003242:	f0 1f 00 07 	mcall	8000325c <udd_ep_alloc+0x170>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80003246:	2f f7       	sub	r7,-1
80003248:	5c 57       	castu.b	r7
8000324a:	ec 07 18 00 	cp.b	r7,r6
8000324e:	fe 98 ff bc 	brls	800031c6 <udd_ep_alloc+0xda>
80003252:	da 3a       	popm	r0-r7,pc,r12=1
80003254:	d8 3a       	popm	r0-r7,pc,r12=0
80003256:	00 00       	add	r0,r0
80003258:	00 00       	add	r0,r0
8000325a:	01 d4       	ld.ub	r4,r0[0x5]
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	2e 34       	sub	r4,-29

80003260 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80003260:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003264:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80003268:	d3 03       	ssrf	0x10
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
8000326a:	f0 1f 00 2f 	mcall	80003324 <udd_enable+0xc4>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
8000326e:	30 0a       	mov	r10,0
80003270:	e0 6b 02 20 	mov	r11,544
80003274:	4a dc       	lddpc	r12,80003328 <udd_enable+0xc8>
80003276:	f0 1f 00 2e 	mcall	8000332c <udd_enable+0xcc>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
8000327a:	fe 78 0c 00 	mov	r8,-62464
8000327e:	f0 f9 01 44 	ld.w	r9,r8[324]
80003282:	a1 a9       	sbr	r9,0x0
80003284:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80003288:	fe 68 08 00 	mov	r8,-129024
8000328c:	70 09       	ld.w	r9,r8[0x0]
8000328e:	b9 c9       	cbr	r9,0x18
80003290:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80003292:	70 09       	ld.w	r9,r8[0x0]
80003294:	b9 b9       	sbr	r9,0x19
80003296:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80003298:	70 09       	ld.w	r9,r8[0x0]
8000329a:	ad a9       	sbr	r9,0xc
8000329c:	91 09       	st.w	r8[0x0],r9
	otg_enable();
8000329e:	70 09       	ld.w	r9,r8[0x0]
800032a0:	af b9       	sbr	r9,0xf
800032a2:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
800032a4:	70 09       	ld.w	r9,r8[0x0]
800032a6:	af c9       	cbr	r9,0xe
800032a8:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
800032aa:	70 08       	ld.w	r8,r8[0x0]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800032ac:	4a 18       	lddpc	r8,80003330 <udd_enable+0xd0>
800032ae:	70 0a       	ld.w	r10,r8[0x0]
800032b0:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
800032b2:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
800032b6:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
800032ba:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800032bc:	70 5a       	ld.w	r10,r8[0x14]
		udd_ep_job[i].stall_requested = false;
800032be:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
800032c2:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
800032c6:	91 5a       	st.w	r8[0x14],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800032c8:	70 aa       	ld.w	r10,r8[0x28]
		udd_ep_job[i].stall_requested = false;
800032ca:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
800032ce:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
800032d2:	91 aa       	st.w	r8[0x28],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
800032d4:	fe 68 00 00 	mov	r8,-131072
800032d8:	70 09       	ld.w	r9,r8[0x0]
800032da:	ad c9       	cbr	r9,0xc
800032dc:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
800032de:	70 09       	ld.w	r9,r8[0x0]
800032e0:	e8 19 0c 00 	orl	r9,0xc00
800032e4:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
800032e6:	30 29       	mov	r9,2
800032e8:	fe 68 08 08 	mov	r8,-129016
800032ec:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
800032ee:	fe 68 08 04 	mov	r8,-129020
800032f2:	70 08       	ld.w	r8,r8[0x0]
800032f4:	e2 18 08 00 	andl	r8,0x800,COH
800032f8:	c0 40       	breq	80003300 <udd_enable+0xa0>
		otg_raise_vbus_transition();
800032fa:	fe 68 08 0c 	mov	r8,-129012
800032fe:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80003300:	fe 68 08 00 	mov	r8,-129024
80003304:	70 09       	ld.w	r9,r8[0x0]
80003306:	a1 b9       	sbr	r9,0x1
80003308:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000330a:	70 09       	ld.w	r9,r8[0x0]
8000330c:	af a9       	sbr	r9,0xe
8000330e:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80003310:	30 09       	mov	r9,0
80003312:	48 98       	lddpc	r8,80003334 <udd_enable+0xd4>
80003314:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003316:	e6 17 00 01 	andh	r7,0x1,COH
8000331a:	c0 21       	brne	8000331e <udd_enable+0xbe>
      cpu_irq_enable();
8000331c:	d5 03       	csrf	0x10
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
8000331e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003322:	00 00       	add	r0,r0
80003324:	80 00       	ld.sh	r0,r0[0x0]
80003326:	3a 3c       	mov	r12,-93
80003328:	80 00       	ld.sh	r0,r0[0x0]
8000332a:	33 38       	mov	r8,51
8000332c:	80 00       	ld.sh	r0,r0[0x0]
8000332e:	28 78       	sub	r8,-121
80003330:	00 00       	add	r0,r0
80003332:	01 d4       	ld.ub	r4,r0[0x5]
80003334:	00 00       	add	r0,r0
80003336:	02 10       	sub	r0,r1

80003338 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
80003338:	eb cd 40 fe 	pushm	r1-r7,lr
	if (Is_udd_sof()) {
8000333c:	fe 68 00 04 	mov	r8,-131068
80003340:	70 08       	ld.w	r8,r8[0x0]
80003342:	e2 18 00 04 	andl	r8,0x4,COH
80003346:	c1 10       	breq	80003368 <udd_interrupt+0x30>
		udd_ack_sof();
80003348:	30 49       	mov	r9,4
8000334a:	fe 68 00 08 	mov	r8,-131064
8000334e:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
80003350:	fe 68 08 04 	mov	r8,-129020
80003354:	70 08       	ld.w	r8,r8[0x0]
80003356:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8000335a:	c0 31       	brne	80003360 <udd_interrupt+0x28>
			udc_sof_notify();
8000335c:	f0 1f 01 76 	mcall	80003934 <udd_interrupt+0x5fc>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
80003360:	f0 1f 01 76 	mcall	80003938 <udd_interrupt+0x600>
#endif
		goto udd_interrupt_end;
80003364:	e0 8f 02 d6 	bral	80003910 <udd_interrupt+0x5d8>
	}
	if (Is_udd_msof()) {
80003368:	fe 68 00 04 	mov	r8,-131068
8000336c:	70 08       	ld.w	r8,r8[0x0]
8000336e:	e2 18 00 02 	andl	r8,0x2,COH
80003372:	c0 90       	breq	80003384 <udd_interrupt+0x4c>
		udd_ack_msof();
80003374:	30 29       	mov	r9,2
80003376:	fe 68 00 08 	mov	r8,-131064
8000337a:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
8000337c:	f0 1f 01 6e 	mcall	80003934 <udd_interrupt+0x5fc>
		goto udd_interrupt_end;
80003380:	e0 8f 02 c8 	bral	80003910 <udd_interrupt+0x5d8>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80003384:	fe 68 00 00 	mov	r8,-131072
80003388:	70 18       	ld.w	r8,r8[0x4]
8000338a:	e2 18 10 00 	andl	r8,0x1000,COH
8000338e:	e0 80 01 70 	breq	8000366e <udd_interrupt+0x336>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80003392:	fe 68 02 20 	mov	r8,-130528
80003396:	31 09       	mov	r9,16
80003398:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
8000339a:	30 89       	mov	r9,8
8000339c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000339e:	fe 68 01 30 	mov	r8,-130768
800033a2:	70 08       	ld.w	r8,r8[0x0]
800033a4:	e2 18 00 04 	andl	r8,0x4,COH
800033a8:	e0 80 00 83 	breq	800034ae <udd_interrupt+0x176>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800033ac:	fe f8 05 90 	ld.w	r8,pc[1424]
800033b0:	70 08       	ld.w	r8,r8[0x0]
800033b2:	58 08       	cp.w	r8,0
800033b4:	c0 50       	breq	800033be <udd_interrupt+0x86>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
800033b6:	f0 1f 01 63 	mcall	80003940 <udd_interrupt+0x608>

		// Reinitializes control endpoint management
		udd_ctrl_init();
800033ba:	f0 1f 01 63 	mcall	80003944 <udd_interrupt+0x60c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800033be:	fe 68 01 30 	mov	r8,-130768
800033c2:	70 08       	ld.w	r8,r8[0x0]
800033c4:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
800033c8:	58 88       	cp.w	r8,8
800033ca:	c0 90       	breq	800033dc <udd_interrupt+0xa4>
		udd_ctrl_stall_data();
800033cc:	f0 1f 01 5f 	mcall	80003948 <udd_interrupt+0x610>
		udd_ack_setup_received(0);
800033d0:	30 49       	mov	r9,4
800033d2:	fe 68 01 60 	mov	r8,-130720
800033d6:	91 09       	st.w	r8[0x0],r9
800033d8:	e0 8f 02 9c 	bral	80003910 <udd_interrupt+0x5d8>
800033dc:	30 08       	mov	r8,0
800033de:	ea 18 d0 00 	orh	r8,0xd000
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
800033e2:	fe fc 05 6a 	ld.w	r12,pc[1386]
800033e6:	30 0b       	mov	r11,0
800033e8:	ea 1b 30 00 	orh	r11,0x3000
800033ec:	f0 0c 00 09 	add	r9,r8,r12
800033f0:	11 3a       	ld.ub	r10,r8++
800033f2:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
800033f6:	30 8a       	mov	r10,8
800033f8:	ea 1a d0 00 	orh	r10,0xd000
800033fc:	14 38       	cp.w	r8,r10
800033fe:	cf 71       	brne	800033ec <udd_interrupt+0xb4>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80003400:	fe f8 05 4c 	ld.w	r8,pc[1356]
80003404:	90 19       	ld.sh	r9,r8[0x2]
80003406:	5c c9       	swap.bh	r9
80003408:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000340a:	90 29       	ld.sh	r9,r8[0x4]
8000340c:	5c c9       	swap.bh	r9
8000340e:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80003410:	90 39       	ld.sh	r9,r8[0x6]
80003412:	5c c9       	swap.bh	r9
80003414:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80003416:	f0 1f 01 4f 	mcall	80003950 <udd_interrupt+0x618>
8000341a:	c0 91       	brne	8000342c <udd_interrupt+0xf4>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
8000341c:	f0 1f 01 4b 	mcall	80003948 <udd_interrupt+0x610>
		udd_ack_setup_received(0);
80003420:	30 49       	mov	r9,4
80003422:	fe 68 01 60 	mov	r8,-130720
80003426:	91 09       	st.w	r8[0x0],r9
80003428:	e0 8f 02 74 	bral	80003910 <udd_interrupt+0x5d8>
		return;
	}
	udd_ack_setup_received(0);
8000342c:	30 49       	mov	r9,4
8000342e:	fe 68 01 60 	mov	r8,-130720
80003432:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80003434:	fe f8 05 18 	ld.w	r8,pc[1304]
80003438:	11 89       	ld.ub	r9,r8[0x0]
8000343a:	30 08       	mov	r8,0
8000343c:	f0 09 18 00 	cp.b	r9,r8
80003440:	c1 04       	brge	80003460 <udd_interrupt+0x128>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003442:	30 08       	mov	r8,0
80003444:	fe f9 05 10 	ld.w	r9,pc[1296]
80003448:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000344a:	fe f9 05 0e 	ld.w	r9,pc[1294]
8000344e:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80003450:	30 29       	mov	r9,2
80003452:	fe f8 04 ea 	ld.w	r8,pc[1258]
80003456:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80003458:	f0 1f 01 41 	mcall	8000395c <udd_interrupt+0x624>
8000345c:	e0 8f 02 5a 	bral	80003910 <udd_interrupt+0x5d8>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80003460:	fe f8 04 ec 	ld.w	r8,pc[1260]
80003464:	90 39       	ld.sh	r9,r8[0x6]
80003466:	30 08       	mov	r8,0
80003468:	f0 09 19 00 	cp.h	r9,r8
8000346c:	c0 51       	brne	80003476 <udd_interrupt+0x13e>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
8000346e:	f0 1f 01 3d 	mcall	80003960 <udd_interrupt+0x628>
80003472:	e0 8f 02 4f 	bral	80003910 <udd_interrupt+0x5d8>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003476:	30 08       	mov	r8,0
80003478:	fe f9 04 dc 	ld.w	r9,pc[1244]
8000347c:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000347e:	fe f9 04 da 	ld.w	r9,pc[1242]
80003482:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80003484:	30 19       	mov	r9,1
80003486:	fe f8 04 b6 	ld.w	r8,pc[1206]
8000348a:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
8000348c:	31 08       	mov	r8,16
8000348e:	fe 69 01 60 	mov	r9,-130720
80003492:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003494:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003498:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
8000349a:	fe 6a 01 f0 	mov	r10,-130576
8000349e:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800034a0:	12 98       	mov	r8,r9
800034a2:	e6 18 00 01 	andh	r8,0x1,COH
800034a6:	c0 21       	brne	800034aa <udd_interrupt+0x172>
      cpu_irq_enable();
800034a8:	d5 03       	csrf	0x10
   }

	barrier();
800034aa:	e0 8f 02 33 	bral	80003910 <udd_interrupt+0x5d8>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
800034ae:	fe 68 01 30 	mov	r8,-130768
800034b2:	70 08       	ld.w	r8,r8[0x0]
800034b4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034b8:	c0 b0       	breq	800034ce <udd_interrupt+0x196>
800034ba:	fe 68 01 c0 	mov	r8,-130624
800034be:	70 08       	ld.w	r8,r8[0x0]
800034c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800034c4:	c0 50       	breq	800034ce <udd_interrupt+0x196>
		// IN packet sent
		udd_ctrl_in_sent();
800034c6:	f0 1f 01 26 	mcall	8000395c <udd_interrupt+0x624>
800034ca:	e0 8f 02 23 	bral	80003910 <udd_interrupt+0x5d8>
		return true;
	}
	if (Is_udd_out_received(0)) {
800034ce:	fe 68 01 30 	mov	r8,-130768
800034d2:	70 08       	ld.w	r8,r8[0x0]
800034d4:	e2 18 00 02 	andl	r8,0x2,COH
800034d8:	e0 80 00 a8 	breq	80003628 <udd_interrupt+0x2f0>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
800034dc:	fe f8 04 60 	ld.w	r8,pc[1120]
800034e0:	70 08       	ld.w	r8,r8[0x0]
800034e2:	58 18       	cp.w	r8,1
800034e4:	c1 10       	breq	80003506 <udd_interrupt+0x1ce>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800034e6:	58 28       	cp.w	r8,2
800034e8:	5f 09       	sreq	r9
800034ea:	58 48       	cp.w	r8,4
800034ec:	5f 08       	sreq	r8
800034ee:	f3 e8 10 08 	or	r8,r9,r8
800034f2:	c0 40       	breq	800034fa <udd_interrupt+0x1c2>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
800034f4:	f0 1f 01 13 	mcall	80003940 <udd_interrupt+0x608>
800034f8:	c0 38       	rjmp	800034fe <udd_interrupt+0x1c6>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
800034fa:	f0 1f 01 14 	mcall	80003948 <udd_interrupt+0x610>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
800034fe:	f0 1f 01 12 	mcall	80003944 <udd_interrupt+0x60c>
80003502:	e0 8f 02 07 	bral	80003910 <udd_interrupt+0x5d8>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80003506:	fe 68 01 30 	mov	r8,-130768
8000350a:	70 0b       	ld.w	r11,r8[0x0]
8000350c:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80003510:	fe f8 04 3c 	ld.w	r8,pc[1084]
80003514:	90 69       	ld.sh	r9,r8[0xc]
80003516:	fe f8 04 42 	ld.w	r8,pc[1090]
8000351a:	90 08       	ld.sh	r8,r8[0x0]
8000351c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80003520:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003524:	f6 0a 00 0a 	add	r10,r11,r10
80003528:	14 3c       	cp.w	r12,r10
8000352a:	c0 44       	brge	80003532 <udd_interrupt+0x1fa>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
8000352c:	10 19       	sub	r9,r8
8000352e:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003532:	fe f9 04 1a 	ld.w	r9,pc[1050]
80003536:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80003538:	58 0b       	cp.w	r11,0
8000353a:	e0 80 01 f2 	breq	8000391e <udd_interrupt+0x5e6>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000353e:	5c 78       	castu.h	r8
80003540:	10 09       	add	r9,r8
80003542:	30 08       	mov	r8,0
80003544:	ea 18 d0 00 	orh	r8,0xd000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80003548:	11 3a       	ld.ub	r10,r8++
8000354a:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
8000354c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003550:	f6 0a 19 00 	cp.h	r10,r11
80003554:	cf a3       	brcs	80003548 <udd_interrupt+0x210>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80003556:	fe f9 04 02 	ld.w	r9,pc[1026]
8000355a:	92 08       	ld.sh	r8,r9[0x0]
8000355c:	16 08       	add	r8,r11
8000355e:	5c 88       	casts.h	r8
80003560:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80003562:	34 09       	mov	r9,64
80003564:	f2 0b 19 00 	cp.h	r11,r9
80003568:	c0 e1       	brne	80003584 <udd_interrupt+0x24c>
8000356a:	fe f9 03 e2 	ld.w	r9,pc[994]
8000356e:	92 ba       	ld.uh	r10,r9[0x6]
80003570:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003574:	fe f9 03 e0 	ld.w	r9,pc[992]
80003578:	92 89       	ld.uh	r9,r9[0x0]
8000357a:	f6 09 00 09 	add	r9,r11,r9
8000357e:	12 3a       	cp.w	r10,r9
80003580:	e0 89 00 1a 	brgt	800035b4 <udd_interrupt+0x27c>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80003584:	fe f9 03 c8 	ld.w	r9,pc[968]
80003588:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000358a:	72 5c       	ld.w	r12,r9[0x14]
8000358c:	58 0c       	cp.w	r12,0
8000358e:	c0 b0       	breq	800035a4 <udd_interrupt+0x26c>
			if (!udd_g_ctrlreq.over_under_run()) {
80003590:	5d 1c       	icall	r12
80003592:	c0 91       	brne	800035a4 <udd_interrupt+0x26c>
				// Stall ZLP
				udd_ctrl_stall_data();
80003594:	f0 1f 00 ed 	mcall	80003948 <udd_interrupt+0x610>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80003598:	30 29       	mov	r9,2
8000359a:	fe 68 01 60 	mov	r8,-130720
8000359e:	91 09       	st.w	r8[0x0],r9
800035a0:	e0 8f 01 b8 	bral	80003910 <udd_interrupt+0x5d8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
800035a4:	30 29       	mov	r9,2
800035a6:	fe 68 01 60 	mov	r8,-130720
800035aa:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
800035ac:	f0 1f 00 ed 	mcall	80003960 <udd_interrupt+0x628>
800035b0:	e0 8f 01 b0 	bral	80003910 <udd_interrupt+0x5d8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
800035b4:	fe f9 03 98 	ld.w	r9,pc[920]
800035b8:	92 69       	ld.sh	r9,r9[0xc]
800035ba:	f0 09 19 00 	cp.h	r9,r8
800035be:	c2 31       	brne	80003604 <udd_interrupt+0x2cc>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
800035c0:	fe f8 03 8c 	ld.w	r8,pc[908]
800035c4:	70 5c       	ld.w	r12,r8[0x14]
800035c6:	58 0c       	cp.w	r12,0
800035c8:	c0 91       	brne	800035da <udd_interrupt+0x2a2>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
800035ca:	f0 1f 00 e0 	mcall	80003948 <udd_interrupt+0x610>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
800035ce:	30 29       	mov	r9,2
800035d0:	fe 68 01 60 	mov	r8,-130720
800035d4:	91 09       	st.w	r8[0x0],r9
800035d6:	e0 8f 01 9d 	bral	80003910 <udd_interrupt+0x5d8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
800035da:	5d 1c       	icall	r12
800035dc:	c0 91       	brne	800035ee <udd_interrupt+0x2b6>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
800035de:	f0 1f 00 db 	mcall	80003948 <udd_interrupt+0x610>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
800035e2:	30 29       	mov	r9,2
800035e4:	fe 68 01 60 	mov	r8,-130720
800035e8:	91 09       	st.w	r8[0x0],r9
800035ea:	e0 8f 01 93 	bral	80003910 <udd_interrupt+0x5d8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
800035ee:	fe f9 03 66 	ld.w	r9,pc[870]
800035f2:	fe f8 03 66 	ld.w	r8,pc[870]
800035f6:	90 0b       	ld.sh	r11,r8[0x0]
800035f8:	92 0a       	ld.sh	r10,r9[0x0]
800035fa:	f6 0a 00 0a 	add	r10,r11,r10
800035fe:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80003600:	30 09       	mov	r9,0
80003602:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80003604:	fe 69 01 60 	mov	r9,-130720
80003608:	30 28       	mov	r8,2
8000360a:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000360c:	31 08       	mov	r8,16
8000360e:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003610:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003614:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80003616:	fe 6a 01 f0 	mov	r10,-130576
8000361a:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000361c:	12 98       	mov	r8,r9
8000361e:	e6 18 00 01 	andh	r8,0x1,COH
80003622:	c0 21       	brne	80003626 <udd_interrupt+0x2ee>
      cpu_irq_enable();
80003624:	d5 03       	csrf	0x10
   }

	barrier();
80003626:	c7 59       	rjmp	80003910 <udd_interrupt+0x5d8>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80003628:	fe 68 01 30 	mov	r8,-130768
8000362c:	70 08       	ld.w	r8,r8[0x0]
8000362e:	e2 18 00 08 	andl	r8,0x8,COH
80003632:	c1 80       	breq	80003662 <udd_interrupt+0x32a>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80003634:	30 89       	mov	r9,8
80003636:	fe 68 01 60 	mov	r8,-130720
8000363a:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
8000363c:	fe 68 01 30 	mov	r8,-130768
80003640:	70 08       	ld.w	r8,r8[0x0]
80003642:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003646:	e0 81 01 65 	brne	80003910 <udd_interrupt+0x5d8>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000364a:	fe f8 02 f2 	ld.w	r8,pc[754]
8000364e:	70 08       	ld.w	r8,r8[0x0]
80003650:	58 38       	cp.w	r8,3
80003652:	e0 81 01 5f 	brne	80003910 <udd_interrupt+0x5d8>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80003656:	e8 69 00 00 	mov	r9,524288
8000365a:	fe 68 01 f0 	mov	r8,-130576
8000365e:	91 09       	st.w	r8[0x0],r9
80003660:	c5 89       	rjmp	80003910 <udd_interrupt+0x5d8>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80003662:	fe 68 01 30 	mov	r8,-130768
80003666:	70 08       	ld.w	r8,r8[0x0]
80003668:	e2 18 00 10 	andl	r8,0x10,COH
8000366c:	c0 f1       	brne	8000368a <udd_interrupt+0x352>
8000366e:	fe f7 02 f6 	ld.w	r7,pc[758]
80003672:	0e 96       	mov	r6,r7
80003674:	fe 6b 01 34 	mov	r11,-130764
80003678:	30 05       	mov	r5,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000367a:	fe 6a 00 00 	mov	r10,-131072
8000367e:	30 04       	mov	r4,0
80003680:	ea 14 02 00 	orh	r4,0x200
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80003684:	e0 63 10 00 	mov	r3,4096
80003688:	c1 e8       	rjmp	800036c4 <udd_interrupt+0x38c>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
8000368a:	31 09       	mov	r9,16
8000368c:	fe 68 01 60 	mov	r8,-130720
80003690:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80003692:	fe 68 01 30 	mov	r8,-130768
80003696:	70 08       	ld.w	r8,r8[0x0]
80003698:	e2 18 00 02 	andl	r8,0x2,COH
8000369c:	e0 81 01 3a 	brne	80003910 <udd_interrupt+0x5d8>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800036a0:	fe f8 02 9c 	ld.w	r8,pc[668]
800036a4:	70 08       	ld.w	r8,r8[0x0]
800036a6:	58 18       	cp.w	r8,1
800036a8:	c0 41       	brne	800036b0 <udd_interrupt+0x378>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
800036aa:	f0 1f 00 ae 	mcall	80003960 <udd_interrupt+0x628>
800036ae:	c3 19       	rjmp	80003910 <udd_interrupt+0x5d8>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
800036b0:	58 48       	cp.w	r8,4
800036b2:	e0 81 01 2f 	brne	80003910 <udd_interrupt+0x5d8>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
800036b6:	e8 69 00 00 	mov	r9,524288
800036ba:	fe 68 01 f0 	mov	r8,-130576
800036be:	91 09       	st.w	r8[0x0],r9
800036c0:	c2 89       	rjmp	80003910 <udd_interrupt+0x5d8>
800036c2:	12 95       	mov	r5,r9
800036c4:	ea c9 ff ff 	sub	r9,r5,-1
800036c8:	0c 98       	mov	r8,r6
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
800036ca:	74 4e       	ld.w	lr,r10[0x10]
800036cc:	12 9c       	mov	r12,r9
800036ce:	e8 05 09 45 	lsl	r5,r4,r5
800036d2:	eb ee 00 0e 	and	lr,r5,lr
800036d6:	c1 b0       	breq	8000370c <udd_interrupt+0x3d4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
800036d8:	74 1e       	ld.w	lr,r10[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
800036da:	eb ee 00 0e 	and	lr,r5,lr
800036de:	c1 70       	breq	8000370c <udd_interrupt+0x3d4>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
800036e0:	a5 69       	lsl	r9,0x4
800036e2:	e0 39 fd 00 	sub	r9,130304
800036e6:	72 3a       	ld.w	r10,r9[0xc]
800036e8:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800036ec:	e0 81 01 12 	brne	80003910 <udd_interrupt+0x5d8>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
800036f0:	fe 6a 00 00 	mov	r10,-131072
800036f4:	95 55       	st.w	r10[0x14],r5
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
800036f6:	72 39       	ld.w	r9,r9[0xc]
800036f8:	b1 89       	lsr	r9,0x10
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
800036fa:	c0 60       	breq	80003706 <udd_interrupt+0x3ce>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
800036fc:	6c 3a       	ld.w	r10,r6[0xc]
800036fe:	f4 09 01 09 	sub	r9,r10,r9
80003702:	8d 39       	st.w	r6[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
80003704:	8d 29       	st.w	r6[0x8],r9
			}
			udd_ep_trans_done(ep);
80003706:	f0 1f 00 99 	mcall	80003968 <udd_interrupt+0x630>
8000370a:	c0 39       	rjmp	80003910 <udd_interrupt+0x5d8>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000370c:	74 45       	ld.w	r5,r10[0x10]
8000370e:	e6 0c 09 4e 	lsl	lr,r3,r12
80003712:	fd e5 00 05 	and	r5,lr,r5
80003716:	c4 80       	breq	800037a6 <udd_interrupt+0x46e>
80003718:	e0 75 fe d0 	mov	r5,130768
8000371c:	f6 05 00 01 	add	r1,r11,r5
80003720:	f6 c5 ff 70 	sub	r5,r11,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80003724:	6a 02       	ld.w	r2,r5[0x0]
80003726:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000372a:	c1 70       	breq	80003758 <udd_interrupt+0x420>
8000372c:	76 02       	ld.w	r2,r11[0x0]
8000372e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80003732:	c1 30       	breq	80003758 <udd_interrupt+0x420>
				udd_disable_in_send_interrupt(ep);
80003734:	fe 6a 02 20 	mov	r10,-130528
80003738:	e2 0a 00 09 	add	r9,r1,r10
8000373c:	30 1a       	mov	r10,1
8000373e:	93 0a       	st.w	r9[0x0],r10
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80003740:	e0 31 fe a0 	sub	r1,130720
80003744:	83 0a       	st.w	r1[0x0],r10
				udd_ack_fifocon(ep);
80003746:	e0 6a 40 00 	mov	r10,16384
8000374a:	93 0a       	st.w	r9[0x0],r10
				udd_ep_finish_job(ptr_job, false, ep);
8000374c:	18 9a       	mov	r10,r12
8000374e:	30 0b       	mov	r11,0
80003750:	10 9c       	mov	r12,r8
80003752:	f0 1f 00 87 	mcall	8000396c <udd_interrupt+0x634>
80003756:	cd d8       	rjmp	80003910 <udd_interrupt+0x5d8>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80003758:	6a 0c       	ld.w	r12,r5[0x0]
8000375a:	e2 1c 10 00 	andl	r12,0x1000,COH
8000375e:	c2 40       	breq	800037a6 <udd_interrupt+0x46e>
80003760:	76 0c       	ld.w	r12,r11[0x0]
80003762:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
80003766:	c2 01       	brne	800037a6 <udd_interrupt+0x46e>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80003768:	fe 65 02 20 	mov	r5,-130528
8000376c:	e2 05 00 09 	add	r9,r1,r5
80003770:	e0 6a 10 00 	mov	r10,4096
80003774:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_interrupt(ep);
80003776:	fe 69 00 00 	mov	r9,-131072
8000377a:	93 5e       	st.w	r9[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000377c:	70 09       	ld.w	r9,r8[0x0]
8000377e:	30 0a       	mov	r10,0
80003780:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80003784:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_bank_autoswitch(ep);
80003786:	fe 6a 01 00 	mov	r10,-130816
8000378a:	e2 0a 00 08 	add	r8,r1,r10
8000378e:	70 09       	ld.w	r9,r8[0x0]
80003790:	a9 d9       	cbr	r9,0x9
80003792:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80003794:	e0 31 fe 10 	sub	r1,130576
80003798:	e8 68 00 00 	mov	r8,524288
8000379c:	83 08       	st.w	r1[0x0],r8
				udd_reset_data_toggle(ep);
8000379e:	e4 68 00 00 	mov	r8,262144
800037a2:	83 08       	st.w	r1[0x0],r8
800037a4:	cb 68       	rjmp	80003910 <udd_interrupt+0x5d8>
800037a6:	2e c6       	sub	r6,-20
800037a8:	2f cb       	sub	r11,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
800037aa:	58 39       	cp.w	r9,3
800037ac:	c8 b1       	brne	800036c2 <udd_interrupt+0x38a>
800037ae:	cb c8       	rjmp	80003926 <udd_interrupt+0x5ee>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
800037b0:	30 89       	mov	r9,8
800037b2:	fe 68 00 08 	mov	r8,-131064
800037b6:	91 09       	st.w	r8[0x0],r9
800037b8:	30 06       	mov	r6,0
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
800037ba:	30 15       	mov	r5,1
#  ifdef FREERTOS_USED
#    include "FreeRTOS.h"
#    include "task.h"
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
800037bc:	2f f6       	sub	r6,-1
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
800037be:	0c 9a       	mov	r10,r6
800037c0:	0a 9b       	mov	r11,r5
800037c2:	0e 9c       	mov	r12,r7
800037c4:	f0 1f 00 6a 	mcall	8000396c <udd_interrupt+0x634>
800037c8:	2e c7       	sub	r7,-20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
800037ca:	58 36       	cp.w	r6,3
800037cc:	cf 81       	brne	800037bc <udd_interrupt+0x484>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
800037ce:	f0 1f 00 69 	mcall	80003970 <udd_interrupt+0x638>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
800037d2:	fe 68 00 00 	mov	r8,-131072
800037d6:	70 09       	ld.w	r9,r8[0x0]
800037d8:	e0 19 ff 80 	andl	r9,0xff80
800037dc:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800037de:	70 09       	ld.w	r9,r8[0x0]
800037e0:	a7 b9       	sbr	r9,0x7
800037e2:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800037e4:	fe 69 01 00 	mov	r9,-130816
800037e8:	72 0a       	ld.w	r10,r9[0x0]
800037ea:	30 8c       	mov	r12,8
800037ec:	34 0b       	mov	r11,64
800037ee:	f6 0c 0c 4b 	max	r11,r11,r12
800037f2:	e0 6c 04 00 	mov	r12,1024
800037f6:	f6 0c 0d 4b 	min	r11,r11,r12
800037fa:	a1 7b       	lsl	r11,0x1
800037fc:	20 1b       	sub	r11,1
800037fe:	f6 0b 12 00 	clz	r11,r11
80003802:	f6 0b 11 1c 	rsub	r11,r11,28
80003806:	a5 6b       	lsl	r11,0x4
80003808:	e2 1b 19 7c 	andl	r11,0x197c,COH
8000380c:	e0 1a e6 83 	andl	r10,0xe683
80003810:	f7 ea 10 0a 	or	r10,r11,r10
80003814:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80003816:	72 0a       	ld.w	r10,r9[0x0]
80003818:	a1 ba       	sbr	r10,0x1
8000381a:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
8000381c:	70 79       	ld.w	r9,r8[0x1c]
8000381e:	a1 a9       	sbr	r9,0x0
80003820:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003822:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003826:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80003828:	fe 69 01 f0 	mov	r9,-130576
8000382c:	30 4b       	mov	r11,4
8000382e:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80003830:	30 2b       	mov	r11,2
80003832:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80003834:	e0 69 10 00 	mov	r9,4096
80003838:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000383a:	14 98       	mov	r8,r10
8000383c:	e6 18 00 01 	andh	r8,0x1,COH
80003840:	c0 21       	brne	80003844 <udd_interrupt+0x50c>
      cpu_irq_enable();
80003842:	d5 03       	csrf	0x10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
80003844:	f0 1f 00 40 	mcall	80003944 <udd_interrupt+0x60c>
		goto udd_interrupt_end;
80003848:	c6 48       	rjmp	80003910 <udd_interrupt+0x5d8>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
8000384a:	fe 68 00 10 	mov	r8,-131056
8000384e:	70 08       	ld.w	r8,r8[0x0]
80003850:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003854:	c1 d0       	breq	8000388e <udd_interrupt+0x556>
80003856:	fe 68 00 04 	mov	r8,-131068
8000385a:	70 08       	ld.w	r8,r8[0x0]
8000385c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003860:	c1 70       	breq	8000388e <udd_interrupt+0x556>
		otg_unfreeze_clock();
80003862:	fe 68 08 00 	mov	r8,-129024
80003866:	70 09       	ld.w	r9,r8[0x0]
80003868:	af c9       	cbr	r9,0xe
8000386a:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000386c:	30 1a       	mov	r10,1
8000386e:	fe 69 00 14 	mov	r9,-131052
80003872:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80003874:	31 0a       	mov	r10,16
80003876:	fe 69 00 18 	mov	r9,-131048
8000387a:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
8000387c:	70 09       	ld.w	r9,r8[0x0]
8000387e:	af a9       	sbr	r9,0xe
80003880:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80003882:	30 0c       	mov	r12,0
80003884:	f0 1f 00 3c 	mcall	80003974 <udd_interrupt+0x63c>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80003888:	f0 1f 00 3c 	mcall	80003978 <udd_interrupt+0x640>
#endif
		goto udd_interrupt_end;
8000388c:	c4 28       	rjmp	80003910 <udd_interrupt+0x5d8>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000388e:	fe 68 00 10 	mov	r8,-131056
80003892:	70 08       	ld.w	r8,r8[0x0]
80003894:	e2 18 00 10 	andl	r8,0x10,COH
80003898:	c1 f0       	breq	800038d6 <udd_interrupt+0x59e>
8000389a:	fe 68 00 04 	mov	r8,-131068
8000389e:	70 08       	ld.w	r8,r8[0x0]
800038a0:	e2 18 00 10 	andl	r8,0x10,COH
800038a4:	c1 90       	breq	800038d6 <udd_interrupt+0x59e>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
800038a6:	fe 68 08 00 	mov	r8,-129024
800038aa:	70 09       	ld.w	r9,r8[0x0]
800038ac:	af c9       	cbr	r9,0xe
800038ae:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
800038b0:	fe 69 08 04 	mov	r9,-129020
800038b4:	72 08       	ld.w	r8,r9[0x0]
800038b6:	e2 18 40 00 	andl	r8,0x4000,COH
800038ba:	cf d0       	breq	800038b4 <udd_interrupt+0x57c>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
800038bc:	31 09       	mov	r9,16
800038be:	fe 68 00 14 	mov	r8,-131052
800038c2:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
800038c4:	30 1c       	mov	r12,1
800038c6:	fe 68 00 18 	mov	r8,-131048
800038ca:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
800038cc:	f0 1f 00 2a 	mcall	80003974 <udd_interrupt+0x63c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
800038d0:	f0 1f 00 2b 	mcall	8000397c <udd_interrupt+0x644>
#endif
		goto udd_interrupt_end;
800038d4:	c1 e8       	rjmp	80003910 <udd_interrupt+0x5d8>
	}

	if (Is_otg_vbus_transition()) {
800038d6:	fe 68 08 04 	mov	r8,-129020
800038da:	70 08       	ld.w	r8,r8[0x0]
800038dc:	e2 18 00 02 	andl	r8,0x2,COH
800038e0:	c1 80       	breq	80003910 <udd_interrupt+0x5d8>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
800038e2:	fe 68 08 00 	mov	r8,-129024
800038e6:	70 09       	ld.w	r9,r8[0x0]
800038e8:	af c9       	cbr	r9,0xe
800038ea:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
800038ec:	30 2a       	mov	r10,2
800038ee:	fe 69 08 08 	mov	r9,-129016
800038f2:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
800038f4:	70 09       	ld.w	r9,r8[0x0]
800038f6:	af a9       	sbr	r9,0xe
800038f8:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
800038fa:	fe 68 08 04 	mov	r8,-129020
800038fe:	70 08       	ld.w	r8,r8[0x0]
80003900:	e2 18 08 00 	andl	r8,0x800,COH
80003904:	c0 40       	breq	8000390c <udd_interrupt+0x5d4>
			udd_attach();
80003906:	f0 1f 00 1f 	mcall	80003980 <udd_interrupt+0x648>
8000390a:	c0 38       	rjmp	80003910 <udd_interrupt+0x5d8>
		} else {
			udd_detach();
8000390c:	f0 1f 00 1e 	mcall	80003984 <udd_interrupt+0x64c>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80003910:	fe 68 00 00 	mov	r8,-131072
80003914:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80003918:	e3 cd 40 fe 	ldm	sp++,r1-r7,lr
8000391c:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000391e:	48 f9       	lddpc	r9,80003958 <udd_interrupt+0x620>
80003920:	b2 08       	st.h	r9[0x0],r8
80003922:	fe 9f fe 31 	bral	80003584 <udd_interrupt+0x24c>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80003926:	fe 68 00 04 	mov	r8,-131068
8000392a:	70 08       	ld.w	r8,r8[0x0]
8000392c:	e2 18 00 08 	andl	r8,0x8,COH
80003930:	c8 d0       	breq	8000384a <udd_interrupt+0x512>
80003932:	c3 fb       	rjmp	800037b0 <udd_interrupt+0x478>
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	42 18       	lddsp	r8,sp[0x84]
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	4b 00       	lddpc	r0,800039f8 <sysclk_enable_pbb_module>
8000393c:	00 00       	add	r0,r0
8000393e:	02 18       	sub	r8,r1
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	2b a8       	sub	r8,-70
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	2f 74       	sub	r4,-9
80003948:	80 00       	ld.sh	r0,r0[0x0]
8000394a:	2b 90       	sub	r0,-71
8000394c:	00 00       	add	r0,r0
8000394e:	07 90       	ld.ub	r0,r3[0x1]
80003950:	80 00       	ld.sh	r0,r0[0x0]
80003952:	44 98       	lddsp	r8,sp[0x124]
80003954:	00 00       	add	r0,r0
80003956:	01 d0       	ld.ub	r0,r0[0x5]
80003958:	00 00       	add	r0,r0
8000395a:	02 12       	sub	r2,r1
8000395c:	80 00       	ld.sh	r0,r0[0x0]
8000395e:	2f ac       	sub	r12,-6
80003960:	80 00       	ld.sh	r0,r0[0x0]
80003962:	2f 44       	sub	r4,-12
80003964:	00 00       	add	r0,r0
80003966:	01 d4       	ld.ub	r4,r0[0x5]
80003968:	80 00       	ld.sh	r0,r0[0x0]
8000396a:	2c dc       	sub	r12,-51
8000396c:	80 00       	ld.sh	r0,r0[0x0]
8000396e:	2b bc       	sub	r12,-69
80003970:	80 00       	ld.sh	r0,r0[0x0]
80003972:	44 38       	lddsp	r8,sp[0x10c]
80003974:	80 00       	ld.sh	r0,r0[0x0]
80003976:	29 84       	sub	r4,-104
80003978:	80 00       	ld.sh	r0,r0[0x0]
8000397a:	4b 30       	lddpc	r0,80003a44 <sysclk_enable_usb+0x8>
8000397c:	80 00       	ld.sh	r0,r0[0x0]
8000397e:	4b 24       	lddpc	r4,80003a44 <sysclk_enable_usb+0x8>
80003980:	80 00       	ld.sh	r0,r0[0x0]
80003982:	2e d0       	sub	r0,-19
80003984:	80 00       	ld.sh	r0,r0[0x0]
80003986:	29 90       	sub	r0,-103

80003988 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003988:	e0 6d 80 00 	mov	sp,32768

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000398c:	fe c0 db 8c 	sub	r0,pc,-9332

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003990:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003994:	d5 53       	csrf	0x15
  cp      r0, r1
80003996:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003998:	e0 61 01 10 	mov	r1,272
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000399c:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000399e:	c0 72       	brcc	800039ac <idata_load_loop_end>
  cp      r0, r1
800039a0:	fe c2 d8 a0 	sub	r2,pc,-10080

800039a4 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800039a4:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800039a6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800039a8:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800039aa:	cf d3       	brcs	800039a4 <idata_load_loop>

800039ac <idata_load_loop_end>:
  mov     r2, 0
800039ac:	e0 60 01 10 	mov	r0,272
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800039b0:	e0 61 08 68 	mov	r1,2152
  cp      r0, r1
  brlo    udata_clear_loop
800039b4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800039b6:	c0 62       	brcc	800039c2 <udata_clear_loop_end>
800039b8:	30 02       	mov	r2,0
800039ba:	30 03       	mov	r3,0

800039bc <udata_clear_loop>:
800039bc:	a1 22       	st.d	r0++,r2
800039be:	02 30       	cp.w	r0,r1
800039c0:	cf e3       	brcs	800039bc <udata_clear_loop>

800039c2 <udata_clear_loop_end>:
800039c2:	fe cf ea c2 	sub	pc,pc,-5438
800039c6:	d7 03       	nop

800039c8 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800039c8:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800039cc:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
800039ce:	fe 78 0c 00 	mov	r8,-62464
800039d2:	71 59       	ld.w	r9,r8[0x54]
800039d4:	e2 19 00 40 	andl	r9,0x40,COH
800039d8:	cf d0       	breq	800039d2 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800039da:	a3 6c       	lsl	r12,0x2
800039dc:	e0 2c f3 f8 	sub	r12,62456
800039e0:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
800039e2:	30 19       	mov	r9,1
800039e4:	f2 0b 09 4b 	lsl	r11,r9,r11
800039e8:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800039ea:	99 0b       	st.w	r12[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800039ec:	14 98       	mov	r8,r10
800039ee:	e6 18 00 01 	andh	r8,0x1,COH
800039f2:	c0 21       	brne	800039f6 <sysclk_priv_enable_module+0x2e>
      cpu_irq_enable();
800039f4:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
800039f6:	5e fc       	retal	r12

800039f8 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
800039f8:	eb cd 40 c0 	pushm	r6-r7,lr
800039fc:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800039fe:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003a02:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80003a04:	48 c8       	lddpc	r8,80003a34 <sysclk_enable_pbb_module+0x3c>
80003a06:	11 89       	ld.ub	r9,r8[0x0]
80003a08:	30 08       	mov	r8,0
80003a0a:	f0 09 18 00 	cp.b	r9,r8
80003a0e:	c0 51       	brne	80003a18 <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003a10:	30 2b       	mov	r11,2
80003a12:	30 1c       	mov	r12,1
80003a14:	f0 1f 00 09 	mcall	80003a38 <sysclk_enable_pbb_module+0x40>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
80003a18:	48 78       	lddpc	r8,80003a34 <sysclk_enable_pbb_module+0x3c>
80003a1a:	11 89       	ld.ub	r9,r8[0x0]
80003a1c:	2f f9       	sub	r9,-1
80003a1e:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003a20:	e6 16 00 01 	andh	r6,0x1,COH
80003a24:	c0 21       	brne	80003a28 <sysclk_enable_pbb_module+0x30>
      cpu_irq_enable();
80003a26:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003a28:	0e 9b       	mov	r11,r7
80003a2a:	30 3c       	mov	r12,3
80003a2c:	f0 1f 00 03 	mcall	80003a38 <sysclk_enable_pbb_module+0x40>
}
80003a30:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a34:	00 00       	add	r0,r0
80003a36:	02 1c       	sub	r12,r1
80003a38:	80 00       	ld.sh	r0,r0[0x0]
80003a3a:	39 c8       	mov	r8,-100

80003a3c <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80003a3c:	d4 01       	pushm	lr
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003a3e:	30 1c       	mov	r12,1
80003a40:	f0 1f 00 20 	mcall	80003ac0 <sysclk_enable_usb+0x84>
80003a44:	30 3b       	mov	r11,3
80003a46:	30 1c       	mov	r12,1
80003a48:	f0 1f 00 1f 	mcall	80003ac4 <sysclk_enable_usb+0x88>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003a4c:	fe 78 0c 00 	mov	r8,-62464
80003a50:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80003a52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a56:	c2 f1       	brne	80003ab4 <sysclk_enable_usb+0x78>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80003a58:	fe 78 0c 00 	mov	r8,-62464
80003a5c:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80003a5e:	e2 18 00 80 	andl	r8,0x80,COH
80003a62:	c1 71       	brne	80003a90 <sysclk_enable_usb+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003a64:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003a68:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80003a6a:	fe 78 0c 00 	mov	r8,-62464
80003a6e:	e0 6a 03 07 	mov	r10,775
80003a72:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80003a74:	70 0a       	ld.w	r10,r8[0x0]
80003a76:	a3 aa       	sbr	r10,0x2
80003a78:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003a7a:	12 98       	mov	r8,r9
80003a7c:	e6 18 00 01 	andh	r8,0x1,COH
80003a80:	c0 21       	brne	80003a84 <sysclk_enable_usb+0x48>
      cpu_irq_enable();
80003a82:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80003a84:	fe 79 0c 00 	mov	r9,-62464
80003a88:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80003a8a:	e2 18 00 80 	andl	r8,0x80,COH
80003a8e:	cf d0       	breq	80003a88 <sysclk_enable_usb+0x4c>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80003a90:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80003a92:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80003a94:	31 09       	mov	r9,16
80003a96:	20 19       	sub	r9,1
80003a98:	b1 69       	lsl	r9,0x10
80003a9a:	ea 19 3f 00 	orh	r9,0x3f00
80003a9e:	e8 19 02 01 	orl	r9,0x201
80003aa2:	f3 e8 10 08 	or	r8,r9,r8
80003aa6:	fe 79 0c 00 	mov	r9,-62464
80003aaa:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003aac:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80003aae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ab2:	cf d0       	breq	80003aac <sysclk_enable_usb+0x70>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80003ab4:	30 69       	mov	r9,6
80003ab6:	fe 78 0c 00 	mov	r8,-62464
80003aba:	f1 49 00 6c 	st.w	r8[108],r9
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80003abe:	d8 02       	popm	pc
80003ac0:	80 00       	ld.sh	r0,r0[0x0]
80003ac2:	39 f8       	mov	r8,-97
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	39 c8       	mov	r8,-100

80003ac8 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80003ac8:	d4 01       	pushm	lr

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003aca:	fe 78 0c 00 	mov	r8,-62464
80003ace:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80003ad0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ad4:	c2 f1       	brne	80003b32 <sysclk_init+0x6a>
80003ad6:	fe 78 0c 00 	mov	r8,-62464
80003ada:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80003adc:	e2 18 00 80 	andl	r8,0x80,COH
80003ae0:	c1 71       	brne	80003b0e <sysclk_init+0x46>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003ae2:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003ae6:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80003ae8:	fe 78 0c 00 	mov	r8,-62464
80003aec:	e0 6a 03 07 	mov	r10,775
80003af0:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
80003af2:	70 0a       	ld.w	r10,r8[0x0]
80003af4:	a3 aa       	sbr	r10,0x2
80003af6:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003af8:	12 98       	mov	r8,r9
80003afa:	e6 18 00 01 	andh	r8,0x1,COH
80003afe:	c0 21       	brne	80003b02 <sysclk_init+0x3a>
      cpu_irq_enable();
80003b00:	d5 03       	csrf	0x10
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80003b02:	fe 79 0c 00 	mov	r9,-62464
80003b06:	73 58       	ld.w	r8,r9[0x54]
80003b08:	e2 18 00 80 	andl	r8,0x80,COH
80003b0c:	cf d0       	breq	80003b06 <sysclk_init+0x3e>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80003b0e:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80003b10:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80003b12:	31 09       	mov	r9,16
80003b14:	20 19       	sub	r9,1
80003b16:	b1 69       	lsl	r9,0x10
80003b18:	ea 19 3f 00 	orh	r9,0x3f00
80003b1c:	e8 19 02 01 	orl	r9,0x201
80003b20:	f3 e8 10 08 	or	r8,r9,r8
80003b24:	fe 79 0c 00 	mov	r9,-62464
80003b28:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80003b2a:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80003b2c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003b30:	cf d0       	breq	80003b2a <sysclk_init+0x62>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
80003b32:	e0 6c 6c 00 	mov	r12,27648
80003b36:	ea 1c 02 dc 	orh	r12,0x2dc
80003b3a:	f0 1f 00 0a 	mcall	80003b60 <sysclk_init+0x98>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003b3e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003b42:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80003b44:	fe 78 0c 00 	mov	r8,-62464
80003b48:	70 0a       	ld.w	r10,r8[0x0]
80003b4a:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80003b4e:	a1 ba       	sbr	r10,0x1
	AVR32_PM.mcctrl = mcctrl;
80003b50:	91 0a       	st.w	r8[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003b52:	12 98       	mov	r8,r9
80003b54:	e6 18 00 01 	andh	r8,0x1,COH
80003b58:	c0 21       	brne	80003b5c <sysclk_init+0x94>
      cpu_irq_enable();
80003b5a:	d5 03       	csrf	0x10

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003b5c:	d8 02       	popm	pc
80003b5e:	00 00       	add	r0,r0
80003b60:	80 00       	ld.sh	r0,r0[0x0]
80003b62:	27 00       	sub	r0,112

80003b64 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80003b64:	48 38       	lddpc	r8,80003b70 <udi_cdc_comm_disable+0xc>
80003b66:	11 89       	ld.ub	r9,r8[0x0]
80003b68:	20 19       	sub	r9,1
80003b6a:	b0 89       	st.b	r8[0x0],r9
}
80003b6c:	5e fc       	retal	r12
80003b6e:	00 00       	add	r0,r0
80003b70:	00 00       	add	r0,r0
80003b72:	04 b4       	st.h	r2++,r4

80003b74 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
80003b74:	5e fd       	retal	0

80003b76 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
80003b76:	5e fd       	retal	0

80003b78 <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
80003b78:	5e fd       	retal	0
80003b7a:	d7 03       	nop

80003b7c <udi_cdc_multi_get_free_tx_buffer>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003b7c:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80003b80:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80003b82:	49 78       	lddpc	r8,80003bdc <udi_cdc_multi_get_free_tx_buffer+0x60>
80003b84:	11 88       	ld.ub	r8,r8[0x0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80003b86:	49 7a       	lddpc	r10,80003be0 <udi_cdc_multi_get_free_tx_buffer+0x64>
80003b88:	f4 08 05 19 	ld.uh	r9,r10[r8<<0x1]
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
80003b8c:	58 08       	cp.w	r8,0
80003b8e:	f9 bc 01 00 	movne	r12,0
80003b92:	f9 bc 00 02 	moveq	r12,2
80003b96:	f4 0c 05 0a 	ld.uh	r10,r10[r12]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
80003b9a:	e0 49 01 40 	cp.w	r9,320
80003b9e:	c1 31       	brne	80003bc4 <udi_cdc_multi_get_free_tx_buffer+0x48>
		if ((!udi_cdc_tx_trans_ongoing[port])
80003ba0:	49 1c       	lddpc	r12,80003be4 <udi_cdc_multi_get_free_tx_buffer+0x68>
80003ba2:	19 8c       	ld.ub	r12,r12[0x0]
80003ba4:	58 0c       	cp.w	r12,0
80003ba6:	c0 f1       	brne	80003bc4 <udi_cdc_multi_get_free_tx_buffer+0x48>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
80003ba8:	49 0c       	lddpc	r12,80003be8 <udi_cdc_multi_get_free_tx_buffer+0x6c>
80003baa:	19 8c       	ld.ub	r12,r12[0x0]
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	buf_nosel_nb = udi_cdc_tx_buf_nb[port][(buf_sel == 0)? 1 : 0];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
80003bac:	58 0c       	cp.w	r12,0
80003bae:	c0 b1       	brne	80003bc4 <udi_cdc_multi_get_free_tx_buffer+0x48>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
80003bb0:	30 1a       	mov	r10,1
80003bb2:	48 e9       	lddpc	r9,80003be8 <udi_cdc_multi_get_free_tx_buffer+0x6c>
80003bb4:	b2 8a       	st.b	r9[0x0],r10
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
80003bb6:	58 08       	cp.w	r8,0
80003bb8:	5f 09       	sreq	r9
80003bba:	48 98       	lddpc	r8,80003bdc <udi_cdc_multi_get_free_tx_buffer+0x60>
80003bbc:	b0 89       	st.b	r8[0x0],r9
80003bbe:	e0 6a 01 40 	mov	r10,320
80003bc2:	30 09       	mov	r9,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003bc4:	16 98       	mov	r8,r11
80003bc6:	e6 18 00 01 	andh	r8,0x1,COH
80003bca:	c0 21       	brne	80003bce <udi_cdc_multi_get_free_tx_buffer+0x52>
      cpu_irq_enable();
80003bcc:	d5 03       	csrf	0x10
   }

	barrier();
80003bce:	e0 68 02 80 	mov	r8,640
80003bd2:	f0 09 01 09 	sub	r9,r8,r9
		}
	}
	cpu_irq_restore(flags);

	return (UDI_CDC_TX_BUFFERS - buf_sel_nb) + (UDI_CDC_TX_BUFFERS - buf_nosel_nb);
}
80003bd6:	f2 0a 01 0c 	sub	r12,r9,r10
80003bda:	5e fc       	retal	r12
80003bdc:	00 00       	add	r0,r0
80003bde:	02 28       	rsub	r8,r1
80003be0:	00 00       	add	r0,r0
80003be2:	02 2c       	rsub	r12,r1
80003be4:	00 00       	add	r0,r0
80003be6:	04 c0       	st.b	r2++,r0
80003be8:	00 00       	add	r0,r0
80003bea:	07 54       	ld.sh	r4,--r3

80003bec <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
80003bec:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
80003bee:	f0 1f 00 03 	mcall	80003bf8 <udi_cdc_multi_is_tx_ready+0xc>
}
80003bf2:	5f 1c       	srne	r12
80003bf4:	d8 02       	popm	pc
80003bf6:	00 00       	add	r0,r0
80003bf8:	80 00       	ld.sh	r0,r0[0x0]
80003bfa:	3b 7c       	mov	r12,-73

80003bfc <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
80003bfc:	eb cd 40 fe 	pushm	r1-r7,lr
80003c00:	16 96       	mov	r6,r11

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80003c02:	49 a8       	lddpc	r8,80003c68 <udi_cdc_multi_putc+0x6c>
80003c04:	11 e9       	ld.ub	r9,r8[0x6]
80003c06:	30 98       	mov	r8,9
80003c08:	f0 09 18 00 	cp.b	r9,r8
80003c0c:	5f 03       	sreq	r3

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80003c0e:	30 07       	mov	r7,0
		if (!udi_cdc_data_running) {
80003c10:	49 75       	lddpc	r5,80003c6c <udi_cdc_multi_putc+0x70>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80003c12:	49 82       	lddpc	r2,80003c70 <udi_cdc_multi_putc+0x74>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
80003c14:	49 84       	lddpc	r4,80003c74 <udi_cdc_multi_putc+0x78>
80003c16:	49 91       	lddpc	r1,80003c78 <udi_cdc_multi_putc+0x7c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
80003c18:	0e 9c       	mov	r12,r7
80003c1a:	f0 1f 00 19 	mcall	80003c7c <udi_cdc_multi_putc+0x80>
80003c1e:	c0 51       	brne	80003c28 <udi_cdc_multi_putc+0x2c>
		if (!udi_cdc_data_running) {
80003c20:	0b 88       	ld.ub	r8,r5[0x0]
80003c22:	58 08       	cp.w	r8,0
80003c24:	cf a1       	brne	80003c18 <udi_cdc_multi_putc+0x1c>
80003c26:	c1 e8       	rjmp	80003c62 <udi_cdc_multi_putc+0x66>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003c28:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003c2c:	d3 03       	ssrf	0x10
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80003c2e:	05 88       	ld.ub	r8,r2[0x0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
80003c30:	e8 08 04 19 	ld.sh	r9,r4[r8<<0x1]
80003c34:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80003c38:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80003c3c:	a7 6b       	lsl	r11,0x6
80003c3e:	18 0b       	add	r11,r12
80003c40:	e2 0b 0b 06 	st.b	r1[r11],r6
80003c44:	2f f9       	sub	r9,-1
80003c46:	e8 08 0a 19 	st.h	r4[r8<<0x1],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003c4a:	14 98       	mov	r8,r10
80003c4c:	e6 18 00 01 	andh	r8,0x1,COH
80003c50:	c0 21       	brne	80003c54 <udi_cdc_multi_putc+0x58>
      cpu_irq_enable();
80003c52:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003c54:	58 03       	cp.w	r3,0
80003c56:	c0 31       	brne	80003c5c <udi_cdc_multi_putc+0x60>
80003c58:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
80003c5c:	a9 46       	asr	r6,0x8
80003c5e:	0e 93       	mov	r3,r7
80003c60:	cd cb       	rjmp	80003c18 <udi_cdc_multi_putc+0x1c>
		goto udi_cdc_putc_process_one_byte;
80003c62:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
80003c66:	00 00       	add	r0,r0
80003c68:	00 00       	add	r0,r0
80003c6a:	02 1d       	sub	sp,r1
80003c6c:	00 00       	add	r0,r0
80003c6e:	04 ba       	st.h	r2++,r10
80003c70:	00 00       	add	r0,r0
80003c72:	02 28       	rsub	r8,r1
80003c74:	00 00       	add	r0,r0
80003c76:	02 2c       	rsub	r12,r1
80003c78:	00 00       	add	r0,r0
80003c7a:	02 30       	cp.w	r0,r1
80003c7c:	80 00       	ld.sh	r0,r0[0x0]
80003c7e:	3b ec       	mov	r12,-66

80003c80 <udi_cdc_putc>:
	}
	return true;
}

int udi_cdc_putc(int value)
{
80003c80:	d4 01       	pushm	lr
	return udi_cdc_multi_putc(0, value);
80003c82:	18 9b       	mov	r11,r12
80003c84:	30 0c       	mov	r12,0
80003c86:	f0 1f 00 02 	mcall	80003c8c <udi_cdc_putc+0xc>
}
80003c8a:	d8 02       	popm	pc
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	3b fc       	mov	r12,-65

80003c90 <udi_cdc_multi_get_nb_received_data>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003c90:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003c94:	d3 03       	ssrf	0x10

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003c96:	48 88       	lddpc	r8,80003cb4 <udi_cdc_multi_get_nb_received_data+0x24>
80003c98:	90 08       	ld.sh	r8,r8[0x0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
80003c9a:	48 8a       	lddpc	r10,80003cb8 <udi_cdc_multi_get_nb_received_data+0x28>
80003c9c:	15 8b       	ld.ub	r11,r10[0x0]
80003c9e:	48 8a       	lddpc	r10,80003cbc <udi_cdc_multi_get_nb_received_data+0x2c>
80003ca0:	f4 0b 04 1c 	ld.sh	r12,r10[r11<<0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ca4:	e6 19 00 01 	andh	r9,0x1,COH
80003ca8:	c0 21       	brne	80003cac <udi_cdc_multi_get_nb_received_data+0x1c>
      cpu_irq_enable();
80003caa:	d5 03       	csrf	0x10
   }

	barrier();
80003cac:	5c 7c       	castu.h	r12
80003cae:	5c 78       	castu.h	r8
	cpu_irq_restore(flags);
	return nb_received;
}
80003cb0:	10 1c       	sub	r12,r8
80003cb2:	5e fc       	retal	r12
80003cb4:	00 00       	add	r0,r0
80003cb6:	04 b6       	st.h	r2++,r6
80003cb8:	00 00       	add	r0,r0
80003cba:	04 bc       	st.h	r2++,r12
80003cbc:	00 00       	add	r0,r0
80003cbe:	04 b0       	st.h	r2++,r0

80003cc0 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
80003cc0:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
80003cc2:	f0 1f 00 03 	mcall	80003ccc <udi_cdc_multi_is_rx_ready+0xc>
}
80003cc6:	5f 1c       	srne	r12
80003cc8:	d8 02       	popm	pc
80003cca:	00 00       	add	r0,r0
80003ccc:	80 00       	ld.sh	r0,r0[0x0]
80003cce:	3c 90       	mov	r0,-55

80003cd0 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
80003cd0:	d4 01       	pushm	lr
	return udi_cdc_multi_is_rx_ready(0);
80003cd2:	30 0c       	mov	r12,0
80003cd4:	f0 1f 00 02 	mcall	80003cdc <udi_cdc_is_rx_ready+0xc>
}
80003cd8:	d8 02       	popm	pc
80003cda:	00 00       	add	r0,r0
80003cdc:	80 00       	ld.sh	r0,r0[0x0]
80003cde:	3c c0       	mov	r0,-52

80003ce0 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
80003ce0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003ce4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003ce8:	d3 03       	ssrf	0x10
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
80003cea:	49 d9       	lddpc	r9,80003d5c <udi_cdc_rx_start+0x7c>
80003cec:	13 87       	ld.ub	r7,r9[0x0]
	if (udi_cdc_rx_trans_ongoing[port] ||
80003cee:	49 d9       	lddpc	r9,80003d60 <udi_cdc_rx_start+0x80>
80003cf0:	13 89       	ld.ub	r9,r9[0x0]
80003cf2:	58 09       	cp.w	r9,0
80003cf4:	c0 a1       	brne	80003d08 <udi_cdc_rx_start+0x28>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
80003cf6:	49 c9       	lddpc	r9,80003d64 <udi_cdc_rx_start+0x84>
80003cf8:	92 09       	ld.sh	r9,r9[0x0]
80003cfa:	49 ca       	lddpc	r10,80003d68 <udi_cdc_rx_start+0x88>
80003cfc:	f4 07 04 1a 	ld.sh	r10,r10[r7<<0x1]
80003d00:	f2 0a 19 00 	cp.h	r10,r9
80003d04:	e0 88 00 08 	brls	80003d14 <udi_cdc_rx_start+0x34>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003d08:	e6 18 00 01 	andh	r8,0x1,COH
80003d0c:	c0 21       	brne	80003d10 <udi_cdc_rx_start+0x30>
      cpu_irq_enable();
80003d0e:	d5 03       	csrf	0x10
   }

	barrier();
80003d10:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		cpu_irq_restore(flags);
		return false;
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
80003d14:	30 0a       	mov	r10,0
80003d16:	49 49       	lddpc	r9,80003d64 <udi_cdc_rx_start+0x84>
80003d18:	b2 0a       	st.h	r9[0x0],r10
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80003d1a:	58 07       	cp.w	r7,0
80003d1c:	5f 0a       	sreq	r10
80003d1e:	49 09       	lddpc	r9,80003d5c <udi_cdc_rx_start+0x7c>
80003d20:	b2 8a       	st.b	r9[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
80003d22:	30 1a       	mov	r10,1
80003d24:	48 f9       	lddpc	r9,80003d60 <udi_cdc_rx_start+0x80>
80003d26:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003d28:	e6 18 00 01 	andh	r8,0x1,COH
80003d2c:	c0 21       	brne	80003d30 <udi_cdc_rx_start+0x50>
      cpu_irq_enable();
80003d2e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
80003d30:	30 0c       	mov	r12,0
80003d32:	f0 1f 00 0f 	mcall	80003d6c <udi_cdc_rx_start+0x8c>
80003d36:	c0 40       	breq	80003d3e <udi_cdc_rx_start+0x5e>
		UDI_CDC_RX_NOTIFY(port);
80003d38:	30 0c       	mov	r12,0
80003d3a:	f0 1f 00 0e 	mcall	80003d70 <udi_cdc_rx_start+0x90>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
80003d3e:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003d42:	a7 67       	lsl	r7,0x6
80003d44:	48 c8       	lddpc	r8,80003d74 <udi_cdc_rx_start+0x94>
80003d46:	e0 69 01 40 	mov	r9,320
80003d4a:	48 ca       	lddpc	r10,80003d78 <udi_cdc_rx_start+0x98>
80003d4c:	0e 0a       	add	r10,r7
80003d4e:	30 1b       	mov	r11,1
80003d50:	30 2c       	mov	r12,2
80003d52:	f0 1f 00 0b 	mcall	80003d7c <udi_cdc_rx_start+0x9c>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
80003d56:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d5a:	00 00       	add	r0,r0
80003d5c:	00 00       	add	r0,r0
80003d5e:	04 bc       	st.h	r2++,r12
80003d60:	00 00       	add	r0,r0
80003d62:	07 50       	ld.sh	r0,--r3
80003d64:	00 00       	add	r0,r0
80003d66:	04 b6       	st.h	r2++,r6
80003d68:	00 00       	add	r0,r0
80003d6a:	04 b0       	st.h	r2++,r0
80003d6c:	80 00       	ld.sh	r0,r0[0x0]
80003d6e:	3c c0       	mov	r0,-52
80003d70:	80 00       	ld.sh	r0,r0[0x0]
80003d72:	53 98       	stdsp	sp[0xe4],r8
80003d74:	80 00       	ld.sh	r0,r0[0x0]
80003d76:	3e 1c       	mov	r12,-31
80003d78:	00 00       	add	r0,r0
80003d7a:	04 d0       	st.w	--r2,r0
80003d7c:	80 00       	ld.sh	r0,r0[0x0]
80003d7e:	2e 34       	sub	r4,-29

80003d80 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
80003d80:	d4 31       	pushm	r0-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80003d82:	49 c8       	lddpc	r8,80003df0 <udi_cdc_multi_getc+0x70>
80003d84:	11 e9       	ld.ub	r9,r8[0x6]
80003d86:	30 98       	mov	r8,9
80003d88:	f0 09 18 00 	cp.b	r9,r8
80003d8c:	5f 02       	sreq	r2
80003d8e:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003d90:	49 97       	lddpc	r7,80003df4 <udi_cdc_multi_getc+0x74>
	buf_sel = udi_cdc_rx_buf_sel[port];
80003d92:	49 a5       	lddpc	r5,80003df8 <udi_cdc_multi_getc+0x78>
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
80003d94:	49 a6       	lddpc	r6,80003dfc <udi_cdc_multi_getc+0x7c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
80003d96:	49 b0       	lddpc	r0,80003e00 <udi_cdc_multi_getc+0x80>
	udi_cdc_rx_pos[port] = pos+1;

	udi_cdc_rx_start(port);
80003d98:	06 91       	mov	r1,r3
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
	buf_sel = udi_cdc_rx_buf_sel[port];
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
		if (!udi_cdc_data_running) {
80003d9a:	49 b4       	lddpc	r4,80003e04 <udi_cdc_multi_getc+0x84>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003d9c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003da0:	d3 03       	ssrf	0x10
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003da2:	8e 08       	ld.sh	r8,r7[0x0]
	buf_sel = udi_cdc_rx_buf_sel[port];
80003da4:	0b 89       	ld.ub	r9,r5[0x0]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003da6:	e6 1a 00 01 	andh	r10,0x1,COH
80003daa:	c0 21       	brne	80003dae <udi_cdc_multi_getc+0x2e>
      cpu_irq_enable();
80003dac:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
	while (pos >= udi_cdc_rx_buf_nb[port][buf_sel]) {
80003dae:	ec 09 04 1a 	ld.sh	r10,r6[r9<<0x1]
80003db2:	f0 0a 19 00 	cp.h	r10,r8
80003db6:	e0 8b 00 06 	brhi	80003dc2 <udi_cdc_multi_getc+0x42>
		if (!udi_cdc_data_running) {
80003dba:	09 88       	ld.ub	r8,r4[0x0]
80003dbc:	58 08       	cp.w	r8,0
80003dbe:	ce f1       	brne	80003d9c <udi_cdc_multi_getc+0x1c>
80003dc0:	c1 48       	rjmp	80003de8 <udi_cdc_multi_getc+0x68>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
80003dc2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003dc6:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003dca:	a7 69       	lsl	r9,0x6
80003dcc:	14 09       	add	r9,r10
80003dce:	e0 09 07 09 	ld.ub	r9,r0[r9]
80003dd2:	12 43       	or	r3,r9
	udi_cdc_rx_pos[port] = pos+1;
80003dd4:	2f f8       	sub	r8,-1
80003dd6:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start(port);
80003dd8:	02 9c       	mov	r12,r1
80003dda:	f0 1f 00 0c 	mcall	80003e08 <udi_cdc_multi_getc+0x88>

	if (b_databit_9) {
80003dde:	58 02       	cp.w	r2,0
80003de0:	c0 50       	breq	80003dea <udi_cdc_multi_getc+0x6a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
80003de2:	a9 63       	lsl	r3,0x8
80003de4:	02 92       	mov	r2,r1
80003de6:	cd bb       	rjmp	80003d9c <udi_cdc_multi_getc+0x1c>
		goto udi_cdc_getc_process_one_byte;
80003de8:	30 03       	mov	r3,0
	}
	return rx_data;
}
80003dea:	06 9c       	mov	r12,r3
80003dec:	d8 32       	popm	r0-r7,pc
80003dee:	00 00       	add	r0,r0
80003df0:	00 00       	add	r0,r0
80003df2:	02 1d       	sub	sp,r1
80003df4:	00 00       	add	r0,r0
80003df6:	04 b6       	st.h	r2++,r6
80003df8:	00 00       	add	r0,r0
80003dfa:	04 bc       	st.h	r2++,r12
80003dfc:	00 00       	add	r0,r0
80003dfe:	04 b0       	st.h	r2++,r0
80003e00:	00 00       	add	r0,r0
80003e02:	04 d0       	st.w	--r2,r0
80003e04:	00 00       	add	r0,r0
80003e06:	04 ba       	st.h	r2++,r10
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c e0       	mov	r0,-50

80003e0c <udi_cdc_getc>:

int udi_cdc_getc(void)
{
80003e0c:	d4 01       	pushm	lr
	return udi_cdc_multi_getc(0);
80003e0e:	30 0c       	mov	r12,0
80003e10:	f0 1f 00 02 	mcall	80003e18 <udi_cdc_getc+0xc>
}
80003e14:	d8 02       	popm	pc
80003e16:	00 00       	add	r0,r0
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	3d 80       	mov	r0,-40

80003e1c <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80003e1c:	d4 01       	pushm	lr
80003e1e:	14 9e       	mov	lr,r10
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80003e20:	58 0c       	cp.w	r12,0
80003e22:	c2 01       	brne	80003e62 <udi_cdc_data_received+0x46>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
80003e24:	49 08       	lddpc	r8,80003e64 <udi_cdc_data_received+0x48>
80003e26:	11 88       	ld.ub	r8,r8[0x0]
80003e28:	58 08       	cp.w	r8,0
80003e2a:	5f 08       	sreq	r8
	if (!n) {
80003e2c:	58 0b       	cp.w	r11,0
80003e2e:	c1 11       	brne	80003e50 <udi_cdc_data_received+0x34>
		udd_ep_run( ep,
80003e30:	f0 0a 15 02 	lsl	r10,r8,0x2
80003e34:	10 0a       	add	r10,r8
80003e36:	a7 6a       	lsl	r10,0x6
80003e38:	fe c8 00 1c 	sub	r8,pc,28
80003e3c:	e0 69 01 40 	mov	r9,320
80003e40:	48 ab       	lddpc	r11,80003e68 <udi_cdc_data_received+0x4c>
80003e42:	f6 0a 00 0a 	add	r10,r11,r10
80003e46:	30 1b       	mov	r11,1
80003e48:	1c 9c       	mov	r12,lr
80003e4a:	f0 1f 00 09 	mcall	80003e6c <udi_cdc_data_received+0x50>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
80003e4e:	d8 02       	popm	pc
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
80003e50:	48 89       	lddpc	r9,80003e70 <udi_cdc_data_received+0x54>
80003e52:	f2 08 0a 1b 	st.h	r9[r8<<0x1],r11
	udi_cdc_rx_trans_ongoing[port] = false;
80003e56:	30 09       	mov	r9,0
80003e58:	48 78       	lddpc	r8,80003e74 <udi_cdc_data_received+0x58>
80003e5a:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start(port);
80003e5c:	30 0c       	mov	r12,0
80003e5e:	f0 1f 00 07 	mcall	80003e78 <udi_cdc_data_received+0x5c>
80003e62:	d8 02       	popm	pc
80003e64:	00 00       	add	r0,r0
80003e66:	04 bc       	st.h	r2++,r12
80003e68:	00 00       	add	r0,r0
80003e6a:	04 d0       	st.w	--r2,r0
80003e6c:	80 00       	ld.sh	r0,r0[0x0]
80003e6e:	2e 34       	sub	r4,-29
80003e70:	00 00       	add	r0,r0
80003e72:	04 b0       	st.h	r2++,r0
80003e74:	00 00       	add	r0,r0
80003e76:	07 50       	ld.sh	r0,--r3
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	3c e0       	mov	r0,-50

80003e7c <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
80003e7c:	eb cd 40 e0 	pushm	r5-r7,lr

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
80003e80:	4c 28       	lddpc	r8,80003f88 <udi_cdc_tx_send+0x10c>
80003e82:	11 88       	ld.ub	r8,r8[0x0]
80003e84:	58 08       	cp.w	r8,0
80003e86:	e0 81 00 7e 	brne	80003f82 <udi_cdc_tx_send+0x106>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80003e8a:	f0 1f 00 41 	mcall	80003f8c <udi_cdc_tx_send+0x110>
80003e8e:	c0 a0       	breq	80003ea2 <udi_cdc_tx_send+0x26>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
80003e90:	4c 08       	lddpc	r8,80003f90 <udi_cdc_tx_send+0x114>
80003e92:	90 07       	ld.sh	r7,r8[0x0]
80003e94:	f0 1f 00 40 	mcall	80003f94 <udi_cdc_tx_send+0x118>
80003e98:	f8 07 19 00 	cp.h	r7,r12
80003e9c:	c0 a1       	brne	80003eb0 <udi_cdc_tx_send+0x34>
80003e9e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
80003ea2:	4b c8       	lddpc	r8,80003f90 <udi_cdc_tx_send+0x114>
80003ea4:	90 07       	ld.sh	r7,r8[0x0]
80003ea6:	f0 1f 00 3d 	mcall	80003f98 <udi_cdc_tx_send+0x11c>
80003eaa:	f8 07 19 00 	cp.h	r7,r12
80003eae:	c6 a0       	breq	80003f82 <udi_cdc_tx_send+0x106>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003eb0:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003eb4:	d3 03       	ssrf	0x10
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
80003eb6:	4b a8       	lddpc	r8,80003f9c <udi_cdc_tx_send+0x120>
80003eb8:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
80003eba:	4b a8       	lddpc	r8,80003fa0 <udi_cdc_tx_send+0x124>
80003ebc:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003ec0:	30 08       	mov	r8,0
80003ec2:	f0 09 19 00 	cp.h	r9,r8
80003ec6:	c2 01       	brne	80003f06 <udi_cdc_tx_send+0x8a>
		sof_zlp_counter++;
80003ec8:	4b 78       	lddpc	r8,80003fa4 <udi_cdc_tx_send+0x128>
80003eca:	90 09       	ld.sh	r9,r8[0x0]
80003ecc:	2f f9       	sub	r9,-1
80003ece:	b0 09       	st.h	r8[0x0],r9
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80003ed0:	f0 1f 00 2f 	mcall	80003f8c <udi_cdc_tx_send+0x110>
80003ed4:	c0 81       	brne	80003ee4 <udi_cdc_tx_send+0x68>
80003ed6:	4b 48       	lddpc	r8,80003fa4 <udi_cdc_tx_send+0x128>
80003ed8:	90 09       	ld.sh	r9,r8[0x0]
80003eda:	36 38       	mov	r8,99
80003edc:	f0 09 19 00 	cp.h	r9,r8
80003ee0:	e0 88 00 0d 	brls	80003efa <udi_cdc_tx_send+0x7e>
80003ee4:	f0 1f 00 2a 	mcall	80003f8c <udi_cdc_tx_send+0x110>
80003ee8:	c0 f0       	breq	80003f06 <udi_cdc_tx_send+0x8a>
80003eea:	4a f8       	lddpc	r8,80003fa4 <udi_cdc_tx_send+0x128>
80003eec:	90 09       	ld.sh	r9,r8[0x0]
80003eee:	e0 68 03 1f 	mov	r8,799
80003ef2:	f0 09 19 00 	cp.h	r9,r8
80003ef6:	e0 8b 00 08 	brhi	80003f06 <udi_cdc_tx_send+0x8a>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003efa:	e6 16 00 01 	andh	r6,0x1,COH
80003efe:	c0 21       	brne	80003f02 <udi_cdc_tx_send+0x86>
      cpu_irq_enable();
80003f00:	d5 03       	csrf	0x10
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
80003f02:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
		}
	}
	sof_zlp_counter = 0;
80003f06:	30 09       	mov	r9,0
80003f08:	4a 78       	lddpc	r8,80003fa4 <udi_cdc_tx_send+0x128>
80003f0a:	b0 09       	st.h	r8[0x0],r9

	if (!udi_cdc_tx_both_buf_to_send[port]) {
80003f0c:	4a 78       	lddpc	r8,80003fa8 <udi_cdc_tx_send+0x12c>
80003f0e:	11 88       	ld.ub	r8,r8[0x0]
80003f10:	58 08       	cp.w	r8,0
80003f12:	c0 61       	brne	80003f1e <udi_cdc_tx_send+0xa2>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80003f14:	58 07       	cp.w	r7,0
80003f16:	5f 09       	sreq	r9
80003f18:	4a 18       	lddpc	r8,80003f9c <udi_cdc_tx_send+0x120>
80003f1a:	b0 89       	st.b	r8[0x0],r9
80003f1c:	c0 38       	rjmp	80003f22 <udi_cdc_tx_send+0xa6>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80003f1e:	58 07       	cp.w	r7,0
80003f20:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing[port] = true;
80003f22:	30 19       	mov	r9,1
80003f24:	49 98       	lddpc	r8,80003f88 <udi_cdc_tx_send+0x10c>
80003f26:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003f28:	e6 16 00 01 	andh	r6,0x1,COH
80003f2c:	c0 21       	brne	80003f30 <udi_cdc_tx_send+0xb4>
      cpu_irq_enable();
80003f2e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003f30:	0e 95       	mov	r5,r7
80003f32:	49 c8       	lddpc	r8,80003fa0 <udi_cdc_tx_send+0x124>
80003f34:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003f38:	e0 68 01 40 	mov	r8,320
80003f3c:	f0 09 19 00 	cp.h	r9,r8
80003f40:	5f 16       	srne	r6
	if (b_short_packet) {
80003f42:	58 06       	cp.w	r6,0
80003f44:	c0 e0       	breq	80003f60 <udi_cdc_tx_send+0xe4>
		if (udd_is_high_speed()) {
80003f46:	f0 1f 00 12 	mcall	80003f8c <udi_cdc_tx_send+0x110>
80003f4a:	c0 60       	breq	80003f56 <udi_cdc_tx_send+0xda>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
80003f4c:	f0 1f 00 12 	mcall	80003f94 <udi_cdc_tx_send+0x118>
80003f50:	49 08       	lddpc	r8,80003f90 <udi_cdc_tx_send+0x114>
80003f52:	b0 0c       	st.h	r8[0x0],r12
80003f54:	c0 98       	rjmp	80003f66 <udi_cdc_tx_send+0xea>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
80003f56:	f0 1f 00 11 	mcall	80003f98 <udi_cdc_tx_send+0x11c>
80003f5a:	48 e8       	lddpc	r8,80003f90 <udi_cdc_tx_send+0x114>
80003f5c:	b0 0c       	st.h	r8[0x0],r12
80003f5e:	c0 48       	rjmp	80003f66 <udi_cdc_tx_send+0xea>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
80003f60:	30 09       	mov	r9,0
80003f62:	48 c8       	lddpc	r8,80003f90 <udi_cdc_tx_send+0x114>
80003f64:	b0 09       	st.h	r8[0x0],r9
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80003f66:	ee 07 00 27 	add	r7,r7,r7<<0x2
80003f6a:	a7 67       	lsl	r7,0x6
80003f6c:	49 08       	lddpc	r8,80003fac <udi_cdc_tx_send+0x130>
80003f6e:	48 d9       	lddpc	r9,80003fa0 <udi_cdc_tx_send+0x124>
80003f70:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003f74:	48 fa       	lddpc	r10,80003fb0 <udi_cdc_tx_send+0x134>
80003f76:	0e 0a       	add	r10,r7
80003f78:	0c 9b       	mov	r11,r6
80003f7a:	e0 6c 00 81 	mov	r12,129
80003f7e:	f0 1f 00 0e 	mcall	80003fb4 <udi_cdc_tx_send+0x138>
80003f82:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003f86:	00 00       	add	r0,r0
80003f88:	00 00       	add	r0,r0
80003f8a:	04 c0       	st.b	r2++,r0
80003f8c:	80 00       	ld.sh	r0,r0[0x0]
80003f8e:	29 b8       	sub	r8,-101
80003f90:	00 00       	add	r0,r0
80003f92:	04 b8       	st.h	r2++,r8
80003f94:	80 00       	ld.sh	r0,r0[0x0]
80003f96:	29 f4       	sub	r4,-97
80003f98:	80 00       	ld.sh	r0,r0[0x0]
80003f9a:	29 e8       	sub	r8,-98
80003f9c:	00 00       	add	r0,r0
80003f9e:	02 28       	rsub	r8,r1
80003fa0:	00 00       	add	r0,r0
80003fa2:	02 2c       	rsub	r12,r1
80003fa4:	00 00       	add	r0,r0
80003fa6:	02 24       	rsub	r4,r1
80003fa8:	00 00       	add	r0,r0
80003faa:	07 54       	ld.sh	r4,--r3
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	3f c8       	mov	r8,-4
80003fb0:	00 00       	add	r0,r0
80003fb2:	02 30       	cp.w	r0,r1
80003fb4:	80 00       	ld.sh	r0,r0[0x0]
80003fb6:	2e 34       	sub	r4,-29

80003fb8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
80003fb8:	d4 01       	pushm	lr
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
80003fba:	30 0c       	mov	r12,0
80003fbc:	f0 1f 00 02 	mcall	80003fc4 <udi_cdc_data_sof_notify+0xc>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
80003fc0:	d8 02       	popm	pc
80003fc2:	00 00       	add	r0,r0
80003fc4:	80 00       	ld.sh	r0,r0[0x0]
80003fc6:	3e 7c       	mov	r12,-25

80003fc8 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80003fc8:	d4 01       	pushm	lr
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80003fca:	58 0c       	cp.w	r12,0
80003fcc:	c1 21       	brne	80003ff0 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
80003fce:	48 a8       	lddpc	r8,80003ff4 <udi_cdc_data_sent+0x2c>
80003fd0:	11 88       	ld.ub	r8,r8[0x0]
80003fd2:	58 08       	cp.w	r8,0
80003fd4:	f9 b9 01 00 	movne	r9,0
80003fd8:	f9 b9 00 02 	moveq	r9,2
80003fdc:	30 08       	mov	r8,0
80003fde:	48 7a       	lddpc	r10,80003ff8 <udi_cdc_data_sent+0x30>
80003fe0:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80003fe4:	48 69       	lddpc	r9,80003ffc <udi_cdc_data_sent+0x34>
80003fe6:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing[port] = false;
80003fe8:	48 69       	lddpc	r9,80004000 <udi_cdc_data_sent+0x38>
80003fea:	b2 88       	st.b	r9[0x0],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
80003fec:	f0 1f 00 06 	mcall	80004004 <udi_cdc_data_sent+0x3c>
80003ff0:	d8 02       	popm	pc
80003ff2:	00 00       	add	r0,r0
80003ff4:	00 00       	add	r0,r0
80003ff6:	02 28       	rsub	r8,r1
80003ff8:	00 00       	add	r0,r0
80003ffa:	02 2c       	rsub	r12,r1
80003ffc:	00 00       	add	r0,r0
80003ffe:	07 54       	ld.sh	r4,--r3
80004000:	00 00       	add	r0,r0
80004002:	04 c0       	st.b	r2++,r0
80004004:	80 00       	ld.sh	r0,r0[0x0]
80004006:	3e 7c       	mov	r12,-25

80004008 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
80004008:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
8000400c:	30 07       	mov	r7,0
8000400e:	49 88       	lddpc	r8,8000406c <udi_cdc_data_enable+0x64>
80004010:	b0 87       	st.b	r8[0x0],r7
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80004012:	49 88       	lddpc	r8,80004070 <udi_cdc_data_enable+0x68>
80004014:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_both_buf_to_send[port] = false;
80004016:	49 88       	lddpc	r8,80004074 <udi_cdc_data_enable+0x6c>
80004018:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_sel[port] = 0;
8000401a:	49 88       	lddpc	r8,80004078 <udi_cdc_data_enable+0x70>
8000401c:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_tx_buf_nb[port][0] = 0;
8000401e:	49 88       	lddpc	r8,8000407c <udi_cdc_data_enable+0x74>
80004020:	30 06       	mov	r6,0
80004022:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_buf_nb[port][1] = 0;
80004024:	b0 16       	st.h	r8[0x2],r6
	udi_cdc_tx_sof_num[port] = 0;
80004026:	49 78       	lddpc	r8,80004080 <udi_cdc_data_enable+0x78>
80004028:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_tx_send(port);
8000402a:	30 0c       	mov	r12,0
8000402c:	f0 1f 00 16 	mcall	80004084 <udi_cdc_data_enable+0x7c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80004030:	49 68       	lddpc	r8,80004088 <udi_cdc_data_enable+0x80>
80004032:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_sel[port] = 0;
80004034:	49 68       	lddpc	r8,8000408c <udi_cdc_data_enable+0x84>
80004036:	b0 87       	st.b	r8[0x0],r7
	udi_cdc_rx_buf_nb[port][0] = 0;
80004038:	49 68       	lddpc	r8,80004090 <udi_cdc_data_enable+0x88>
8000403a:	b0 06       	st.h	r8[0x0],r6
	udi_cdc_rx_pos[port] = 0;
8000403c:	49 68       	lddpc	r8,80004094 <udi_cdc_data_enable+0x8c>
8000403e:	b0 06       	st.h	r8[0x0],r6
	if (!udi_cdc_rx_start(port)) {
80004040:	30 0c       	mov	r12,0
80004042:	f0 1f 00 16 	mcall	80004098 <udi_cdc_data_enable+0x90>
80004046:	c1 00       	breq	80004066 <udi_cdc_data_enable+0x5e>
		return false;
	}
	udi_cdc_nb_data_enabled++;
80004048:	48 98       	lddpc	r8,8000406c <udi_cdc_data_enable+0x64>
8000404a:	11 89       	ld.ub	r9,r8[0x0]
8000404c:	2f f9       	sub	r9,-1
8000404e:	b0 89       	st.b	r8[0x0],r9
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80004050:	11 89       	ld.ub	r9,r8[0x0]
80004052:	30 18       	mov	r8,1
80004054:	f0 09 18 00 	cp.b	r9,r8
80004058:	c0 30       	breq	8000405e <udi_cdc_data_enable+0x56>
8000405a:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
		udi_cdc_data_running = true;
8000405e:	30 19       	mov	r9,1
80004060:	48 f8       	lddpc	r8,8000409c <udi_cdc_data_enable+0x94>
80004062:	b0 89       	st.b	r8[0x0],r9
80004064:	30 1c       	mov	r12,1
	}
	return true;
}
80004066:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000406a:	00 00       	add	r0,r0
8000406c:	00 00       	add	r0,r0
8000406e:	02 26       	rsub	r6,r1
80004070:	00 00       	add	r0,r0
80004072:	04 c0       	st.b	r2++,r0
80004074:	00 00       	add	r0,r0
80004076:	07 54       	ld.sh	r4,--r3
80004078:	00 00       	add	r0,r0
8000407a:	02 28       	rsub	r8,r1
8000407c:	00 00       	add	r0,r0
8000407e:	02 2c       	rsub	r12,r1
80004080:	00 00       	add	r0,r0
80004082:	04 b8       	st.h	r2++,r8
80004084:	80 00       	ld.sh	r0,r0[0x0]
80004086:	3e 7c       	mov	r12,-25
80004088:	00 00       	add	r0,r0
8000408a:	07 50       	ld.sh	r0,--r3
8000408c:	00 00       	add	r0,r0
8000408e:	04 bc       	st.h	r2++,r12
80004090:	00 00       	add	r0,r0
80004092:	04 b0       	st.h	r2++,r0
80004094:	00 00       	add	r0,r0
80004096:	04 b6       	st.h	r2++,r6
80004098:	80 00       	ld.sh	r0,r0[0x0]
8000409a:	3c e0       	mov	r0,-50
8000409c:	00 00       	add	r0,r0
8000409e:	04 ba       	st.h	r2++,r10

800040a0 <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
800040a0:	d4 01       	pushm	lr
	uint8_t port = udi_cdc_setup_to_port();
800040a2:	f0 1f 00 29 	mcall	80004144 <udi_cdc_comm_setup+0xa4>

	if (Udd_setup_is_in()) {
800040a6:	4a 98       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
800040a8:	11 88       	ld.ub	r8,r8[0x0]
800040aa:	30 09       	mov	r9,0
800040ac:	f2 08 18 00 	cp.b	r8,r9
800040b0:	c1 d4       	brge	800040ea <udi_cdc_comm_setup+0x4a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800040b2:	e2 18 00 60 	andl	r8,0x60,COH
800040b6:	e0 48 00 20 	cp.w	r8,32
800040ba:	c4 31       	brne	80004140 <udi_cdc_comm_setup+0xa0>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800040bc:	4a 38       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
800040be:	11 99       	ld.ub	r9,r8[0x1]
800040c0:	32 18       	mov	r8,33
800040c2:	f0 09 18 00 	cp.b	r9,r8
800040c6:	c3 d1       	brne	80004140 <udi_cdc_comm_setup+0xa0>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
800040c8:	4a 08       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
800040ca:	90 39       	ld.sh	r9,r8[0x6]
800040cc:	30 78       	mov	r8,7
800040ce:	f0 09 19 00 	cp.h	r9,r8
800040d2:	c3 71       	brne	80004140 <udi_cdc_comm_setup+0xa0>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
800040d4:	49 d8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
800040d6:	f8 09 15 03 	lsl	r9,r12,0x3
800040da:	f2 0c 01 0c 	sub	r12,r9,r12
800040de:	49 c9       	lddpc	r9,8000414c <udi_cdc_comm_setup+0xac>
800040e0:	18 09       	add	r9,r12
800040e2:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
800040e4:	30 79       	mov	r9,7
800040e6:	b0 69       	st.h	r8[0xc],r9
800040e8:	da 0a       	popm	pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800040ea:	e2 18 00 60 	andl	r8,0x60,COH
800040ee:	e0 48 00 20 	cp.w	r8,32
800040f2:	c2 71       	brne	80004140 <udi_cdc_comm_setup+0xa0>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
800040f4:	49 58       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
800040f6:	11 98       	ld.ub	r8,r8[0x1]
800040f8:	32 09       	mov	r9,32
800040fa:	f2 08 18 00 	cp.b	r8,r9
800040fe:	c0 60       	breq	8000410a <udi_cdc_comm_setup+0x6a>
80004100:	32 29       	mov	r9,34
80004102:	f2 08 18 00 	cp.b	r8,r9
80004106:	c1 d1       	brne	80004140 <udi_cdc_comm_setup+0xa0>
80004108:	c1 58       	rjmp	80004132 <udi_cdc_comm_setup+0x92>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000410a:	49 08       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
8000410c:	90 39       	ld.sh	r9,r8[0x6]
8000410e:	30 78       	mov	r8,7
80004110:	f0 09 19 00 	cp.h	r9,r8
80004114:	c1 61       	brne	80004140 <udi_cdc_comm_setup+0xa0>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
80004116:	48 d8       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
80004118:	48 e9       	lddpc	r9,80004150 <udi_cdc_comm_setup+0xb0>
8000411a:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
8000411c:	f8 09 15 03 	lsl	r9,r12,0x3
80004120:	f2 0c 01 0c 	sub	r12,r9,r12
80004124:	48 a9       	lddpc	r9,8000414c <udi_cdc_comm_setup+0xac>
80004126:	f2 0c 00 0c 	add	r12,r9,r12
8000412a:	91 2c       	st.w	r8[0x8],r12
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
8000412c:	30 79       	mov	r9,7
8000412e:	b0 69       	st.h	r8[0xc],r9
80004130:	da 0a       	popm	pc,r12=1
						sizeof(usb_cdc_line_coding_t);
				return true;
			case USB_REQ_CDC_SET_CONTROL_LINE_STATE:
				// According cdc spec 1.1 chapter 6.2.14
				UDI_CDC_SET_DTR_EXT(port, (0 !=
80004132:	48 68       	lddpc	r8,80004148 <udi_cdc_comm_setup+0xa8>
80004134:	90 9b       	ld.uh	r11,r8[0x2]
80004136:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
8000413a:	f0 1f 00 07 	mcall	80004154 <udi_cdc_comm_setup+0xb4>
8000413e:	da 0a       	popm	pc,r12=1
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
80004140:	d8 0a       	popm	pc,r12=0
80004142:	00 00       	add	r0,r0
80004144:	80 00       	ld.sh	r0,r0[0x0]
80004146:	3b 78       	mov	r8,-73
80004148:	00 00       	add	r0,r0
8000414a:	07 90       	ld.ub	r0,r3[0x1]
8000414c:	00 00       	add	r0,r0
8000414e:	02 1d       	sub	sp,r1
80004150:	80 00       	ld.sh	r0,r0[0x0]
80004152:	41 58       	lddsp	r8,sp[0x54]
80004154:	80 00       	ld.sh	r0,r0[0x0]
80004156:	4a e4       	lddpc	r4,8000420c <udi_cdc_comm_enable+0x6c>

80004158 <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
80004158:	d4 01       	pushm	lr
	uint8_t port = udi_cdc_setup_to_port();
8000415a:	f0 1f 00 06 	mcall	80004170 <udi_cdc_line_coding_received+0x18>
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
8000415e:	f8 08 15 03 	lsl	r8,r12,0x3
80004162:	18 18       	sub	r8,r12
80004164:	48 4b       	lddpc	r11,80004174 <udi_cdc_line_coding_received+0x1c>
80004166:	10 0b       	add	r11,r8
80004168:	f0 1f 00 04 	mcall	80004178 <udi_cdc_line_coding_received+0x20>
}
8000416c:	d8 02       	popm	pc
8000416e:	00 00       	add	r0,r0
80004170:	80 00       	ld.sh	r0,r0[0x0]
80004172:	3b 78       	mov	r8,-73
80004174:	00 00       	add	r0,r0
80004176:	02 1d       	sub	sp,r1
80004178:	80 00       	ld.sh	r0,r0[0x0]
8000417a:	53 9a       	stdsp	sp[0xe4],r10

8000417c <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
8000417c:	d4 01       	pushm	lr
	uint8_t port;
	UNUSED(port);

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
8000417e:	48 68       	lddpc	r8,80004194 <udi_cdc_data_disable+0x18>
80004180:	11 89       	ld.ub	r9,r8[0x0]
80004182:	20 19       	sub	r9,1
80004184:	b0 89       	st.b	r8[0x0],r9
	port = udi_cdc_nb_data_enabled;
80004186:	11 8c       	ld.ub	r12,r8[0x0]
	UDI_CDC_DISABLE_EXT(port);
80004188:	f0 1f 00 04 	mcall	80004198 <udi_cdc_data_disable+0x1c>
	udi_cdc_data_running = false;
8000418c:	30 09       	mov	r9,0
8000418e:	48 48       	lddpc	r8,8000419c <udi_cdc_data_disable+0x20>
80004190:	b0 89       	st.b	r8[0x0],r9
}
80004192:	d8 02       	popm	pc
80004194:	00 00       	add	r0,r0
80004196:	02 26       	rsub	r6,r1
80004198:	80 00       	ld.sh	r0,r0[0x0]
8000419a:	4a d8       	lddpc	r8,8000424c <udc_sof_notify+0x34>
8000419c:	00 00       	add	r0,r0
8000419e:	04 ba       	st.h	r2++,r10

800041a0 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
800041a0:	eb cd 40 80 	pushm	r7,lr
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
800041a4:	30 0a       	mov	r10,0
800041a6:	49 78       	lddpc	r8,80004200 <udi_cdc_comm_enable+0x60>
800041a8:	b0 8a       	st.b	r8[0x0],r10
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
800041aa:	30 09       	mov	r9,0
800041ac:	49 68       	lddpc	r8,80004204 <udi_cdc_comm_enable+0x64>
800041ae:	b0 09       	st.h	r8[0x0],r9

	uid_cdc_state_msg[port].header.bmRequestType =
800041b0:	49 68       	lddpc	r8,80004208 <udi_cdc_comm_enable+0x68>
800041b2:	3a 1b       	mov	r11,-95
800041b4:	b0 8b       	st.b	r8[0x0],r11
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
800041b6:	32 0b       	mov	r11,32
800041b8:	b0 9b       	st.b	r8[0x1],r11
	uid_cdc_state_msg[port].header.wValue = LE16(0);
800041ba:	b0 19       	st.h	r8[0x2],r9
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
800041bc:	b0 29       	st.h	r8[0x4],r9
	uid_cdc_state_msg[port].header.wLength = LE16(2);
800041be:	e0 6b 02 00 	mov	r11,512
800041c2:	b0 3b       	st.h	r8[0x6],r11
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
800041c4:	b0 49       	st.h	r8[0x8],r9

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
800041c6:	49 2b       	lddpc	r11,8000420c <udi_cdc_comm_enable+0x6c>
800041c8:	30 07       	mov	r7,0
800041ca:	b6 89       	st.b	r11[0x0],r9
800041cc:	3c 28       	mov	r8,-62
800041ce:	b6 98       	st.b	r11[0x1],r8
800041d0:	30 18       	mov	r8,1
800041d2:	b6 a8       	st.b	r11[0x2],r8
800041d4:	b6 ba       	st.b	r11[0x3],r10
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
800041d6:	b6 ca       	st.b	r11[0x4],r10
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
800041d8:	b6 da       	st.b	r11[0x5],r10
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
800041da:	30 88       	mov	r8,8
800041dc:	b6 e8       	st.b	r11[0x6],r8
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
800041de:	0e 9c       	mov	r12,r7
800041e0:	f0 1f 00 0c 	mcall	80004210 <udi_cdc_comm_enable+0x70>
	if (!UDI_CDC_ENABLE_EXT(port)) {
800041e4:	0e 9c       	mov	r12,r7
800041e6:	f0 1f 00 0c 	mcall	80004214 <udi_cdc_comm_enable+0x74>
800041ea:	c0 41       	brne	800041f2 <udi_cdc_comm_enable+0x52>
800041ec:	0e 9c       	mov	r12,r7
800041ee:	e3 cd 80 80 	ldm	sp++,r7,pc
		return false;
	}
	udi_cdc_nb_comm_enabled++;
800041f2:	48 48       	lddpc	r8,80004200 <udi_cdc_comm_enable+0x60>
800041f4:	11 89       	ld.ub	r9,r8[0x0]
800041f6:	2f f9       	sub	r9,-1
800041f8:	b0 89       	st.b	r8[0x0],r9
800041fa:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800041fe:	00 00       	add	r0,r0
80004200:	00 00       	add	r0,r0
80004202:	04 b4       	st.h	r2++,r4
80004204:	00 00       	add	r0,r0
80004206:	07 58       	ld.sh	r8,--r3
80004208:	00 00       	add	r0,r0
8000420a:	04 c4       	st.b	r2++,r4
8000420c:	00 00       	add	r0,r0
8000420e:	02 1d       	sub	sp,r1
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	53 9a       	stdsp	sp[0xe4],r10
80004214:	80 00       	ld.sh	r0,r0[0x0]
80004216:	4a cc       	lddpc	r12,800042c4 <udc_update_iface_desc+0x3c>

80004218 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80004218:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
8000421c:	49 18       	lddpc	r8,80004260 <udc_sof_notify+0x48>
8000421e:	11 89       	ld.ub	r9,r8[0x0]
80004220:	30 08       	mov	r8,0
80004222:	f0 09 18 00 	cp.b	r9,r8
80004226:	c1 b0       	breq	8000425c <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004228:	48 f8       	lddpc	r8,80004264 <udc_sof_notify+0x4c>
8000422a:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000422c:	70 09       	ld.w	r9,r8[0x0]
8000422e:	13 ca       	ld.ub	r10,r9[0x4]
80004230:	30 09       	mov	r9,0
80004232:	f2 0a 18 00 	cp.b	r10,r9
80004236:	c1 30       	breq	8000425c <udc_sof_notify+0x44>
80004238:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000423a:	48 b6       	lddpc	r6,80004264 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000423c:	70 18       	ld.w	r8,r8[0x4]
8000423e:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80004242:	70 48       	ld.w	r8,r8[0x10]
80004244:	58 08       	cp.w	r8,0
80004246:	c0 20       	breq	8000424a <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80004248:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000424a:	2f f7       	sub	r7,-1
8000424c:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000424e:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80004250:	70 09       	ld.w	r9,r8[0x0]
80004252:	13 c9       	ld.ub	r9,r9[0x4]
80004254:	ee 09 18 00 	cp.b	r9,r7
80004258:	fe 9b ff f2 	brhi	8000423c <udc_sof_notify+0x24>
8000425c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004260:	00 00       	add	r0,r0
80004262:	07 66       	ld.uh	r6,--r3
80004264:	00 00       	add	r0,r0
80004266:	07 5c       	ld.sh	r12,--r3

80004268 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80004268:	48 78       	lddpc	r8,80004284 <udc_get_eof_conf+0x1c>
8000426a:	70 08       	ld.w	r8,r8[0x0]
8000426c:	70 08       	ld.w	r8,r8[0x0]
8000426e:	11 aa       	ld.ub	r10,r8[0x2]
80004270:	11 b9       	ld.ub	r9,r8[0x3]
80004272:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80004276:	5c c9       	swap.bh	r9
80004278:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
8000427c:	f0 0c 00 0c 	add	r12,r8,r12
80004280:	5e fc       	retal	r12
80004282:	00 00       	add	r0,r0
80004284:	00 00       	add	r0,r0
80004286:	07 5c       	ld.sh	r12,--r3

80004288 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80004288:	eb cd 40 e0 	pushm	r5-r7,lr
8000428c:	18 97       	mov	r7,r12
8000428e:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80004290:	49 b8       	lddpc	r8,800042fc <udc_update_iface_desc+0x74>
80004292:	11 89       	ld.ub	r9,r8[0x0]
80004294:	30 08       	mov	r8,0
80004296:	f0 09 18 00 	cp.b	r9,r8
8000429a:	c2 f0       	breq	800042f8 <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000429c:	49 98       	lddpc	r8,80004300 <udc_update_iface_desc+0x78>
8000429e:	70 08       	ld.w	r8,r8[0x0]
800042a0:	70 08       	ld.w	r8,r8[0x0]
800042a2:	11 c9       	ld.ub	r9,r8[0x4]
800042a4:	18 9e       	mov	lr,r12
800042a6:	f8 09 18 00 	cp.b	r9,r12
800042aa:	e0 88 00 27 	brls	800042f8 <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800042ae:	49 65       	lddpc	r5,80004304 <udc_update_iface_desc+0x7c>
800042b0:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
800042b2:	f0 1f 00 16 	mcall	80004308 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
800042b6:	6a 08       	ld.w	r8,r5[0x0]
800042b8:	10 3c       	cp.w	r12,r8
800042ba:	e0 88 00 1f 	brls	800042f8 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800042be:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800042c0:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800042c2:	11 9a       	ld.ub	r10,r8[0x1]
800042c4:	f6 0a 18 00 	cp.b	r10,r11
800042c8:	c0 a1       	brne	800042dc <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
800042ca:	11 aa       	ld.ub	r10,r8[0x2]
800042cc:	0e 9e       	mov	lr,r7
800042ce:	ee 0a 18 00 	cp.b	r10,r7
800042d2:	c0 51       	brne	800042dc <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
800042d4:	11 ba       	ld.ub	r10,r8[0x3]
800042d6:	ec 0a 18 00 	cp.b	r10,r6
800042da:	c0 b0       	breq	800042f0 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
800042dc:	13 88       	ld.ub	r8,r9[0x0]
800042de:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800042e2:	10 3c       	cp.w	r12,r8
800042e4:	fe 9b ff ee 	brhi	800042c0 <udc_update_iface_desc+0x38>
800042e8:	48 79       	lddpc	r9,80004304 <udc_update_iface_desc+0x7c>
800042ea:	93 08       	st.w	r9[0x0],r8
800042ec:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800042f0:	48 59       	lddpc	r9,80004304 <udc_update_iface_desc+0x7c>
800042f2:	93 08       	st.w	r9[0x0],r8
800042f4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800042f8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800042fc:	00 00       	add	r0,r0
800042fe:	07 66       	ld.uh	r6,--r3
80004300:	00 00       	add	r0,r0
80004302:	07 5c       	ld.sh	r12,--r3
80004304:	00 00       	add	r0,r0
80004306:	07 68       	ld.uh	r8,--r3
80004308:	80 00       	ld.sh	r0,r0[0x0]
8000430a:	42 68       	lddsp	r8,sp[0x98]

8000430c <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000430c:	eb cd 40 c0 	pushm	r6-r7,lr
80004310:	18 96       	mov	r6,r12
80004312:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80004314:	f0 1f 00 11 	mcall	80004358 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80004318:	0d 88       	ld.ub	r8,r6[0x0]
8000431a:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000431c:	0c 3c       	cp.w	r12,r6
8000431e:	e0 88 00 19 	brls	80004350 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80004322:	0d 98       	ld.ub	r8,r6[0x1]
80004324:	30 49       	mov	r9,4
80004326:	f2 08 18 00 	cp.b	r8,r9
8000432a:	c1 30       	breq	80004350 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000432c:	ee 08 18 00 	cp.b	r8,r7
80004330:	c0 a1       	brne	80004344 <udc_next_desc_in_iface+0x38>
80004332:	c1 08       	rjmp	80004352 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80004334:	0d 98       	ld.ub	r8,r6[0x1]
80004336:	f2 08 18 00 	cp.b	r8,r9
8000433a:	c0 b0       	breq	80004350 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000433c:	ee 08 18 00 	cp.b	r8,r7
80004340:	c0 31       	brne	80004346 <udc_next_desc_in_iface+0x3a>
80004342:	c0 88       	rjmp	80004352 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80004344:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80004346:	0d 88       	ld.ub	r8,r6[0x0]
80004348:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000434a:	0c 3c       	cp.w	r12,r6
8000434c:	fe 9b ff f4 	brhi	80004334 <udc_next_desc_in_iface+0x28>
80004350:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80004352:	0c 9c       	mov	r12,r6
80004354:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004358:	80 00       	ld.sh	r0,r0[0x0]
8000435a:	42 68       	lddsp	r8,sp[0x98]

8000435c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000435c:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000435e:	48 48       	lddpc	r8,8000436c <udc_valid_address+0x10>
80004360:	11 bc       	ld.ub	r12,r8[0x3]
80004362:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80004366:	f0 1f 00 03 	mcall	80004370 <udc_valid_address+0x14>
}
8000436a:	d8 02       	popm	pc
8000436c:	00 00       	add	r0,r0
8000436e:	07 90       	ld.ub	r0,r3[0x1]
80004370:	80 00       	ld.sh	r0,r0[0x0]
80004372:	29 ba       	sub	r10,-101

80004374 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80004374:	eb cd 40 e0 	pushm	r5-r7,lr
80004378:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000437a:	f0 1f 00 12 	mcall	800043c0 <udc_iface_enable+0x4c>
8000437e:	c1 f0       	breq	800043bc <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004380:	49 18       	lddpc	r8,800043c4 <udc_iface_enable+0x50>
80004382:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004384:	30 56       	mov	r6,5
80004386:	0c 9b       	mov	r11,r6
80004388:	0e 9c       	mov	r12,r7
8000438a:	f0 1f 00 10 	mcall	800043c8 <udc_iface_enable+0x54>
8000438e:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80004390:	c0 d0       	breq	800043aa <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80004392:	19 ca       	ld.ub	r10,r12[0x4]
80004394:	19 d8       	ld.ub	r8,r12[0x5]
80004396:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000439a:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000439c:	5c 7a       	castu.h	r10
8000439e:	19 bb       	ld.ub	r11,r12[0x3]
800043a0:	19 ac       	ld.ub	r12,r12[0x2]
800043a2:	f0 1f 00 0b 	mcall	800043cc <udc_iface_enable+0x58>
800043a6:	cf 01       	brne	80004386 <udc_iface_enable+0x12>
800043a8:	c0 a8       	rjmp	800043bc <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
800043aa:	48 a8       	lddpc	r8,800043d0 <udc_iface_enable+0x5c>
800043ac:	70 08       	ld.w	r8,r8[0x0]
800043ae:	70 18       	ld.w	r8,r8[0x4]
800043b0:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
800043b4:	70 0c       	ld.w	r12,r8[0x0]
800043b6:	5d 1c       	icall	r12
800043b8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800043bc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800043c0:	80 00       	ld.sh	r0,r0[0x0]
800043c2:	42 88       	lddsp	r8,sp[0xa0]
800043c4:	00 00       	add	r0,r0
800043c6:	07 68       	ld.uh	r8,--r3
800043c8:	80 00       	ld.sh	r0,r0[0x0]
800043ca:	43 0c       	lddsp	r12,sp[0xc0]
800043cc:	80 00       	ld.sh	r0,r0[0x0]
800043ce:	30 ec       	mov	r12,14
800043d0:	00 00       	add	r0,r0
800043d2:	07 5c       	ld.sh	r12,--r3

800043d4 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
800043d4:	eb cd 40 e0 	pushm	r5-r7,lr
800043d8:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800043da:	18 97       	mov	r7,r12
800043dc:	30 0b       	mov	r11,0
800043de:	f0 1f 00 12 	mcall	80004424 <udc_iface_disable+0x50>
800043e2:	c1 e0       	breq	8000441e <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800043e4:	49 18       	lddpc	r8,80004428 <udc_iface_disable+0x54>
800043e6:	70 08       	ld.w	r8,r8[0x0]
800043e8:	70 18       	ld.w	r8,r8[0x4]
800043ea:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800043ee:	6a 3c       	ld.w	r12,r5[0xc]
800043f0:	5d 1c       	icall	r12
800043f2:	18 9b       	mov	r11,r12
800043f4:	0c 9c       	mov	r12,r6
800043f6:	f0 1f 00 0c 	mcall	80004424 <udc_iface_disable+0x50>
800043fa:	c1 20       	breq	8000441e <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800043fc:	48 c8       	lddpc	r8,8000442c <udc_iface_disable+0x58>
800043fe:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004400:	30 56       	mov	r6,5
80004402:	0c 9b       	mov	r11,r6
80004404:	0e 9c       	mov	r12,r7
80004406:	f0 1f 00 0b 	mcall	80004430 <udc_iface_disable+0x5c>
8000440a:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000440c:	c0 50       	breq	80004416 <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000440e:	19 ac       	ld.ub	r12,r12[0x2]
80004410:	f0 1f 00 09 	mcall	80004434 <udc_iface_disable+0x60>
		}
80004414:	cf 7b       	rjmp	80004402 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80004416:	6a 18       	ld.w	r8,r5[0x4]
80004418:	5d 18       	icall	r8
8000441a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
8000441e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004422:	00 00       	add	r0,r0
80004424:	80 00       	ld.sh	r0,r0[0x0]
80004426:	42 88       	lddsp	r8,sp[0xa0]
80004428:	00 00       	add	r0,r0
8000442a:	07 5c       	ld.sh	r12,--r3
8000442c:	00 00       	add	r0,r0
8000442e:	07 68       	ld.uh	r8,--r3
80004430:	80 00       	ld.sh	r0,r0[0x0]
80004432:	43 0c       	lddsp	r12,sp[0xc0]
80004434:	80 00       	ld.sh	r0,r0[0x0]
80004436:	2c 84       	sub	r4,-56

80004438 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80004438:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
8000443c:	49 38       	lddpc	r8,80004488 <udc_reset+0x50>
8000443e:	11 89       	ld.ub	r9,r8[0x0]
80004440:	30 08       	mov	r8,0
80004442:	f0 09 18 00 	cp.b	r9,r8
80004446:	c1 70       	breq	80004474 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004448:	49 18       	lddpc	r8,8000448c <udc_reset+0x54>
8000444a:	70 08       	ld.w	r8,r8[0x0]
8000444c:	70 08       	ld.w	r8,r8[0x0]
8000444e:	11 c9       	ld.ub	r9,r8[0x4]
80004450:	30 08       	mov	r8,0
80004452:	f0 09 18 00 	cp.b	r9,r8
80004456:	c0 f0       	breq	80004474 <udc_reset+0x3c>
80004458:	30 07       	mov	r7,0
8000445a:	48 d6       	lddpc	r6,8000448c <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
8000445c:	0e 9c       	mov	r12,r7
8000445e:	f0 1f 00 0d 	mcall	80004490 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004462:	2f f7       	sub	r7,-1
80004464:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80004466:	6c 08       	ld.w	r8,r6[0x0]
80004468:	70 08       	ld.w	r8,r8[0x0]
8000446a:	11 c8       	ld.ub	r8,r8[0x4]
8000446c:	ee 08 18 00 	cp.b	r8,r7
80004470:	fe 9b ff f6 	brhi	8000445c <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80004474:	30 09       	mov	r9,0
80004476:	48 58       	lddpc	r8,80004488 <udc_reset+0x50>
80004478:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000447a:	e0 69 01 00 	mov	r9,256
8000447e:	48 68       	lddpc	r8,80004494 <udc_reset+0x5c>
80004480:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80004482:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004486:	00 00       	add	r0,r0
80004488:	00 00       	add	r0,r0
8000448a:	07 66       	ld.uh	r6,--r3
8000448c:	00 00       	add	r0,r0
8000448e:	07 5c       	ld.sh	r12,--r3
80004490:	80 00       	ld.sh	r0,r0[0x0]
80004492:	43 d4       	lddsp	r4,sp[0xf4]
80004494:	00 00       	add	r0,r0
80004496:	07 64       	ld.uh	r4,--r3

80004498 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80004498:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000449c:	fe f8 04 a4 	ld.w	r8,pc[1188]
800044a0:	30 09       	mov	r9,0
800044a2:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
800044a4:	30 0a       	mov	r10,0
800044a6:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
800044a8:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
800044aa:	11 88       	ld.ub	r8,r8[0x0]
800044ac:	10 9a       	mov	r10,r8
800044ae:	f2 08 18 00 	cp.b	r8,r9
800044b2:	c0 94       	brge	800044c4 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
800044b4:	fe f9 04 8c 	ld.w	r9,pc[1164]
800044b8:	92 3b       	ld.sh	r11,r9[0x6]
800044ba:	30 09       	mov	r9,0
800044bc:	f2 0b 19 00 	cp.h	r11,r9
800044c0:	e0 80 02 3c 	breq	80004938 <udc_process_setup+0x4a0>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
800044c4:	10 99       	mov	r9,r8
800044c6:	e2 19 00 60 	andl	r9,0x60,COH
800044ca:	e0 81 01 e0 	brne	8000488a <udc_process_setup+0x3f2>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
800044ce:	f2 0a 18 00 	cp.b	r10,r9
800044d2:	e0 84 01 02 	brge	800046d6 <udc_process_setup+0x23e>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
800044d6:	fe f9 04 6a 	ld.w	r9,pc[1130]
800044da:	92 39       	ld.sh	r9,r9[0x6]
800044dc:	58 09       	cp.w	r9,0
800044de:	e0 80 01 d6 	breq	8000488a <udc_process_setup+0x3f2>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800044e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800044e6:	e0 81 00 9f 	brne	80004624 <udc_process_setup+0x18c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800044ea:	fe fa 04 56 	ld.w	r10,pc[1110]
800044ee:	15 9a       	ld.ub	r10,r10[0x1]
800044f0:	30 6b       	mov	r11,6
800044f2:	f6 0a 18 00 	cp.b	r10,r11
800044f6:	c1 a0       	breq	8000452a <udc_process_setup+0x92>
800044f8:	30 8b       	mov	r11,8
800044fa:	f6 0a 18 00 	cp.b	r10,r11
800044fe:	e0 80 00 86 	breq	8000460a <udc_process_setup+0x172>
80004502:	30 0b       	mov	r11,0
80004504:	f6 0a 18 00 	cp.b	r10,r11
80004508:	e0 81 00 8e 	brne	80004624 <udc_process_setup+0x18c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000450c:	30 28       	mov	r8,2
8000450e:	f0 09 19 00 	cp.h	r9,r8
80004512:	c0 40       	breq	8000451a <udc_process_setup+0x82>
80004514:	30 0c       	mov	r12,0
80004516:	e0 8f 01 b8 	bral	80004886 <udc_process_setup+0x3ee>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000451a:	30 2b       	mov	r11,2
8000451c:	fe fc 04 28 	ld.w	r12,pc[1064]
80004520:	f0 1f 01 0a 	mcall	80004948 <udc_process_setup+0x4b0>
80004524:	30 1c       	mov	r12,1
80004526:	e0 8f 01 b0 	bral	80004886 <udc_process_setup+0x3ee>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000452a:	fe f8 04 16 	ld.w	r8,pc[1046]
8000452e:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80004530:	f2 08 16 08 	lsr	r8,r9,0x8
80004534:	30 2a       	mov	r10,2
80004536:	f4 08 18 00 	cp.b	r8,r10
8000453a:	c1 00       	breq	8000455a <udc_process_setup+0xc2>
8000453c:	30 3a       	mov	r10,3
8000453e:	f4 08 18 00 	cp.b	r8,r10
80004542:	c2 a0       	breq	80004596 <udc_process_setup+0xfe>
80004544:	30 19       	mov	r9,1
80004546:	f2 08 18 00 	cp.b	r8,r9
8000454a:	c5 e1       	brne	80004606 <udc_process_setup+0x16e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000454c:	fe f8 04 00 	ld.w	r8,pc[1024]
80004550:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80004552:	19 8b       	ld.ub	r11,r12[0x0]
80004554:	f0 1f 00 fd 	mcall	80004948 <udc_process_setup+0x4b0>
80004558:	c4 78       	rjmp	800045e6 <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000455a:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000455c:	fe f8 03 f0 	ld.w	r8,pc[1008]
80004560:	70 08       	ld.w	r8,r8[0x0]
80004562:	f1 38 00 11 	ld.ub	r8,r8[17]
80004566:	f2 08 18 00 	cp.b	r8,r9
8000456a:	e0 88 00 4e 	brls	80004606 <udc_process_setup+0x16e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000456e:	fe f8 03 de 	ld.w	r8,pc[990]
80004572:	70 18       	ld.w	r8,r8[0x4]
80004574:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80004578:	19 a9       	ld.ub	r9,r12[0x2]
8000457a:	19 b8       	ld.ub	r8,r12[0x3]
8000457c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004580:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80004582:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80004586:	f0 1f 00 f1 	mcall	80004948 <udc_process_setup+0x4b0>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000458a:	fe f8 03 b6 	ld.w	r8,pc[950]
8000458e:	70 28       	ld.w	r8,r8[0x8]
80004590:	30 29       	mov	r9,2
80004592:	b0 99       	st.b	r8[0x1],r9
80004594:	c2 98       	rjmp	800045e6 <udc_process_setup+0x14e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80004596:	5c 59       	castu.b	r9
80004598:	58 19       	cp.w	r9,1
8000459a:	c1 00       	breq	800045ba <udc_process_setup+0x122>
8000459c:	58 29       	cp.w	r9,2
8000459e:	c0 40       	breq	800045a6 <udc_process_setup+0x10e>
800045a0:	58 09       	cp.w	r9,0
800045a2:	c0 60       	breq	800045ae <udc_process_setup+0x116>
800045a4:	c3 18       	rjmp	80004606 <udc_process_setup+0x16e>
800045a6:	fe fc 03 aa 	ld.w	r12,pc[938]
800045aa:	30 fb       	mov	r11,15
800045ac:	c0 a8       	rjmp	800045c0 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
800045ae:	30 4b       	mov	r11,4
800045b0:	fe fc 03 a4 	ld.w	r12,pc[932]
800045b4:	f0 1f 00 e5 	mcall	80004948 <udc_process_setup+0x4b0>
800045b8:	c1 78       	rjmp	800045e6 <udc_process_setup+0x14e>
800045ba:	fe fc 03 9e 	ld.w	r12,pc[926]
800045be:	30 9b       	mov	r11,9
800045c0:	fe fa 03 9c 	ld.w	r10,pc[924]
800045c4:	2f ea       	sub	r10,-2
800045c6:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
800045c8:	11 39       	ld.ub	r9,r8++
800045ca:	5c c9       	swap.bh	r9
800045cc:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
800045ce:	f0 0c 01 09 	sub	r9,r8,r12
800045d2:	f6 09 18 00 	cp.b	r9,r11
800045d6:	cf 93       	brcs	800045c8 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
800045d8:	a1 7b       	lsl	r11,0x1
800045da:	2f eb       	sub	r11,-2
800045dc:	fe fc 03 80 	ld.w	r12,pc[896]
800045e0:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
800045e2:	f0 1f 00 da 	mcall	80004948 <udc_process_setup+0x4b0>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
800045e6:	fe f8 03 5a 	ld.w	r8,pc[858]
800045ea:	90 39       	ld.sh	r9,r8[0x6]
800045ec:	90 68       	ld.sh	r8,r8[0xc]
800045ee:	f2 08 19 00 	cp.h	r8,r9
800045f2:	e0 8b 00 05 	brhi	800045fc <udc_process_setup+0x164>
800045f6:	30 1c       	mov	r12,1
800045f8:	e0 8f 01 47 	bral	80004886 <udc_process_setup+0x3ee>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800045fc:	fe f8 03 44 	ld.w	r8,pc[836]
80004600:	b0 69       	st.h	r8[0xc],r9
80004602:	30 1c       	mov	r12,1
80004604:	c4 19       	rjmp	80004886 <udc_process_setup+0x3ee>
80004606:	30 0c       	mov	r12,0
80004608:	c3 f9       	rjmp	80004886 <udc_process_setup+0x3ee>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
8000460a:	30 18       	mov	r8,1
8000460c:	f0 09 19 00 	cp.h	r9,r8
80004610:	c0 30       	breq	80004616 <udc_process_setup+0x17e>
80004612:	30 0c       	mov	r12,0
80004614:	c3 99       	rjmp	80004886 <udc_process_setup+0x3ee>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80004616:	30 1b       	mov	r11,1
80004618:	fe fc 03 48 	ld.w	r12,pc[840]
8000461c:	f0 1f 00 cb 	mcall	80004948 <udc_process_setup+0x4b0>
80004620:	30 1c       	mov	r12,1
80004622:	c3 29       	rjmp	80004886 <udc_process_setup+0x3ee>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80004624:	58 18       	cp.w	r8,1
80004626:	c3 61       	brne	80004692 <udc_process_setup+0x1fa>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80004628:	fe fa 03 18 	ld.w	r10,pc[792]
8000462c:	15 9b       	ld.ub	r11,r10[0x1]
8000462e:	30 aa       	mov	r10,10
80004630:	f4 0b 18 00 	cp.b	r11,r10
80004634:	c2 f1       	brne	80004692 <udc_process_setup+0x1fa>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80004636:	f0 09 19 00 	cp.h	r9,r8
8000463a:	c2 a1       	brne	8000468e <udc_process_setup+0x1f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
8000463c:	fe f8 03 24 	ld.w	r8,pc[804]
80004640:	11 89       	ld.ub	r9,r8[0x0]
80004642:	30 08       	mov	r8,0
80004644:	f0 09 18 00 	cp.b	r9,r8
80004648:	c2 30       	breq	8000468e <udc_process_setup+0x1f6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000464a:	fe f8 02 f6 	ld.w	r8,pc[758]
8000464e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80004650:	fe f8 03 14 	ld.w	r8,pc[788]
80004654:	70 08       	ld.w	r8,r8[0x0]
80004656:	70 08       	ld.w	r8,r8[0x0]
80004658:	11 c8       	ld.ub	r8,r8[0x4]
8000465a:	ee 08 18 00 	cp.b	r8,r7
8000465e:	e0 88 00 18 	brls	8000468e <udc_process_setup+0x1f6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80004662:	30 0b       	mov	r11,0
80004664:	0e 9c       	mov	r12,r7
80004666:	f0 1f 00 c1 	mcall	80004968 <udc_process_setup+0x4d0>
8000466a:	c1 20       	breq	8000468e <udc_process_setup+0x1f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000466c:	fe f8 02 f8 	ld.w	r8,pc[760]
80004670:	70 08       	ld.w	r8,r8[0x0]
80004672:	70 18       	ld.w	r8,r8[0x4]
80004674:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80004678:	70 3c       	ld.w	r12,r8[0xc]
8000467a:	5d 1c       	icall	r12
8000467c:	fe f8 02 f0 	ld.w	r8,pc[752]
80004680:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80004682:	30 1b       	mov	r11,1
80004684:	10 9c       	mov	r12,r8
80004686:	f0 1f 00 b1 	mcall	80004948 <udc_process_setup+0x4b0>
8000468a:	30 1c       	mov	r12,1
8000468c:	cf d8       	rjmp	80004886 <udc_process_setup+0x3ee>
8000468e:	30 0c       	mov	r12,0
80004690:	cf b8       	rjmp	80004886 <udc_process_setup+0x3ee>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80004692:	58 28       	cp.w	r8,2
80004694:	e0 81 00 fb 	brne	8000488a <udc_process_setup+0x3f2>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80004698:	fe f8 02 a8 	ld.w	r8,pc[680]
8000469c:	11 9a       	ld.ub	r10,r8[0x1]
8000469e:	30 08       	mov	r8,0
800046a0:	f0 0a 18 00 	cp.b	r10,r8
800046a4:	e0 81 00 f0 	brne	80004884 <udc_process_setup+0x3ec>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
800046a8:	30 28       	mov	r8,2
800046aa:	f0 09 19 00 	cp.h	r9,r8
800046ae:	c0 30       	breq	800046b4 <udc_process_setup+0x21c>
800046b0:	30 0c       	mov	r12,0
800046b2:	ce a8       	rjmp	80004886 <udc_process_setup+0x3ee>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800046b4:	fe f8 02 8c 	ld.w	r8,pc[652]
800046b8:	11 dc       	ld.ub	r12,r8[0x5]
800046ba:	f0 1f 00 ae 	mcall	80004970 <udc_process_setup+0x4d8>
800046be:	e0 68 01 00 	mov	r8,256
800046c2:	f9 b8 00 00 	moveq	r8,0
800046c6:	fe fc 02 ae 	ld.w	r12,pc[686]
800046ca:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
800046cc:	30 2b       	mov	r11,2
800046ce:	f0 1f 00 9f 	mcall	80004948 <udc_process_setup+0x4b0>
800046d2:	30 1c       	mov	r12,1
800046d4:	cd 98       	rjmp	80004886 <udc_process_setup+0x3ee>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800046d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046da:	c7 c1       	brne	800047d2 <udc_process_setup+0x33a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800046dc:	fe f9 02 64 	ld.w	r9,pc[612]
800046e0:	13 99       	ld.ub	r9,r9[0x1]
800046e2:	30 3a       	mov	r10,3
800046e4:	f4 09 18 00 	cp.b	r9,r10
800046e8:	e0 80 00 ce 	breq	80004884 <udc_process_setup+0x3ec>
800046ec:	e0 8b 00 07 	brhi	800046fa <udc_process_setup+0x262>
800046f0:	30 1a       	mov	r10,1
800046f2:	f4 09 18 00 	cp.b	r9,r10
800046f6:	c6 e1       	brne	800047d2 <udc_process_setup+0x33a>
800046f8:	c1 a8       	rjmp	8000472c <udc_process_setup+0x294>
800046fa:	30 5a       	mov	r10,5
800046fc:	f4 09 18 00 	cp.b	r9,r10
80004700:	c0 60       	breq	8000470c <udc_process_setup+0x274>
80004702:	30 9a       	mov	r10,9
80004704:	f4 09 18 00 	cp.b	r9,r10
80004708:	c6 51       	brne	800047d2 <udc_process_setup+0x33a>
8000470a:	c2 78       	rjmp	80004758 <udc_process_setup+0x2c0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000470c:	fe f8 02 34 	ld.w	r8,pc[564]
80004710:	90 39       	ld.sh	r9,r8[0x6]
80004712:	30 08       	mov	r8,0
80004714:	f0 09 19 00 	cp.h	r9,r8
80004718:	c0 30       	breq	8000471e <udc_process_setup+0x286>
8000471a:	30 0c       	mov	r12,0
8000471c:	cb 58       	rjmp	80004886 <udc_process_setup+0x3ee>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000471e:	fe f9 02 5a 	ld.w	r9,pc[602]
80004722:	fe f8 02 1e 	ld.w	r8,pc[542]
80004726:	91 49       	st.w	r8[0x10],r9
80004728:	30 1c       	mov	r12,1
8000472a:	ca e8       	rjmp	80004886 <udc_process_setup+0x3ee>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000472c:	fe f8 02 14 	ld.w	r8,pc[532]
80004730:	90 39       	ld.sh	r9,r8[0x6]
80004732:	30 08       	mov	r8,0
80004734:	f0 09 19 00 	cp.h	r9,r8
80004738:	c0 e1       	brne	80004754 <udc_process_setup+0x2bc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000473a:	fe f8 02 06 	ld.w	r8,pc[518]
8000473e:	90 19       	ld.sh	r9,r8[0x2]
80004740:	30 18       	mov	r8,1
80004742:	f0 09 19 00 	cp.h	r9,r8
80004746:	c0 71       	brne	80004754 <udc_process_setup+0x2bc>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80004748:	4f f8       	lddpc	r8,80004944 <udc_process_setup+0x4ac>
8000474a:	90 09       	ld.sh	r9,r8[0x0]
8000474c:	a9 d9       	cbr	r9,0x9
8000474e:	b0 09       	st.h	r8[0x0],r9
80004750:	30 1c       	mov	r12,1
80004752:	c9 a8       	rjmp	80004886 <udc_process_setup+0x3ee>
80004754:	30 0c       	mov	r12,0
80004756:	c9 88       	rjmp	80004886 <udc_process_setup+0x3ee>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80004758:	4f a8       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
8000475a:	90 39       	ld.sh	r9,r8[0x6]
8000475c:	30 08       	mov	r8,0
8000475e:	f0 09 19 00 	cp.h	r9,r8
80004762:	c3 41       	brne	800047ca <udc_process_setup+0x332>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80004764:	f0 1f 00 86 	mcall	8000497c <udc_process_setup+0x4e4>
80004768:	c3 10       	breq	800047ca <udc_process_setup+0x332>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000476a:	4f 68       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
8000476c:	11 b9       	ld.ub	r9,r8[0x3]
8000476e:	4f 88       	lddpc	r8,8000494c <udc_process_setup+0x4b4>
80004770:	70 08       	ld.w	r8,r8[0x0]
80004772:	f1 38 00 11 	ld.ub	r8,r8[17]
80004776:	10 39       	cp.w	r9,r8
80004778:	e0 89 00 29 	brgt	800047ca <udc_process_setup+0x332>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
8000477c:	f0 1f 00 81 	mcall	80004980 <udc_process_setup+0x4e8>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80004780:	4f 08       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
80004782:	11 b8       	ld.ub	r8,r8[0x3]
80004784:	4f 79       	lddpc	r9,80004960 <udc_process_setup+0x4c8>
80004786:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80004788:	58 08       	cp.w	r8,0
8000478a:	c2 20       	breq	800047ce <udc_process_setup+0x336>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000478c:	20 18       	sub	r8,1
8000478e:	4f 09       	lddpc	r9,8000494c <udc_process_setup+0x4b4>
80004790:	72 19       	ld.w	r9,r9[0x4]
80004792:	f2 08 00 38 	add	r8,r9,r8<<0x3
80004796:	4f 49       	lddpc	r9,80004964 <udc_process_setup+0x4cc>
80004798:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000479a:	70 08       	ld.w	r8,r8[0x0]
8000479c:	11 c9       	ld.ub	r9,r8[0x4]
8000479e:	30 08       	mov	r8,0
800047a0:	f0 09 18 00 	cp.b	r9,r8
800047a4:	c1 50       	breq	800047ce <udc_process_setup+0x336>
800047a6:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800047a8:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800047aa:	4e f6       	lddpc	r6,80004964 <udc_process_setup+0x4cc>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800047ac:	0a 9b       	mov	r11,r5
800047ae:	0e 9c       	mov	r12,r7
800047b0:	f0 1f 00 75 	mcall	80004984 <udc_process_setup+0x4ec>
800047b4:	c0 b0       	breq	800047ca <udc_process_setup+0x332>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800047b6:	2f f7       	sub	r7,-1
800047b8:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800047ba:	6c 08       	ld.w	r8,r6[0x0]
800047bc:	70 08       	ld.w	r8,r8[0x0]
800047be:	11 c8       	ld.ub	r8,r8[0x4]
800047c0:	ee 08 18 00 	cp.b	r8,r7
800047c4:	fe 9b ff f4 	brhi	800047ac <udc_process_setup+0x314>
800047c8:	c0 38       	rjmp	800047ce <udc_process_setup+0x336>
800047ca:	30 0c       	mov	r12,0
800047cc:	c5 d8       	rjmp	80004886 <udc_process_setup+0x3ee>
800047ce:	30 1c       	mov	r12,1
800047d0:	c5 b8       	rjmp	80004886 <udc_process_setup+0x3ee>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800047d2:	58 18       	cp.w	r8,1
800047d4:	c2 21       	brne	80004818 <udc_process_setup+0x380>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800047d6:	4d b9       	lddpc	r9,80004940 <udc_process_setup+0x4a8>
800047d8:	13 9a       	ld.ub	r10,r9[0x1]
800047da:	30 b9       	mov	r9,11
800047dc:	f2 0a 18 00 	cp.b	r10,r9
800047e0:	c1 c1       	brne	80004818 <udc_process_setup+0x380>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800047e2:	4d 88       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
800047e4:	90 39       	ld.sh	r9,r8[0x6]
800047e6:	30 08       	mov	r8,0
800047e8:	f0 09 19 00 	cp.h	r9,r8
800047ec:	c1 41       	brne	80004814 <udc_process_setup+0x37c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
800047ee:	4d d8       	lddpc	r8,80004960 <udc_process_setup+0x4c8>
800047f0:	11 89       	ld.ub	r9,r8[0x0]
800047f2:	30 08       	mov	r8,0
800047f4:	f0 09 18 00 	cp.b	r9,r8
800047f8:	c0 e0       	breq	80004814 <udc_process_setup+0x37c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800047fa:	4d 28       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
800047fc:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800047fe:	11 d7       	ld.ub	r7,r8[0x5]
80004800:	0e 9c       	mov	r12,r7
80004802:	f0 1f 00 62 	mcall	80004988 <udc_process_setup+0x4f0>
80004806:	c0 70       	breq	80004814 <udc_process_setup+0x37c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80004808:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
8000480c:	0e 9c       	mov	r12,r7
8000480e:	f0 1f 00 5e 	mcall	80004984 <udc_process_setup+0x4ec>
80004812:	c3 a8       	rjmp	80004886 <udc_process_setup+0x3ee>
80004814:	30 0c       	mov	r12,0
80004816:	c3 88       	rjmp	80004886 <udc_process_setup+0x3ee>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80004818:	58 28       	cp.w	r8,2
8000481a:	c3 81       	brne	8000488a <udc_process_setup+0x3f2>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000481c:	4c 98       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
8000481e:	11 98       	ld.ub	r8,r8[0x1]
80004820:	30 19       	mov	r9,1
80004822:	f2 08 18 00 	cp.b	r8,r9
80004826:	c0 60       	breq	80004832 <udc_process_setup+0x39a>
80004828:	30 39       	mov	r9,3
8000482a:	f2 08 18 00 	cp.b	r8,r9
8000482e:	c2 b1       	brne	80004884 <udc_process_setup+0x3ec>
80004830:	c1 48       	rjmp	80004858 <udc_process_setup+0x3c0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80004832:	4c 48       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
80004834:	90 39       	ld.sh	r9,r8[0x6]
80004836:	30 08       	mov	r8,0
80004838:	f0 09 19 00 	cp.h	r9,r8
8000483c:	c0 c1       	brne	80004854 <udc_process_setup+0x3bc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000483e:	4c 18       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
80004840:	90 19       	ld.sh	r9,r8[0x2]
80004842:	30 08       	mov	r8,0
80004844:	f0 09 19 00 	cp.h	r9,r8
80004848:	c0 61       	brne	80004854 <udc_process_setup+0x3bc>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000484a:	4b e8       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
8000484c:	11 dc       	ld.ub	r12,r8[0x5]
8000484e:	f0 1f 00 50 	mcall	8000498c <udc_process_setup+0x4f4>
80004852:	c1 a8       	rjmp	80004886 <udc_process_setup+0x3ee>
80004854:	30 0c       	mov	r12,0
80004856:	c1 88       	rjmp	80004886 <udc_process_setup+0x3ee>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80004858:	4b a8       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
8000485a:	90 39       	ld.sh	r9,r8[0x6]
8000485c:	30 08       	mov	r8,0
8000485e:	f0 09 19 00 	cp.h	r9,r8
80004862:	c0 f1       	brne	80004880 <udc_process_setup+0x3e8>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004864:	4b 78       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
80004866:	90 19       	ld.sh	r9,r8[0x2]
80004868:	30 08       	mov	r8,0
8000486a:	f0 09 19 00 	cp.h	r9,r8
8000486e:	c0 91       	brne	80004880 <udc_process_setup+0x3e8>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80004870:	4b 47       	lddpc	r7,80004940 <udc_process_setup+0x4a8>
80004872:	0f dc       	ld.ub	r12,r7[0x5]
80004874:	f0 1f 00 47 	mcall	80004990 <udc_process_setup+0x4f8>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80004878:	0f dc       	ld.ub	r12,r7[0x5]
8000487a:	f0 1f 00 47 	mcall	80004994 <udc_process_setup+0x4fc>
8000487e:	c0 48       	rjmp	80004886 <udc_process_setup+0x3ee>
80004880:	30 0c       	mov	r12,0
80004882:	c0 28       	rjmp	80004886 <udc_process_setup+0x3ee>
80004884:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
80004886:	58 0c       	cp.w	r12,0
80004888:	c5 a1       	brne	8000493c <udc_process_setup+0x4a4>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000488a:	4a e8       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
8000488c:	11 88       	ld.ub	r8,r8[0x0]
8000488e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004892:	58 18       	cp.w	r8,1
80004894:	c2 61       	brne	800048e0 <udc_process_setup+0x448>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80004896:	4b 38       	lddpc	r8,80004960 <udc_process_setup+0x4c8>
80004898:	11 89       	ld.ub	r9,r8[0x0]
8000489a:	30 08       	mov	r8,0
8000489c:	f0 09 18 00 	cp.b	r9,r8
800048a0:	c2 00       	breq	800048e0 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800048a2:	4a 88       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
800048a4:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800048a6:	4b 08       	lddpc	r8,80004964 <udc_process_setup+0x4cc>
800048a8:	70 08       	ld.w	r8,r8[0x0]
800048aa:	70 08       	ld.w	r8,r8[0x0]
800048ac:	11 c8       	ld.ub	r8,r8[0x4]
800048ae:	ee 08 18 00 	cp.b	r8,r7
800048b2:	e0 88 00 17 	brls	800048e0 <udc_process_setup+0x448>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800048b6:	0e 96       	mov	r6,r7
800048b8:	30 0b       	mov	r11,0
800048ba:	0e 9c       	mov	r12,r7
800048bc:	f0 1f 00 2b 	mcall	80004968 <udc_process_setup+0x4d0>
800048c0:	c1 00       	breq	800048e0 <udc_process_setup+0x448>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800048c2:	4a 98       	lddpc	r8,80004964 <udc_process_setup+0x4cc>
800048c4:	70 08       	ld.w	r8,r8[0x0]
800048c6:	70 18       	ld.w	r8,r8[0x4]
800048c8:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800048cc:	6e 3c       	ld.w	r12,r7[0xc]
800048ce:	5d 1c       	icall	r12
800048d0:	18 9b       	mov	r11,r12
800048d2:	0c 9c       	mov	r12,r6
800048d4:	f0 1f 00 25 	mcall	80004968 <udc_process_setup+0x4d0>
800048d8:	c0 40       	breq	800048e0 <udc_process_setup+0x448>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
800048da:	6e 2c       	ld.w	r12,r7[0x8]
800048dc:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
800048de:	c2 f1       	brne	8000493c <udc_process_setup+0x4a4>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
800048e0:	49 88       	lddpc	r8,80004940 <udc_process_setup+0x4a8>
800048e2:	11 88       	ld.ub	r8,r8[0x0]
800048e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048e8:	58 28       	cp.w	r8,2
800048ea:	c2 71       	brne	80004938 <udc_process_setup+0x4a0>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800048ec:	49 d8       	lddpc	r8,80004960 <udc_process_setup+0x4c8>
800048ee:	11 89       	ld.ub	r9,r8[0x0]
800048f0:	30 08       	mov	r8,0
800048f2:	f0 09 18 00 	cp.b	r9,r8
800048f6:	c2 10       	breq	80004938 <udc_process_setup+0x4a0>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800048f8:	49 b8       	lddpc	r8,80004964 <udc_process_setup+0x4cc>
800048fa:	70 08       	ld.w	r8,r8[0x0]
800048fc:	70 09       	ld.w	r9,r8[0x0]
800048fe:	13 ca       	ld.ub	r10,r9[0x4]
80004900:	30 09       	mov	r9,0
80004902:	f2 0a 18 00 	cp.b	r10,r9
80004906:	c1 90       	breq	80004938 <udc_process_setup+0x4a0>
80004908:	30 07       	mov	r7,0
8000490a:	49 75       	lddpc	r5,80004964 <udc_process_setup+0x4cc>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
8000490c:	70 18       	ld.w	r8,r8[0x4]
8000490e:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80004912:	6c 3c       	ld.w	r12,r6[0xc]
80004914:	5d 1c       	icall	r12
80004916:	18 9b       	mov	r11,r12
80004918:	0e 9c       	mov	r12,r7
8000491a:	f0 1f 00 14 	mcall	80004968 <udc_process_setup+0x4d0>
8000491e:	c0 d0       	breq	80004938 <udc_process_setup+0x4a0>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
80004920:	6c 2c       	ld.w	r12,r6[0x8]
80004922:	5d 1c       	icall	r12
80004924:	c0 c1       	brne	8000493c <udc_process_setup+0x4a4>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80004926:	2f f7       	sub	r7,-1
80004928:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000492a:	6a 08       	ld.w	r8,r5[0x0]
8000492c:	70 09       	ld.w	r9,r8[0x0]
8000492e:	13 c9       	ld.ub	r9,r9[0x4]
80004930:	ee 09 18 00 	cp.b	r9,r7
80004934:	fe 9b ff ec 	brhi	8000490c <udc_process_setup+0x474>
80004938:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000493c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004940:	00 00       	add	r0,r0
80004942:	07 90       	ld.ub	r0,r3[0x1]
80004944:	00 00       	add	r0,r0
80004946:	07 64       	ld.uh	r4,--r3
80004948:	80 00       	ld.sh	r0,r0[0x0]
8000494a:	2a 00       	sub	r0,-96
8000494c:	00 00       	add	r0,r0
8000494e:	00 3c       	cp.w	r12,r0
80004950:	00 00       	add	r0,r0
80004952:	00 a4       	st.w	r0++,r4
80004954:	00 00       	add	r0,r0
80004956:	00 e0       	st.h	--r0,r0
80004958:	00 00       	add	r0,r0
8000495a:	00 b4       	st.h	r0++,r4
8000495c:	00 00       	add	r0,r0
8000495e:	00 c0       	st.b	r0++,r0
80004960:	00 00       	add	r0,r0
80004962:	07 66       	ld.uh	r6,--r3
80004964:	00 00       	add	r0,r0
80004966:	07 5c       	ld.sh	r12,--r3
80004968:	80 00       	ld.sh	r0,r0[0x0]
8000496a:	42 88       	lddsp	r8,sp[0xa0]
8000496c:	00 00       	add	r0,r0
8000496e:	07 60       	ld.uh	r0,--r3
80004970:	80 00       	ld.sh	r0,r0[0x0]
80004972:	2a 0c       	sub	r12,-96
80004974:	00 00       	add	r0,r0
80004976:	07 62       	ld.uh	r2,--r3
80004978:	80 00       	ld.sh	r0,r0[0x0]
8000497a:	43 5c       	lddsp	r12,sp[0xd4]
8000497c:	80 00       	ld.sh	r0,r0[0x0]
8000497e:	29 dc       	sub	r12,-99
80004980:	80 00       	ld.sh	r0,r0[0x0]
80004982:	44 38       	lddsp	r8,sp[0x10c]
80004984:	80 00       	ld.sh	r0,r0[0x0]
80004986:	43 74       	lddsp	r4,sp[0xdc]
80004988:	80 00       	ld.sh	r0,r0[0x0]
8000498a:	43 d4       	lddsp	r4,sp[0xf4]
8000498c:	80 00       	ld.sh	r0,r0[0x0]
8000498e:	2a c8       	sub	r8,-84
80004990:	80 00       	ld.sh	r0,r0[0x0]
80004992:	2c 1c       	sub	r12,-63
80004994:	80 00       	ld.sh	r0,r0[0x0]
80004996:	2a 20       	sub	r0,-94

80004998 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80004998:	d4 01       	pushm	lr
	udd_enable();
8000499a:	f0 1f 00 02 	mcall	800049a0 <udc_start+0x8>
}
8000499e:	d8 02       	popm	pc
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	32 60       	mov	r0,38

800049a4 <linearAcc>:

// value used in the first cyle
float fGrav[3] = {0, 0, 0};		// Gravity

// input 3 elements array
void linearAcc(float *fAccArray, float* fLAccArray) {
800049a4:	d4 31       	pushm	r0-r7,lr
800049a6:	18 95       	mov	r5,r12
800049a8:	16 94       	mov	r4,r11

	//// Recursive Filter (1st order low-pass filter), first loop starts with fGrav to 0 (no reading before)
	
	// Finds Gravity
	fGrav[X] = ALPHA * fGrav[X] + (1 - ALPHA) * fAccArray[X];
800049aa:	4c 37       	lddpc	r7,80004ab4 <linearAcc+0x110>
800049ac:	6e 0c       	ld.w	r12,r7[0x0]
800049ae:	f0 1f 00 43 	mcall	80004ab8 <linearAcc+0x114>
800049b2:	e0 68 1c 73 	mov	r8,7283
800049b6:	ea 18 51 c7 	orh	r8,0x51c7
800049ba:	e0 69 55 55 	mov	r9,21845
800049be:	ea 19 3f d5 	orh	r9,0x3fd5
800049c2:	f0 1f 00 3f 	mcall	80004abc <linearAcc+0x118>
800049c6:	14 92       	mov	r2,r10
800049c8:	16 93       	mov	r3,r11
800049ca:	0a 96       	mov	r6,r5
800049cc:	0d 0c       	ld.w	r12,r6++
800049ce:	f0 1f 00 3b 	mcall	80004ab8 <linearAcc+0x114>
800049d2:	e0 68 71 c6 	mov	r8,29126
800049d6:	ea 18 57 1c 	orh	r8,0x571c
800049da:	e0 69 55 55 	mov	r9,21845
800049de:	ea 19 3f e5 	orh	r9,0x3fe5
800049e2:	f0 1f 00 37 	mcall	80004abc <linearAcc+0x118>
800049e6:	14 98       	mov	r8,r10
800049e8:	16 99       	mov	r9,r11
800049ea:	04 9a       	mov	r10,r2
800049ec:	06 9b       	mov	r11,r3
800049ee:	f0 1f 00 35 	mcall	80004ac0 <linearAcc+0x11c>
800049f2:	f0 1f 00 35 	mcall	80004ac4 <linearAcc+0x120>
800049f6:	18 93       	mov	r3,r12
800049f8:	8f 0c       	st.w	r7[0x0],r12
	fGrav[Y] = ALPHA * fGrav[Y] + (1 - ALPHA) * fAccArray[Y];
800049fa:	6e 1c       	ld.w	r12,r7[0x4]
800049fc:	f0 1f 00 2f 	mcall	80004ab8 <linearAcc+0x114>
80004a00:	e0 68 1c 73 	mov	r8,7283
80004a04:	ea 18 51 c7 	orh	r8,0x51c7
80004a08:	e0 69 55 55 	mov	r9,21845
80004a0c:	ea 19 3f d5 	orh	r9,0x3fd5
80004a10:	f0 1f 00 2b 	mcall	80004abc <linearAcc+0x118>
80004a14:	14 90       	mov	r0,r10
80004a16:	16 91       	mov	r1,r11
80004a18:	6c 0c       	ld.w	r12,r6[0x0]
80004a1a:	f0 1f 00 28 	mcall	80004ab8 <linearAcc+0x114>
80004a1e:	e0 68 71 c6 	mov	r8,29126
80004a22:	ea 18 57 1c 	orh	r8,0x571c
80004a26:	e0 69 55 55 	mov	r9,21845
80004a2a:	ea 19 3f e5 	orh	r9,0x3fe5
80004a2e:	f0 1f 00 24 	mcall	80004abc <linearAcc+0x118>
80004a32:	14 98       	mov	r8,r10
80004a34:	16 99       	mov	r9,r11
80004a36:	00 9a       	mov	r10,r0
80004a38:	02 9b       	mov	r11,r1
80004a3a:	f0 1f 00 22 	mcall	80004ac0 <linearAcc+0x11c>
80004a3e:	f0 1f 00 22 	mcall	80004ac4 <linearAcc+0x120>
80004a42:	8f 1c       	st.w	r7[0x4],r12
	fGrav[Z] = ALPHA * fGrav[Z] + (1 - ALPHA) * fAccArray[Z];
80004a44:	ea c2 ff f8 	sub	r2,r5,-8
80004a48:	6e 2c       	ld.w	r12,r7[0x8]
80004a4a:	f0 1f 00 1c 	mcall	80004ab8 <linearAcc+0x114>
80004a4e:	e0 68 1c 73 	mov	r8,7283
80004a52:	ea 18 51 c7 	orh	r8,0x51c7
80004a56:	e0 69 55 55 	mov	r9,21845
80004a5a:	ea 19 3f d5 	orh	r9,0x3fd5
80004a5e:	f0 1f 00 18 	mcall	80004abc <linearAcc+0x118>
80004a62:	14 90       	mov	r0,r10
80004a64:	16 91       	mov	r1,r11
80004a66:	64 0c       	ld.w	r12,r2[0x0]
80004a68:	f0 1f 00 14 	mcall	80004ab8 <linearAcc+0x114>
80004a6c:	e0 68 71 c6 	mov	r8,29126
80004a70:	ea 18 57 1c 	orh	r8,0x571c
80004a74:	e0 69 55 55 	mov	r9,21845
80004a78:	ea 19 3f e5 	orh	r9,0x3fe5
80004a7c:	f0 1f 00 10 	mcall	80004abc <linearAcc+0x118>
80004a80:	14 98       	mov	r8,r10
80004a82:	16 99       	mov	r9,r11
80004a84:	00 9a       	mov	r10,r0
80004a86:	02 9b       	mov	r11,r1
80004a88:	f0 1f 00 0e 	mcall	80004ac0 <linearAcc+0x11c>
80004a8c:	f0 1f 00 0e 	mcall	80004ac4 <linearAcc+0x120>
80004a90:	8f 2c       	st.w	r7[0x8],r12
	
	// Substracts gravity to find Linear Acceleration
	fLAccArray[X] = fAccArray[X] - fGrav[X];
80004a92:	06 9b       	mov	r11,r3
80004a94:	6a 0c       	ld.w	r12,r5[0x0]
80004a96:	f0 1f 00 0d 	mcall	80004ac8 <linearAcc+0x124>
80004a9a:	89 0c       	st.w	r4[0x0],r12
	fLAccArray[Y] = fAccArray[Y] - fGrav[Y];
80004a9c:	6e 1b       	ld.w	r11,r7[0x4]
80004a9e:	6c 0c       	ld.w	r12,r6[0x0]
80004aa0:	f0 1f 00 0a 	mcall	80004ac8 <linearAcc+0x124>
80004aa4:	89 1c       	st.w	r4[0x4],r12
	fLAccArray[Z] = fAccArray[Z] - fGrav[Z];
80004aa6:	6e 2b       	ld.w	r11,r7[0x8]
80004aa8:	64 0c       	ld.w	r12,r2[0x0]
80004aaa:	f0 1f 00 08 	mcall	80004ac8 <linearAcc+0x124>
80004aae:	89 2c       	st.w	r4[0x8],r12
	
	
	return fLAccArray;
}
80004ab0:	d8 32       	popm	r0-r7,pc
80004ab2:	00 00       	add	r0,r0
80004ab4:	00 00       	add	r0,r0
80004ab6:	07 6c       	ld.uh	r12,--r3
80004ab8:	80 00       	ld.sh	r0,r0[0x0]
80004aba:	5a 36       	cp.w	r6,-29
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	53 9c       	stdsp	sp[0xe4],r12
80004ac0:	80 00       	ld.sh	r0,r0[0x0]
80004ac2:	57 10       	stdsp	sp[0x1c4],r0
80004ac4:	80 00       	ld.sh	r0,r0[0x0]
80004ac6:	5a 98       	cp.w	r8,-23
80004ac8:	80 00       	ld.sh	r0,r0[0x0]
80004aca:	58 24       	cp.w	r4,2

80004acc <main_cdc_enable>:
	ui_process(udd_get_frame_number());
}

bool main_cdc_enable(uint8_t port)
{
	main_b_cdc_enable = true;
80004acc:	30 19       	mov	r9,1
80004ace:	48 28       	lddpc	r8,80004ad4 <main_cdc_enable+0x8>
80004ad0:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80004ad2:	5e ff       	retal	1
80004ad4:	00 00       	add	r0,r0
80004ad6:	07 8d       	ld.ub	sp,r3[0x0]

80004ad8 <main_cdc_disable>:

void main_cdc_disable(uint8_t port)
{
	main_b_cdc_enable = false;
80004ad8:	30 09       	mov	r9,0
80004ada:	48 28       	lddpc	r8,80004ae0 <main_cdc_disable+0x8>
80004adc:	b0 89       	st.b	r8[0x0],r9
}
80004ade:	5e fc       	retal	r12
80004ae0:	00 00       	add	r0,r0
80004ae2:	07 8d       	ld.ub	sp,r3[0x0]

80004ae4 <main_cdc_set_dtr>:

void main_cdc_set_dtr(uint8_t port, bool b_enable)
{
80004ae4:	d4 01       	pushm	lr
	if (b_enable) {
80004ae6:	58 0b       	cp.w	r11,0
80004ae8:	c0 40       	breq	80004af0 <main_cdc_set_dtr+0xc>
		// Host terminal has open COM
		ui_com_open(port);
80004aea:	f0 1f 00 04 	mcall	80004af8 <main_cdc_set_dtr+0x14>
80004aee:	d8 02       	popm	pc
	}else{
		// Host terminal has close COMF
		ui_com_close(port);
80004af0:	f0 1f 00 03 	mcall	80004afc <main_cdc_set_dtr+0x18>
80004af4:	d8 02       	popm	pc
80004af6:	00 00       	add	r0,r0
80004af8:	80 00       	ld.sh	r0,r0[0x0]
80004afa:	24 e8       	sub	r8,78
80004afc:	80 00       	ld.sh	r0,r0[0x0]
80004afe:	25 4c       	sub	r12,84

80004b00 <main_sof_action>:
{
	ui_wakeup();
}

void main_sof_action(void)
{
80004b00:	d4 01       	pushm	lr
	if (!main_b_cdc_enable)
80004b02:	48 68       	lddpc	r8,80004b18 <main_sof_action+0x18>
80004b04:	11 88       	ld.ub	r8,r8[0x0]
80004b06:	58 08       	cp.w	r8,0
80004b08:	c0 60       	breq	80004b14 <main_sof_action+0x14>
		return;
	ui_process(udd_get_frame_number());
80004b0a:	f0 1f 00 05 	mcall	80004b1c <main_sof_action+0x1c>
80004b0e:	5c 7c       	castu.h	r12
80004b10:	f0 1f 00 04 	mcall	80004b20 <main_sof_action+0x20>
80004b14:	d8 02       	popm	pc
80004b16:	00 00       	add	r0,r0
80004b18:	00 00       	add	r0,r0
80004b1a:	07 8d       	ld.ub	sp,r3[0x0]
80004b1c:	80 00       	ld.sh	r0,r0[0x0]
80004b1e:	29 e8       	sub	r8,-98
80004b20:	80 00       	ld.sh	r0,r0[0x0]
80004b22:	25 08       	sub	r8,80

80004b24 <main_resume_action>:
{
	ui_powerdown();
}

void main_resume_action(void)
{
80004b24:	d4 01       	pushm	lr
	ui_wakeup();
80004b26:	f0 1f 00 02 	mcall	80004b2c <main_resume_action+0x8>
}
80004b2a:	d8 02       	popm	pc
80004b2c:	80 00       	ld.sh	r0,r0[0x0]
80004b2e:	24 f8       	sub	r8,79

80004b30 <main_suspend_action>:
		}
	}
}

void main_suspend_action(void)
{
80004b30:	d4 01       	pushm	lr
	ui_powerdown();
80004b32:	f0 1f 00 02 	mcall	80004b38 <main_suspend_action+0x8>
}
80004b36:	d8 02       	popm	pc
80004b38:	80 00       	ld.sh	r0,r0[0x0]
80004b3a:	25 5c       	sub	r12,85

80004b3c <tc_irq>:
#elif defined (__ICCAVR32__)
#pragma handler = EXAMPLE_TC_IRQ_GROUP, 1
__interrupt
#endif
static void tc_irq(void)
{
80004b3c:	d4 01       	pushm	lr
	// specify that an interrupt has been raised
	if(tc_tick>=TC_TICK_20MS)
80004b3e:	49 98       	lddpc	r8,80004ba0 <tc_irq+0x64>
80004b40:	70 08       	ld.w	r8,r8[0x0]
80004b42:	59 38       	cp.w	r8,19
80004b44:	e0 88 00 06 	brls	80004b50 <tc_irq+0x14>
	{
		update_timer = true;
80004b48:	30 19       	mov	r9,1
80004b4a:	49 78       	lddpc	r8,80004ba4 <tc_irq+0x68>
80004b4c:	b0 89       	st.b	r8[0x0],r9
80004b4e:	c0 58       	rjmp	80004b58 <tc_irq+0x1c>
	}
	else
	{
		// Increment the ms seconds counter
		tc_tick++;		
80004b50:	49 48       	lddpc	r8,80004ba0 <tc_irq+0x64>
80004b52:	70 09       	ld.w	r9,r8[0x0]
80004b54:	2f f9       	sub	r9,-1
80004b56:	91 09       	st.w	r8[0x0],r9
	}
	
	if(tc_tick_1>=TC_TICK_80MS)
80004b58:	49 48       	lddpc	r8,80004ba8 <tc_irq+0x6c>
80004b5a:	70 08       	ld.w	r8,r8[0x0]
80004b5c:	e0 48 00 4f 	cp.w	r8,79
80004b60:	e0 88 00 06 	brls	80004b6c <tc_irq+0x30>
	{
		update_timer_1 = true;
80004b64:	30 19       	mov	r9,1
80004b66:	49 28       	lddpc	r8,80004bac <tc_irq+0x70>
80004b68:	b0 89       	st.b	r8[0x0],r9
80004b6a:	c0 58       	rjmp	80004b74 <tc_irq+0x38>
	}
	else
	{
		// Increment the ms seconds counter
		tc_tick_1++;
80004b6c:	48 f8       	lddpc	r8,80004ba8 <tc_irq+0x6c>
80004b6e:	70 09       	ld.w	r9,r8[0x0]
80004b70:	2f f9       	sub	r9,-1
80004b72:	91 09       	st.w	r8[0x0],r9
	}


	if(tc_tick_2>=TC_TICK_1S)
80004b74:	48 f8       	lddpc	r8,80004bb0 <tc_irq+0x74>
80004b76:	70 08       	ld.w	r8,r8[0x0]
80004b78:	e0 48 03 e7 	cp.w	r8,999
80004b7c:	e0 88 00 06 	brls	80004b88 <tc_irq+0x4c>
	{
		update_timer_2 = true;
80004b80:	30 19       	mov	r9,1
80004b82:	48 d8       	lddpc	r8,80004bb4 <tc_irq+0x78>
80004b84:	b0 89       	st.b	r8[0x0],r9
80004b86:	c0 58       	rjmp	80004b90 <tc_irq+0x54>
	}
	else
	{
		// Increment the ms seconds counter
		tc_tick_2++;
80004b88:	48 a8       	lddpc	r8,80004bb0 <tc_irq+0x74>
80004b8a:	70 09       	ld.w	r9,r8[0x0]
80004b8c:	2f f9       	sub	r9,-1
80004b8e:	91 09       	st.w	r8[0x0],r9
	}
		
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
80004b90:	30 0b       	mov	r11,0
80004b92:	fe 7c 38 00 	mov	r12,-51200
80004b96:	f0 1f 00 09 	mcall	80004bb8 <tc_irq+0x7c>
}
80004b9a:	d4 02       	popm	lr
80004b9c:	d6 03       	rete
80004b9e:	00 00       	add	r0,r0
80004ba0:	00 00       	add	r0,r0
80004ba2:	07 78       	ld.ub	r8,--r3
80004ba4:	00 00       	add	r0,r0
80004ba6:	00 eb       	st.h	--r0,r11
80004ba8:	00 00       	add	r0,r0
80004baa:	07 84       	ld.ub	r4,r3[0x0]
80004bac:	00 00       	add	r0,r0
80004bae:	00 ee       	st.h	--r0,lr
80004bb0:	00 00       	add	r0,r0
80004bb2:	07 88       	ld.ub	r8,r3[0x0]
80004bb4:	00 00       	add	r0,r0
80004bb6:	00 f0       	st.b	--r0,r0
80004bb8:	80 00       	ld.sh	r0,r0[0x0]
80004bba:	20 b6       	sub	r6,11

80004bbc <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
void tc_init(volatile avr32_tc_t *tc)
{
80004bbc:	eb cd 40 80 	pushm	r7,lr
80004bc0:	18 97       	mov	r7,r12
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
80004bc2:	48 bb       	lddpc	r11,80004bec <tc_init+0x30>
80004bc4:	f0 1f 00 0b 	mcall	80004bf0 <tc_init+0x34>
	 * Set the compare triggers.
	 * We configure it to count every 1 milliseconds.
	 * We want: (1 / (fPBA / 8)) * RC = 1 ms, hence RC = (fPBA / 8) / 1000
	 * to get an interrupt every 10 ms.
	 */
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, (sysclk_get_pba_hz() / 8 / 1000));
80004bc8:	e0 6a 17 70 	mov	r10,6000
80004bcc:	30 0b       	mov	r11,0
80004bce:	0e 9c       	mov	r12,r7
80004bd0:	f0 1f 00 09 	mcall	80004bf4 <tc_init+0x38>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80004bd4:	48 9a       	lddpc	r10,80004bf8 <tc_init+0x3c>
80004bd6:	30 0b       	mov	r11,0
80004bd8:	0e 9c       	mov	r12,r7
80004bda:	f0 1f 00 09 	mcall	80004bfc <tc_init+0x40>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80004bde:	30 0b       	mov	r11,0
80004be0:	0e 9c       	mov	r12,r7
80004be2:	f0 1f 00 08 	mcall	80004c00 <tc_init+0x44>
}
80004be6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004bea:	00 00       	add	r0,r0
80004bec:	80 00       	ld.sh	r0,r0[0x0]
80004bee:	60 f4       	ld.w	r4,r0[0x3c]
80004bf0:	80 00       	ld.sh	r0,r0[0x0]
80004bf2:	20 08       	sub	r8,0
80004bf4:	80 00       	ld.sh	r0,r0[0x0]
80004bf6:	20 c8       	sub	r8,12
80004bf8:	80 00       	ld.sh	r0,r0[0x0]
80004bfa:	60 f0       	ld.w	r0,r0[0x3c]
80004bfc:	80 00       	ld.sh	r0,r0[0x0]
80004bfe:	20 fc       	sub	r12,15
80004c00:	80 00       	ld.sh	r0,r0[0x0]
80004c02:	20 a4       	sub	r4,10

80004c04 <twi_bus_read>:
	status = twi_master_write(&AVR32_TWI, &pkg);
	return (STATUS_OK == status) ? count : 0;
}

size_t twi_bus_read(uint8_t dev_addr, uint8_t addr, void *data, size_t count)
{
80004c04:	eb cd 40 80 	pushm	r7,lr
80004c08:	20 4d       	sub	sp,16
80004c0a:	12 97       	mov	r7,r9
		.chip        = dev_addr,
		.addr        = {addr},
		.addr_length = sizeof(addr),
		.buffer      = data,
		.length      = count,
	};
80004c0c:	30 08       	mov	r8,0
80004c0e:	30 09       	mov	r9,0
80004c10:	fa e9 00 00 	st.d	sp[0],r8
80004c14:	ba 8c       	st.b	sp[0x0],r12
80004c16:	ba 9b       	st.b	sp[0x1],r11
80004c18:	30 18       	mov	r8,1
80004c1a:	50 18       	stdsp	sp[0x4],r8
80004c1c:	50 2a       	stdsp	sp[0x8],r10
80004c1e:	50 37       	stdsp	sp[0xc],r7

	status = twi_master_read(&AVR32_TWI, &pkg);
80004c20:	1a 9b       	mov	r11,sp
80004c22:	fe 7c 2c 00 	mov	r12,-54272
80004c26:	f0 1f 00 05 	mcall	80004c38 <twi_bus_read+0x34>
	return (STATUS_OK == status) ? count : 0;
}
80004c2a:	ee 0c 17 00 	moveq	r12,r7
80004c2e:	f9 bc 01 00 	movne	r12,0
80004c32:	2f cd       	sub	sp,-16
80004c34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	23 9c       	sub	r12,57

80004c3c <read_sensor_data>:
	tc_start(tc, EXAMPLE_TC_CHANNEL);
}


int read_sensor_data(short *dx,short *dy, short *dz, short *dt)
{
80004c3c:	d4 31       	pushm	r0-r7,lr
80004c3e:	18 90       	mov	r0,r12
80004c40:	16 91       	mov	r1,r11
	uint16_t temp_data;
	int status;

	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_DEV_ID, &rINDEX, 1);//_delay_ms(5);
80004c42:	30 19       	mov	r9,1
80004c44:	4e ca       	lddpc	r10,80004df4 <read_sensor_data+0x1b8>
80004c46:	12 9b       	mov	r11,r9
80004c48:	36 4c       	mov	r12,100
80004c4a:	f0 1f 00 6c 	mcall	80004df8 <read_sensor_data+0x1bc>
	
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_STATUS, &rSTATUS, 1);//_delay_ms(5);
80004c4e:	30 19       	mov	r9,1
80004c50:	4e ba       	lddpc	r10,80004dfc <read_sensor_data+0x1c0>
80004c52:	30 2b       	mov	r11,2
80004c54:	36 4c       	mov	r12,100
80004c56:	f0 1f 00 69 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_CTRL_REG1, &rCTRLREG1, 1);//_delay_ms(5);
80004c5a:	30 19       	mov	r9,1
80004c5c:	4e 9a       	lddpc	r10,80004e00 <read_sensor_data+0x1c4>
80004c5e:	30 3b       	mov	r11,3
80004c60:	36 4c       	mov	r12,100
80004c62:	f0 1f 00 66 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_CTRL_REG2, &rCTRLREG2, 1);//_delay_ms(5);
80004c66:	30 19       	mov	r9,1
80004c68:	4e 7a       	lddpc	r10,80004e04 <read_sensor_data+0x1c8>
80004c6a:	30 4b       	mov	r11,4
80004c6c:	36 4c       	mov	r12,100
80004c6e:	f0 1f 00 63 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_CTRL_REG3, &rCTRLREG3, 1);//_delay_ms(5);
80004c72:	30 19       	mov	r9,1
80004c74:	4e 5a       	lddpc	r10,80004e08 <read_sensor_data+0x1cc>
80004c76:	30 5b       	mov	r11,5
80004c78:	36 4c       	mov	r12,100
80004c7a:	f0 1f 00 60 	mcall	80004df8 <read_sensor_data+0x1bc>

	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_INT1_CTRL, &rINT1_CTRL, 1);//_delay_ms(5);
80004c7e:	30 19       	mov	r9,1
80004c80:	4e 3a       	lddpc	r10,80004e0c <read_sensor_data+0x1d0>
80004c82:	31 0b       	mov	r11,16
80004c84:	36 4c       	mov	r12,100
80004c86:	f0 1f 00 5d 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_INT1_MAP_FUNC, &rINT1_MAP_FUNC, 1);//_delay_ms(5);
80004c8a:	30 19       	mov	r9,1
80004c8c:	4e 1a       	lddpc	r10,80004e10 <read_sensor_data+0x1d4>
80004c8e:	31 1b       	mov	r11,17
80004c90:	36 4c       	mov	r12,100
80004c92:	f0 1f 00 5a 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_XL, &rOUT_DATA_XL, 1);//_delay_ms(5);
80004c96:	4e 07       	lddpc	r7,80004e14 <read_sensor_data+0x1d8>
80004c98:	30 19       	mov	r9,1
80004c9a:	0e 9a       	mov	r10,r7
80004c9c:	31 2b       	mov	r11,18
80004c9e:	36 4c       	mov	r12,100
80004ca0:	f0 1f 00 56 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_XH, &rOUT_DATA_XH, 1);//_delay_ms(5);
80004ca4:	4d d6       	lddpc	r6,80004e18 <read_sensor_data+0x1dc>
80004ca6:	30 19       	mov	r9,1
80004ca8:	0c 9a       	mov	r10,r6
80004caa:	31 3b       	mov	r11,19
80004cac:	36 4c       	mov	r12,100
80004cae:	f0 1f 00 53 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_YL, &rOUT_DATA_YL, 1);//_delay_ms(5);
80004cb2:	4d b4       	lddpc	r4,80004e1c <read_sensor_data+0x1e0>
80004cb4:	30 19       	mov	r9,1
80004cb6:	08 9a       	mov	r10,r4
80004cb8:	31 4b       	mov	r11,20
80004cba:	36 4c       	mov	r12,100
80004cbc:	f0 1f 00 4f 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_YH, &rOUT_DATA_YH, 1);//_delay_ms(5);
80004cc0:	4d 85       	lddpc	r5,80004e20 <read_sensor_data+0x1e4>
80004cc2:	30 19       	mov	r9,1
80004cc4:	0a 9a       	mov	r10,r5
80004cc6:	31 5b       	mov	r11,21
80004cc8:	36 4c       	mov	r12,100
80004cca:	f0 1f 00 4c 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_ZL, &rOUT_DATA_ZL, 1);//_delay_ms(5);
80004cce:	4d 62       	lddpc	r2,80004e24 <read_sensor_data+0x1e8>
80004cd0:	30 19       	mov	r9,1
80004cd2:	04 9a       	mov	r10,r2
80004cd4:	31 6b       	mov	r11,22
80004cd6:	36 4c       	mov	r12,100
80004cd8:	f0 1f 00 48 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_ZH, &rOUT_DATA_ZH, 1);//_delay_ms(5);
80004cdc:	4d 33       	lddpc	r3,80004e28 <read_sensor_data+0x1ec>
80004cde:	30 19       	mov	r9,1
80004ce0:	06 9a       	mov	r10,r3
80004ce2:	31 7b       	mov	r11,23
80004ce4:	36 4c       	mov	r12,100
80004ce6:	f0 1f 00 45 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_OUT_DATA_TEMP, &rOUT_DATA_TEMP, 1);//_delay_ms(5);
80004cea:	30 19       	mov	r9,1
80004cec:	4d 0a       	lddpc	r10,80004e2c <read_sensor_data+0x1f0>
80004cee:	31 8b       	mov	r11,24
80004cf0:	36 4c       	mov	r12,100
80004cf2:	f0 1f 00 42 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_USR_GAIN_X_CTRL, &rUSR_GAIN_X_CTRL, 1);//_delay_ms(5);
80004cf6:	30 19       	mov	r9,1
80004cf8:	4c ea       	lddpc	r10,80004e30 <read_sensor_data+0x1f4>
80004cfa:	31 9b       	mov	r11,25
80004cfc:	36 4c       	mov	r12,100
80004cfe:	f0 1f 00 3f 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_USR_GAIN_Y_CTRL, &rUSR_GAIN_Y_CTRL, 1);//_delay_ms(5);
80004d02:	30 19       	mov	r9,1
80004d04:	4c ca       	lddpc	r10,80004e34 <read_sensor_data+0x1f8>
80004d06:	31 ab       	mov	r11,26
80004d08:	36 4c       	mov	r12,100
80004d0a:	f0 1f 00 3c 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_USR_GAIN_Z_CTRL, &rUSR_GAIN_Z_CTRL, 1);//_delay_ms(5);
80004d0e:	30 19       	mov	r9,1
80004d10:	4c aa       	lddpc	r10,80004e38 <read_sensor_data+0x1fc>
80004d12:	31 bb       	mov	r11,27
80004d14:	36 4c       	mov	r12,100
80004d16:	f0 1f 00 39 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_USR_OFS_X_CTRL, &rUSR_OFS_X_CTRL, 1);//_delay_ms(5);
80004d1a:	30 19       	mov	r9,1
80004d1c:	4c 8a       	lddpc	r10,80004e3c <read_sensor_data+0x200>
80004d1e:	31 cb       	mov	r11,28
80004d20:	36 4c       	mov	r12,100
80004d22:	f0 1f 00 36 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_USR_OFS_Y_CTRL, &rUSR_OFS_Y_CTRL, 1);//_delay_ms(5);
80004d26:	30 19       	mov	r9,1
80004d28:	4c 6a       	lddpc	r10,80004e40 <read_sensor_data+0x204>
80004d2a:	31 db       	mov	r11,29
80004d2c:	36 4c       	mov	r12,100
80004d2e:	f0 1f 00 33 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_USR_OFS_Z_CTRL, &rUSR_OFS_Z_CTRL, 1);//_delay_ms(5);
80004d32:	30 19       	mov	r9,1
80004d34:	4c 4a       	lddpc	r10,80004e44 <read_sensor_data+0x208>
80004d36:	31 eb       	mov	r11,30
80004d38:	36 4c       	mov	r12,100
80004d3a:	f0 1f 00 30 	mcall	80004df8 <read_sensor_data+0x1bc>
	

	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_DIGITAL_FILTER_CTRL, &rDIGITAL_FILTER_CTRL, 1);//_delay_ms(5);
80004d3e:	30 19       	mov	r9,1
80004d40:	4c 2a       	lddpc	r10,80004e48 <read_sensor_data+0x20c>
80004d42:	32 3b       	mov	r11,35
80004d44:	36 4c       	mov	r12,100
80004d46:	f0 1f 00 2d 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_INT_FUNC_CTRL1, &rINT_FUNC_CTRL1, 1);//_delay_ms(5);
80004d4a:	30 19       	mov	r9,1
80004d4c:	4c 0a       	lddpc	r10,80004e4c <read_sensor_data+0x210>
80004d4e:	32 4b       	mov	r11,36
80004d50:	36 4c       	mov	r12,100
80004d52:	f0 1f 00 2a 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_INT_FUNC_CTRL2, &rINT_FUNC_CTRL2, 1);//_delay_ms(5);
80004d56:	30 19       	mov	r9,1
80004d58:	4b ea       	lddpc	r10,80004e50 <read_sensor_data+0x214>
80004d5a:	32 5b       	mov	r11,37
80004d5c:	36 4c       	mov	r12,100
80004d5e:	f0 1f 00 27 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_FIFO_CTRL, &rFIFO_CTRL, 1);//_delay_ms(5);
80004d62:	30 19       	mov	r9,1
80004d64:	4b ca       	lddpc	r10,80004e54 <read_sensor_data+0x218>
80004d66:	32 7b       	mov	r11,39
80004d68:	36 4c       	mov	r12,100
80004d6a:	f0 1f 00 24 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_FIFO_DATA_STATUS, &rFIFO_DATA_STATUS, 1);//_delay_ms(5);
80004d6e:	30 19       	mov	r9,1
80004d70:	4b aa       	lddpc	r10,80004e58 <read_sensor_data+0x21c>
80004d72:	32 8b       	mov	r11,40
80004d74:	36 4c       	mov	r12,100
80004d76:	f0 1f 00 21 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_INT_FUNC_CTRL1_STATUS, &rINT_FUNC_CTRL1_STATUS, 1);//_delay_ms(5);
80004d7a:	30 19       	mov	r9,1
80004d7c:	4b 8a       	lddpc	r10,80004e5c <read_sensor_data+0x220>
80004d7e:	32 9b       	mov	r11,41
80004d80:	36 4c       	mov	r12,100
80004d82:	f0 1f 00 1e 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_MOTION_CTRL, &rMOTION_CTRL, 1);//_delay_ms(5);
80004d86:	30 19       	mov	r9,1
80004d88:	4b 6a       	lddpc	r10,80004e60 <read_sensor_data+0x224>
80004d8a:	32 ab       	mov	r11,42
80004d8c:	36 4c       	mov	r12,100
80004d8e:	f0 1f 00 1b 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_MOTION_STATUS, &rMOTION_STATUS, 1);//_delay_ms(5);
80004d92:	30 19       	mov	r9,1
80004d94:	4b 4a       	lddpc	r10,80004e64 <read_sensor_data+0x228>
80004d96:	32 bb       	mov	r11,43
80004d98:	36 4c       	mov	r12,100
80004d9a:	f0 1f 00 18 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_MOTION_HIGH_TH, &rMOTION_HIGH_TH, 1);//_delay_ms(5);
80004d9e:	30 19       	mov	r9,1
80004da0:	4b 2a       	lddpc	r10,80004e68 <read_sensor_data+0x22c>
80004da2:	32 cb       	mov	r11,44
80004da4:	36 4c       	mov	r12,100
80004da6:	f0 1f 00 15 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_MOTION_HIGH_DUR, &rMOTION_HIGH_DUR, 1);//_delay_ms(5);
80004daa:	30 19       	mov	r9,1
80004dac:	4b 0a       	lddpc	r10,80004e6c <read_sensor_data+0x230>
80004dae:	32 db       	mov	r11,45
80004db0:	36 4c       	mov	r12,100
80004db2:	f0 1f 00 12 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_MOTION_LOW_TH, &rMOTION_LOW_TH, 1);//_delay_ms(5);
80004db6:	30 19       	mov	r9,1
80004db8:	4a ea       	lddpc	r10,80004e70 <read_sensor_data+0x234>
80004dba:	32 eb       	mov	r11,46
80004dbc:	36 4c       	mov	r12,100
80004dbe:	f0 1f 00 0f 	mcall	80004df8 <read_sensor_data+0x1bc>
	status=twi_bus_read(SGA100_BUS_ADDR, SGA100_MOTION_LOW_DUR, &rMOTION_LOW_DUR, 1);//_delay_ms(5);
80004dc2:	30 19       	mov	r9,1
80004dc4:	4a ca       	lddpc	r10,80004e74 <read_sensor_data+0x238>
80004dc6:	32 fb       	mov	r11,47
80004dc8:	36 4c       	mov	r12,100
80004dca:	f0 1f 00 0c 	mcall	80004df8 <read_sensor_data+0x1bc>

	temp_data = 0;
	temp_data = rOUT_DATA_XH<<8;
80004dce:	ed 29 00 00 	ld.sb	r9,r6[0]
	temp_data |= rOUT_DATA_XL;
80004dd2:	0f 88       	ld.ub	r8,r7[0x0]
	*dx = temp_data;
80004dd4:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004dd8:	a0 08       	st.h	r0[0x0],r8
	
	temp_data = 0;
	temp_data = rOUT_DATA_YH<<8;
80004dda:	eb 29 00 00 	ld.sb	r9,r5[0]
	temp_data |= rOUT_DATA_YL;
80004dde:	09 88       	ld.ub	r8,r4[0x0]
	*dy = temp_data;
80004de0:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004de4:	a2 08       	st.h	r1[0x0],r8
	
	temp_data = 0;
	temp_data = rOUT_DATA_ZH<<8;
80004de6:	e7 29 00 00 	ld.sb	r9,r3[0]
	temp_data |= rOUT_DATA_ZL;
80004dea:	05 88       	ld.ub	r8,r2[0x0]
	*dy = temp_data;
80004dec:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004df0:	a2 08       	st.h	r1[0x0],r8
	
	return 0;
}
80004df2:	d8 3a       	popm	r0-r7,pc,r12=0
80004df4:	00 00       	add	r0,r0
80004df6:	00 e6       	st.h	--r0,r6
80004df8:	80 00       	ld.sh	r0,r0[0x0]
80004dfa:	4c 04       	lddpc	r4,80004ef8 <twi_master_setup+0x30>
80004dfc:	00 00       	add	r0,r0
80004dfe:	01 08       	ld.w	r8,r0++
80004e00:	00 00       	add	r0,r0
80004e02:	00 ff       	st.b	--r0,pc
80004e04:	00 00       	add	r0,r0
80004e06:	01 00       	ld.w	r0,r0++
80004e08:	00 00       	add	r0,r0
80004e0a:	01 01       	ld.w	r1,r0++
80004e0c:	00 00       	add	r0,r0
80004e0e:	01 07       	ld.w	r7,r0++
80004e10:	00 00       	add	r0,r0
80004e12:	00 fc       	st.b	--r0,r12
80004e14:	00 00       	add	r0,r0
80004e16:	00 f6       	st.b	--r0,r6
80004e18:	00 00       	add	r0,r0
80004e1a:	00 f4       	st.b	--r0,r4
80004e1c:	00 00       	add	r0,r0
80004e1e:	00 e7       	st.h	--r0,r7
80004e20:	00 00       	add	r0,r0
80004e22:	00 e4       	st.h	--r0,r4
80004e24:	00 00       	add	r0,r0
80004e26:	00 fa       	st.b	--r0,r10
80004e28:	00 00       	add	r0,r0
80004e2a:	00 f8       	st.b	--r0,r8
80004e2c:	00 00       	add	r0,r0
80004e2e:	00 ec       	st.h	--r0,r12
80004e30:	00 00       	add	r0,r0
80004e32:	00 ea       	st.h	--r0,r10
80004e34:	00 00       	add	r0,r0
80004e36:	00 f5       	st.b	--r0,r5
80004e38:	00 00       	add	r0,r0
80004e3a:	00 fe       	st.b	--r0,lr
80004e3c:	00 00       	add	r0,r0
80004e3e:	01 06       	ld.w	r6,r0++
80004e40:	00 00       	add	r0,r0
80004e42:	00 ed       	st.h	--r0,sp
80004e44:	00 00       	add	r0,r0
80004e46:	00 fb       	st.b	--r0,r11
80004e48:	00 00       	add	r0,r0
80004e4a:	00 e9       	st.h	--r0,r9
80004e4c:	00 00       	add	r0,r0
80004e4e:	00 f1       	st.b	--r0,r1
80004e50:	00 00       	add	r0,r0
80004e52:	00 f2       	st.b	--r0,r2
80004e54:	00 00       	add	r0,r0
80004e56:	00 f9       	st.b	--r0,r9
80004e58:	00 00       	add	r0,r0
80004e5a:	00 f7       	st.b	--r0,r7
80004e5c:	00 00       	add	r0,r0
80004e5e:	01 03       	ld.w	r3,r0++
80004e60:	00 00       	add	r0,r0
80004e62:	00 ef       	st.h	--r0,pc
80004e64:	00 00       	add	r0,r0
80004e66:	00 f3       	st.b	--r0,r3
80004e68:	00 00       	add	r0,r0
80004e6a:	00 fd       	st.b	--r0,sp
80004e6c:	00 00       	add	r0,r0
80004e6e:	00 e8       	st.h	--r0,r8
80004e70:	00 00       	add	r0,r0
80004e72:	01 04       	ld.w	r4,r0++
80004e74:	00 00       	add	r0,r0
80004e76:	00 e5       	st.h	--r0,r5

80004e78 <twi_bus_write>:
	
	status = twi_bus_write(dev_addr, addr, &data, sizeof(uint8_t));
}

size_t twi_bus_write(uint8_t dev_addr, uint8_t addr, const void *data, size_t count)
{
80004e78:	eb cd 40 80 	pushm	r7,lr
80004e7c:	20 4d       	sub	sp,16
80004e7e:	12 97       	mov	r7,r9
		.chip        = dev_addr,
		.addr        = {addr},
		.addr_length = sizeof(addr),
		.buffer      = (void *)data,
		.length      = count,
	};
80004e80:	30 08       	mov	r8,0
80004e82:	30 09       	mov	r9,0
80004e84:	fa e9 00 00 	st.d	sp[0],r8
80004e88:	ba 8c       	st.b	sp[0x0],r12
80004e8a:	ba 9b       	st.b	sp[0x1],r11
80004e8c:	30 18       	mov	r8,1
80004e8e:	50 18       	stdsp	sp[0x4],r8
80004e90:	50 2a       	stdsp	sp[0x8],r10
80004e92:	50 37       	stdsp	sp[0xc],r7

	status = twi_master_write(&AVR32_TWI, &pkg);
80004e94:	1a 9b       	mov	r11,sp
80004e96:	fe 7c 2c 00 	mov	r12,-54272
80004e9a:	f0 1f 00 05 	mcall	80004eac <twi_bus_write+0x34>
	return (STATUS_OK == status) ? count : 0;
}
80004e9e:	ee 0c 17 00 	moveq	r12,r7
80004ea2:	f9 bc 01 00 	movne	r12,0
80004ea6:	2f cd       	sub	sp,-16
80004ea8:	e3 cd 80 80 	ldm	sp++,r7,pc
80004eac:	80 00       	ld.sh	r0,r0[0x0]
80004eae:	22 ec       	sub	r12,46

80004eb0 <twi_bus_put>:
	
	return(status);
}

void twi_bus_put(uint8_t dev_addr, uint8_t addr, uint8_t data)
{
80004eb0:	d4 01       	pushm	lr
80004eb2:	20 1d       	sub	sp,4
80004eb4:	ba 8a       	st.b	sp[0x0],r10
	int status;
	
	status = twi_bus_write(dev_addr, addr, &data, sizeof(uint8_t));
80004eb6:	30 19       	mov	r9,1
80004eb8:	1a 9a       	mov	r10,sp
80004eba:	f0 1f 00 03 	mcall	80004ec4 <twi_bus_put+0x14>
}
80004ebe:	2f fd       	sub	sp,-4
80004ec0:	d8 02       	popm	pc
80004ec2:	00 00       	add	r0,r0
80004ec4:	80 00       	ld.sh	r0,r0[0x0]
80004ec6:	4e 78       	lddpc	r8,80005060 <main+0x160>

80004ec8 <twi_master_setup>:

volatile uint8_t nCurrent_ReadSensor=1;
volatile uint8_t nCurrent_WriteSensor=1;

int twi_master_setup(void)
{
80004ec8:	d4 01       	pushm	lr
80004eca:	20 3d       	sub	sp,12
	twi_options_t opt;
	int status;
	
	// twi options settings
	opt.pba_hz = sysclk_get_pba_hz();
80004ecc:	e0 68 6c 00 	mov	r8,27648
80004ed0:	ea 18 02 dc 	orh	r8,0x2dc
80004ed4:	50 08       	stdsp	sp[0x0],r8
	opt.speed = TWI_SPEED;
80004ed6:	e6 68 1a 80 	mov	r8,400000
80004eda:	50 18       	stdsp	sp[0x4],r8
	opt.chip = 0;
80004edc:	30 08       	mov	r8,0
80004ede:	fb 68 00 08 	st.b	sp[8],r8
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80004ee2:	30 6b       	mov	r11,6
80004ee4:	30 2c       	mov	r12,2
80004ee6:	f0 1f 00 05 	mcall	80004ef8 <twi_master_setup+0x30>

	sysclk_enable_pba_module(SYSCLK_TWI);

	// initialize TWI driver with options
	status = twi_master_init(&AVR32_TWI, &opt);
80004eea:	1a 9b       	mov	r11,sp
80004eec:	fe 7c 2c 00 	mov	r12,-54272
80004ef0:	f0 1f 00 03 	mcall	80004efc <twi_master_setup+0x34>
	
	return(status);
}
80004ef4:	2f dd       	sub	sp,-12
80004ef6:	d8 02       	popm	pc
80004ef8:	80 00       	ld.sh	r0,r0[0x0]
80004efa:	39 c8       	mov	r8,-100
80004efc:	80 00       	ld.sh	r0,r0[0x0]
80004efe:	24 54       	sub	r4,69

80004f00 <main>:
 */

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
80004f00:	d4 31       	pushm	r0-r7,lr
80004f02:	fa cd 01 20 	sub	sp,sp,288
	volatile avr32_tc_t *tc = EXAMPLE_TC;
	char szBuffer[256]={0};
80004f06:	e0 6a 01 00 	mov	r10,256
80004f0a:	30 0b       	mov	r11,0
80004f0c:	fa cc ff e0 	sub	r12,sp,-32
80004f10:	f0 1f 00 d8 	mcall	80005270 <main+0x370>
	uint8_t bit_cal_temp=0xfc;
	
	char abyData[6];


	irq_initialize_vectors();
80004f14:	f0 1f 00 d8 	mcall	80005274 <main+0x374>
	cpu_irq_enable();
80004f18:	d5 03       	csrf	0x10

	sysclk_init();
80004f1a:	f0 1f 00 d8 	mcall	80005278 <main+0x378>
	board_init();
80004f1e:	f0 1f 00 d8 	mcall	8000527c <main+0x37c>
80004f22:	30 cb       	mov	r11,12
80004f24:	30 2c       	mov	r12,2
80004f26:	f0 1f 00 d7 	mcall	80005280 <main+0x380>
	
	// Enable the clock to the selected example Timer/counter peripheral module.
	sysclk_enable_peripheral_clock(EXAMPLE_TC);

	ui_init();
80004f2a:	f0 1f 00 d7 	mcall	80005284 <main+0x384>
	ui_powerdown();
80004f2e:	f0 1f 00 d7 	mcall	80005288 <main+0x388>

	// Start USB stack to authorize VBus monitoring
	udc_start();
80004f32:	f0 1f 00 d7 	mcall	8000528c <main+0x38c>
	
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
80004f36:	30 0a       	mov	r10,0
80004f38:	e0 6b 01 c0 	mov	r11,448
80004f3c:	fe fc 03 54 	ld.w	r12,pc[852]
80004f40:	f0 1f 00 d5 	mcall	80005294 <main+0x394>

	// Initialize the timer module
	tc_init(tc);
80004f44:	fe 7c 38 00 	mov	r12,-51200
80004f48:	f0 1f 00 d4 	mcall	80005298 <main+0x398>
		
	//initialize the twi(I2C)
	status = twi_master_setup();
80004f4c:	f0 1f 00 d4 	mcall	8000529c <main+0x39c>
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80004f50:	e0 68 03 e8 	mov	r8,1000
80004f54:	30 09       	mov	r9,0
80004f56:	e0 6a c3 e7 	mov	r10,50151
80004f5a:	ea 1a 5a 0b 	orh	r10,0x5a0b
80004f5e:	31 6b       	mov	r11,22
80004f60:	f0 1f 00 d0 	mcall	800052a0 <main+0x3a0>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004f64:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80004f68:	f0 0a 00 0a 	add	r10,r8,r10
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004f6c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004f70:	14 38       	cp.w	r8,r10
80004f72:	e0 88 00 08 	brls	80004f82 <main+0x82>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80004f76:	12 38       	cp.w	r8,r9
80004f78:	fe 98 ff fa 	brls	80004f6c <main+0x6c>
80004f7c:	12 3a       	cp.w	r10,r9
80004f7e:	c0 73       	brcs	80004f8c <main+0x8c>
80004f80:	cf 6b       	rjmp	80004f6c <main+0x6c>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004f82:	12 38       	cp.w	r8,r9
80004f84:	e0 8b 00 04 	brhi	80004f8c <main+0x8c>
80004f88:	12 3a       	cp.w	r10,r9
80004f8a:	cf 12       	brcc	80004f6c <main+0x6c>
	
	delay_ms(2000);
	
	while (true) {
		if(update_timer_2)
80004f8c:	fe f4 03 18 	ld.w	r4,pc[792]
		{
			update_timer_2 =  false;
80004f90:	30 00       	mov	r0,0
			tc_tick_2=0;
80004f92:	30 07       	mov	r7,0
			LED_Toggle(LED3);
		}
			
		memset(szBuffer,0,sizeof(char)*256);
80004f94:	fa c2 ff e0 	sub	r2,sp,-32
80004f98:	e0 61 01 00 	mov	r1,256
		
		if(main_b_cdc_enable) {
80004f9c:	fe f3 03 0c 	ld.w	r3,pc[780]
			if(udi_cdc_is_rx_ready()) {
				dbuf[count++] = udi_cdc_getc();
80004fa0:	fe f5 03 0c 	ld.w	r5,pc[780]
	status = twi_master_setup();
	
	delay_ms(2000);
	
	while (true) {
		if(update_timer_2)
80004fa4:	09 88       	ld.ub	r8,r4[0x0]
80004fa6:	58 08       	cp.w	r8,0
80004fa8:	c0 80       	breq	80004fb8 <main+0xb8>
		{
			update_timer_2 =  false;
80004faa:	a8 80       	st.b	r4[0x0],r0
			tc_tick_2=0;
80004fac:	fe f8 03 04 	ld.w	r8,pc[772]
80004fb0:	91 07       	st.w	r8[0x0],r7
			LED_Toggle(LED3);
80004fb2:	30 8c       	mov	r12,8
80004fb4:	f0 1f 00 c0 	mcall	800052b4 <main+0x3b4>
		}
			
		memset(szBuffer,0,sizeof(char)*256);
80004fb8:	02 9a       	mov	r10,r1
80004fba:	0e 9b       	mov	r11,r7
80004fbc:	04 9c       	mov	r12,r2
80004fbe:	f0 1f 00 ad 	mcall	80005270 <main+0x370>
		
		if(main_b_cdc_enable) {
80004fc2:	07 88       	ld.ub	r8,r3[0x0]
80004fc4:	58 08       	cp.w	r8,0
80004fc6:	c0 d0       	breq	80004fe0 <main+0xe0>
			if(udi_cdc_is_rx_ready()) {
80004fc8:	f0 1f 00 bc 	mcall	800052b8 <main+0x3b8>
80004fcc:	c0 a0       	breq	80004fe0 <main+0xe0>
				dbuf[count++] = udi_cdc_getc();
80004fce:	6a 06       	ld.w	r6,r5[0x0]
80004fd0:	f0 1f 00 bb 	mcall	800052bc <main+0x3bc>
80004fd4:	fe f8 02 ec 	ld.w	r8,pc[748]
80004fd8:	f0 06 0b 0c 	st.b	r8[r6],r12
80004fdc:	2f f6       	sub	r6,-1
80004fde:	8b 06       	st.w	r5[0x0],r6
			}
		}
		
		if( count > 5 )
80004fe0:	6a 08       	ld.w	r8,r5[0x0]
80004fe2:	58 58       	cp.w	r8,5
80004fe4:	e0 88 00 37 	brls	80005052 <main+0x152>
		{
			if ( ( dbuf[0] == 0xaf ) && ( dbuf[5] == 0x5f ) )
80004fe8:	fe f8 02 d8 	ld.w	r8,pc[728]
80004fec:	11 89       	ld.ub	r9,r8[0x0]
80004fee:	3a f8       	mov	r8,-81
80004ff0:	f0 09 18 00 	cp.b	r9,r8
80004ff4:	c2 e1       	brne	80005050 <main+0x150>
80004ff6:	fe f8 02 ca 	ld.w	r8,pc[714]
80004ffa:	11 d9       	ld.ub	r9,r8[0x5]
80004ffc:	35 f8       	mov	r8,95
80004ffe:	f0 09 18 00 	cp.b	r9,r8
80005002:	c2 71       	brne	80005050 <main+0x150>
			{
				prefix1=dbuf[1];
80005004:	fe f8 02 bc 	ld.w	r8,pc[700]
80005008:	11 9a       	ld.ub	r10,r8[0x1]
8000500a:	fe f9 02 ba 	ld.w	r9,pc[698]
8000500e:	b2 8a       	st.b	r9[0x0],r10
				addr1=dbuf[2];
80005010:	11 ab       	ld.ub	r11,r8[0x2]
80005012:	fe fa 02 b6 	ld.w	r10,pc[694]
80005016:	b4 8b       	st.b	r10[0x0],r11
				data1=dbuf[3];
80005018:	11 bb       	ld.ub	r11,r8[0x3]
8000501a:	fe fa 02 b2 	ld.w	r10,pc[690]
8000501e:	b4 8b       	st.b	r10[0x0],r11
				nSensorNum=dbuf[4];
80005020:	11 ca       	ld.ub	r10,r8[0x4]
80005022:	fe f8 02 ae 	ld.w	r8,pc[686]
80005026:	b0 8a       	st.b	r8[0x0],r10
						
				count=0;
80005028:	8b 07       	st.w	r5[0x0],r7
						
				nCurrent_WriteSensor=nSensorNum;
8000502a:	11 8a       	ld.ub	r10,r8[0x0]
8000502c:	fe f8 02 a8 	ld.w	r8,pc[680]
80005030:	b0 8a       	st.b	r8[0x0],r10
				switch(prefix1){
80005032:	13 89       	ld.ub	r9,r9[0x0]
80005034:	3f 18       	mov	r8,-15
80005036:	f0 09 18 00 	cp.b	r9,r8
8000503a:	c0 c1       	brne	80005052 <main+0x152>
					case NORMAL_REGISTER_TYPE_WRITE:
						twi_bus_put(SGA100_BUS_ADDR, addr1, data1);
8000503c:	fe f8 02 90 	ld.w	r8,pc[656]
80005040:	11 8a       	ld.ub	r10,r8[0x0]
80005042:	fe f8 02 86 	ld.w	r8,pc[646]
80005046:	11 8b       	ld.ub	r11,r8[0x0]
80005048:	36 4c       	mov	r12,100
8000504a:	f0 1f 00 a4 	mcall	800052d8 <main+0x3d8>
8000504e:	c0 28       	rjmp	80005052 <main+0x152>
				}
						
			}
			else
			{
				count =0;
80005050:	8b 07       	st.w	r5[0x0],r7
			}
		}
		
		if (update_timer)
80005052:	fe f8 02 8a 	ld.w	r8,pc[650]
80005056:	11 88       	ld.ub	r8,r8[0x0]
80005058:	58 08       	cp.w	r8,0
8000505a:	ca 50       	breq	80004fa4 <main+0xa4>
		{
#ifdef SGA100_USED	
			// Sensor Data Acquisition
			read_sensor_data(&outx,&outy,&outz,&outt);
8000505c:	fe f9 02 84 	ld.w	r9,pc[644]
80005060:	fe fa 02 84 	ld.w	r10,pc[644]
80005064:	fe fb 02 84 	ld.w	r11,pc[644]
80005068:	fe fc 02 84 	ld.w	r12,pc[644]
8000506c:	f0 1f 00 a1 	mcall	800052f0 <main+0x3f0>
#endif
			update_timer=false;
80005070:	fe f8 02 6c 	ld.w	r8,pc[620]
80005074:	b0 80       	st.b	r8[0x0],r0
			tc_tick=0;
80005076:	fe f8 02 7e 	ld.w	r8,pc[638]
8000507a:	91 07       	st.w	r8[0x0],r7
			
			/* magnetometer data read */
			if(update_timer_1)
8000507c:	fe f8 02 7c 	ld.w	r8,pc[636]
80005080:	11 88       	ld.ub	r8,r8[0x0]
80005082:	58 08       	cp.w	r8,0
80005084:	c0 70       	breq	80005092 <main+0x192>
			{
				update_timer_1=false;
80005086:	fe f8 02 72 	ld.w	r8,pc[626]
8000508a:	b0 80       	st.b	r8[0x0],r0
				tc_tick_1=0;
8000508c:	fe f8 02 70 	ld.w	r8,pc[624]
80005090:	91 07       	st.w	r8[0x0],r7
			}
			
			if(1)
			{
				sga100_x = rOUT_DATA_XH;
				sga100_x <<=8;
80005092:	fe f8 02 6e 	ld.w	r8,pc[622]
80005096:	f1 2c 00 00 	ld.sb	r12,r8[0]
				sga100_x |= rOUT_DATA_XL;
8000509a:	fe f8 02 6a 	ld.w	r8,pc[618]
8000509e:	11 88       	ld.ub	r8,r8[0x0]
							
				sga100_y = rOUT_DATA_YH;
				sga100_y <<=8;
800050a0:	fe f9 02 68 	ld.w	r9,pc[616]
800050a4:	f3 29 00 00 	ld.sb	r9,r9[0]
800050a8:	a9 69       	lsl	r9,0x8
800050aa:	50 19       	stdsp	sp[0x4],r9
				sga100_y |= rOUT_DATA_YL;
800050ac:	fe f9 02 60 	ld.w	r9,pc[608]
800050b0:	13 89       	ld.ub	r9,r9[0x0]
800050b2:	50 29       	stdsp	sp[0x8],r9

				sga100_z = rOUT_DATA_ZH;
				sga100_z <<=8;
800050b4:	fe f9 02 5c 	ld.w	r9,pc[604]
800050b8:	f3 29 00 00 	ld.sb	r9,r9[0]
800050bc:	a9 69       	lsl	r9,0x8
800050be:	50 09       	stdsp	sp[0x0],r9
				sga100_z |= rOUT_DATA_ZL;
800050c0:	fe f9 02 54 	ld.w	r9,pc[596]
800050c4:	13 86       	ld.ub	r6,r9[0x0]
				
				float fAccArray2[3] = {sga100_x, sga100_y, sga100_z};
800050c6:	f1 ec 10 8c 	or	r12,r8,r12<<0x8
800050ca:	f0 1f 00 94 	mcall	80005318 <main+0x418>
800050ce:	50 5c       	stdsp	sp[0x14],r12
800050d0:	40 1c       	lddsp	r12,sp[0x4]
800050d2:	40 28       	lddsp	r8,sp[0x8]
800050d4:	10 4c       	or	r12,r8
800050d6:	f0 1f 00 91 	mcall	80005318 <main+0x418>
800050da:	50 6c       	stdsp	sp[0x18],r12
800050dc:	40 0c       	lddsp	r12,sp[0x0]
800050de:	0c 4c       	or	r12,r6
800050e0:	f0 1f 00 8e 	mcall	80005318 <main+0x418>
800050e4:	50 7c       	stdsp	sp[0x1c],r12
				float* fAccArray;
				linearAcc(fAccArray2, fAccArray);
800050e6:	30 06       	mov	r6,0
800050e8:	0c 9b       	mov	r11,r6
800050ea:	fa cc ff ec 	sub	r12,sp,-20
800050ee:	f0 1f 00 8c 	mcall	8000531c <main+0x41c>

				abyData[0] = (int)fAccArray[X] & 0xFF;
800050f2:	6c 0c       	ld.w	r12,r6[0x0]
800050f4:	f0 1f 00 8b 	mcall	80005320 <main+0x420>
800050f8:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
800050fc:	50 48       	stdsp	sp[0x10],r8
				abyData[1] = ((int)fAccArray[X]>>8) & 0xFF;
800050fe:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
80005102:	50 3c       	stdsp	sp[0xc],r12
				abyData[2] = (int)fAccArray[Y] & 0xFF;
80005104:	6c 1c       	ld.w	r12,r6[0x4]
80005106:	f0 1f 00 87 	mcall	80005320 <main+0x420>
8000510a:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
8000510e:	50 28       	stdsp	sp[0x8],r8
				abyData[3] = ((int)fAccArray[Y]>>8) & 0xFF;
80005110:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
80005114:	50 1c       	stdsp	sp[0x4],r12
				abyData[4] = (int)fAccArray[Z] & 0xFF;
80005116:	6c 2c       	ld.w	r12,r6[0x8]
80005118:	f0 1f 00 82 	mcall	80005320 <main+0x420>
8000511c:	ed dc c0 08 	bfextu	r6,r12,0x0,0x8
				abyData[5] = ((int)fAccArray[Z]>>8) & 0xFF;
80005120:	f9 dc c1 08 	bfextu	r12,r12,0x8,0x8
80005124:	50 0c       	stdsp	sp[0x0],r12
			}
			
			if(main_b_cdc_enable) 
80005126:	07 88       	ld.ub	r8,r3[0x0]
80005128:	58 08       	cp.w	r8,0
8000512a:	fe 90 ff 3d 	breq	80004fa4 <main+0xa4>
			//if(0)
			{
				
				udi_cdc_putc('P');
8000512e:	35 0c       	mov	r12,80
80005130:	f0 1f 00 7d 	mcall	80005324 <main+0x424>
				udi_cdc_putc('K');
80005134:	34 bc       	mov	r12,75
80005136:	f0 1f 00 7c 	mcall	80005324 <main+0x424>
				udi_cdc_putc('S');
8000513a:	35 3c       	mov	r12,83
8000513c:	f0 1f 00 7a 	mcall	80005324 <main+0x424>
				udi_cdc_putc('T');
80005140:	35 4c       	mov	r12,84
80005142:	f0 1f 00 79 	mcall	80005324 <main+0x424>
				udi_cdc_putc(33);
80005146:	32 1c       	mov	r12,33
80005148:	f0 1f 00 77 	mcall	80005324 <main+0x424>
			
				udi_cdc_putc(nCurrent_ReadSensor);
8000514c:	4f 78       	lddpc	r8,80005328 <main+0x428>
8000514e:	11 8c       	ld.ub	r12,r8[0x0]
80005150:	f0 1f 00 75 	mcall	80005324 <main+0x424>
			
				udi_cdc_putc(rINDEX); //1
80005154:	4f 68       	lddpc	r8,8000532c <main+0x42c>
80005156:	11 8c       	ld.ub	r12,r8[0x0]
80005158:	f0 1f 00 73 	mcall	80005324 <main+0x424>
						
				udi_cdc_putc(rSTATUS);
8000515c:	4f 58       	lddpc	r8,80005330 <main+0x430>
8000515e:	11 8c       	ld.ub	r12,r8[0x0]
80005160:	f0 1f 00 71 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rCTRLREG1);
80005164:	4f 48       	lddpc	r8,80005334 <main+0x434>
80005166:	11 8c       	ld.ub	r12,r8[0x0]
80005168:	f0 1f 00 6f 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rCTRLREG2);
8000516c:	4f 38       	lddpc	r8,80005338 <main+0x438>
8000516e:	11 8c       	ld.ub	r12,r8[0x0]
80005170:	f0 1f 00 6d 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rCTRLREG3); //5
80005174:	4f 28       	lddpc	r8,8000533c <main+0x43c>
80005176:	11 8c       	ld.ub	r12,r8[0x0]
80005178:	f0 1f 00 6b 	mcall	80005324 <main+0x424>

				udi_cdc_putc(rINT1_CTRL);
8000517c:	4f 18       	lddpc	r8,80005340 <main+0x440>
8000517e:	11 8c       	ld.ub	r12,r8[0x0]
80005180:	f0 1f 00 69 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rINT1_MAP_FUNC);	
80005184:	4f 08       	lddpc	r8,80005344 <main+0x444>
80005186:	11 8c       	ld.ub	r12,r8[0x0]
80005188:	f0 1f 00 67 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rOUT_DATA_YL); //10
				udi_cdc_putc(rOUT_DATA_YH);
				udi_cdc_putc(rOUT_DATA_ZL);
				udi_cdc_putc(rOUT_DATA_ZH);*/
					
				udi_cdc_putc(abyData[0]);
8000518c:	40 4c       	lddsp	r12,sp[0x10]
8000518e:	f0 1f 00 66 	mcall	80005324 <main+0x424>
				udi_cdc_putc(abyData[1]);
80005192:	40 3c       	lddsp	r12,sp[0xc]
80005194:	f0 1f 00 64 	mcall	80005324 <main+0x424>
				udi_cdc_putc(abyData[2]); //10
80005198:	40 2c       	lddsp	r12,sp[0x8]
8000519a:	f0 1f 00 63 	mcall	80005324 <main+0x424>
				udi_cdc_putc(abyData[3]);
8000519e:	40 1c       	lddsp	r12,sp[0x4]
800051a0:	f0 1f 00 61 	mcall	80005324 <main+0x424>
				udi_cdc_putc(abyData[4]);
800051a4:	0c 9c       	mov	r12,r6
800051a6:	f0 1f 00 60 	mcall	80005324 <main+0x424>
				udi_cdc_putc(abyData[5]);
800051aa:	40 0c       	lddsp	r12,sp[0x0]
800051ac:	f0 1f 00 5e 	mcall	80005324 <main+0x424>
				
				udi_cdc_putc(rOUT_DATA_TEMP);
800051b0:	4e 68       	lddpc	r8,80005348 <main+0x448>
800051b2:	11 8c       	ld.ub	r12,r8[0x0]
800051b4:	f0 1f 00 5c 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rUSR_GAIN_X_CTRL); //15
800051b8:	4e 58       	lddpc	r8,8000534c <main+0x44c>
800051ba:	11 8c       	ld.ub	r12,r8[0x0]
800051bc:	f0 1f 00 5a 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rUSR_GAIN_Y_CTRL);
800051c0:	4e 48       	lddpc	r8,80005350 <main+0x450>
800051c2:	11 8c       	ld.ub	r12,r8[0x0]
800051c4:	f0 1f 00 58 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rUSR_GAIN_Z_CTRL);
800051c8:	4e 38       	lddpc	r8,80005354 <main+0x454>
800051ca:	11 8c       	ld.ub	r12,r8[0x0]
800051cc:	f0 1f 00 56 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rUSR_OFS_X_CTRL);
800051d0:	4e 28       	lddpc	r8,80005358 <main+0x458>
800051d2:	11 8c       	ld.ub	r12,r8[0x0]
800051d4:	f0 1f 00 54 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rUSR_OFS_Y_CTRL);
800051d8:	4e 18       	lddpc	r8,8000535c <main+0x45c>
800051da:	11 8c       	ld.ub	r12,r8[0x0]
800051dc:	f0 1f 00 52 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rUSR_OFS_Z_CTRL); //20
800051e0:	4e 08       	lddpc	r8,80005360 <main+0x460>
800051e2:	11 8c       	ld.ub	r12,r8[0x0]
800051e4:	f0 1f 00 50 	mcall	80005324 <main+0x424>

				udi_cdc_putc(rDIGITAL_FILTER_CTRL);
800051e8:	4d f8       	lddpc	r8,80005364 <main+0x464>
800051ea:	11 8c       	ld.ub	r12,r8[0x0]
800051ec:	f0 1f 00 4e 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rINT_FUNC_CTRL1);
800051f0:	4d e8       	lddpc	r8,80005368 <main+0x468>
800051f2:	11 8c       	ld.ub	r12,r8[0x0]
800051f4:	f0 1f 00 4c 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rINT_FUNC_CTRL2);
800051f8:	4d d8       	lddpc	r8,8000536c <main+0x46c>
800051fa:	11 8c       	ld.ub	r12,r8[0x0]
800051fc:	f0 1f 00 4a 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rFIFO_CTRL);
80005200:	4d c8       	lddpc	r8,80005370 <main+0x470>
80005202:	11 8c       	ld.ub	r12,r8[0x0]
80005204:	f0 1f 00 48 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rFIFO_DATA_STATUS); //25
80005208:	4d b8       	lddpc	r8,80005374 <main+0x474>
8000520a:	11 8c       	ld.ub	r12,r8[0x0]
8000520c:	f0 1f 00 46 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rINT_FUNC_CTRL1_STATUS);
80005210:	4d a8       	lddpc	r8,80005378 <main+0x478>
80005212:	11 8c       	ld.ub	r12,r8[0x0]
80005214:	f0 1f 00 44 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rMOTION_CTRL);
80005218:	4d 98       	lddpc	r8,8000537c <main+0x47c>
8000521a:	11 8c       	ld.ub	r12,r8[0x0]
8000521c:	f0 1f 00 42 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rMOTION_STATUS);
80005220:	4d 88       	lddpc	r8,80005380 <main+0x480>
80005222:	11 8c       	ld.ub	r12,r8[0x0]
80005224:	f0 1f 00 40 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rMOTION_HIGH_TH);
80005228:	4d 78       	lddpc	r8,80005384 <main+0x484>
8000522a:	11 8c       	ld.ub	r12,r8[0x0]
8000522c:	f0 1f 00 3e 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rMOTION_HIGH_DUR);	//30
80005230:	4d 68       	lddpc	r8,80005388 <main+0x488>
80005232:	11 8c       	ld.ub	r12,r8[0x0]
80005234:	f0 1f 00 3c 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rMOTION_LOW_TH);
80005238:	4d 58       	lddpc	r8,8000538c <main+0x48c>
8000523a:	11 8c       	ld.ub	r12,r8[0x0]
8000523c:	f0 1f 00 3a 	mcall	80005324 <main+0x424>
				udi_cdc_putc(rMOTION_LOW_DUR); //32
80005240:	4d 48       	lddpc	r8,80005390 <main+0x490>
80005242:	11 8c       	ld.ub	r12,r8[0x0]
80005244:	f0 1f 00 38 	mcall	80005324 <main+0x424>
 * \return bool    \c true if the pin is in low logical level
 *                 \c false if the pin is not in low logical level
 */
__always_inline static bool gpio_pin_is_low(uint32_t pin)
{
	return (gpio_get_pin_value(pin) == 0);
80005248:	30 5c       	mov	r12,5
8000524a:	f0 1f 00 53 	mcall	80005394 <main+0x494>
				
				if(gpio_pin_is_low(AVR32_PIN_PA05)) 
8000524e:	c0 51       	brne	80005258 <main+0x358>
				{
					udi_cdc_putc(0);
80005250:	0e 9c       	mov	r12,r7
80005252:	f0 1f 00 35 	mcall	80005324 <main+0x424>
80005256:	c0 48       	rjmp	8000525e <main+0x35e>
				}
				else 
				{
					udi_cdc_putc(1);
80005258:	30 1c       	mov	r12,1
8000525a:	f0 1f 00 33 	mcall	80005324 <main+0x424>
				}
				udi_cdc_putc('\r');
8000525e:	30 dc       	mov	r12,13
80005260:	f0 1f 00 31 	mcall	80005324 <main+0x424>
				udi_cdc_putc('\n');
80005264:	30 ac       	mov	r12,10
80005266:	f0 1f 00 30 	mcall	80005324 <main+0x424>
8000526a:	fe 9f fe 9d 	bral	80004fa4 <main+0xa4>
8000526e:	00 00       	add	r0,r0
80005270:	80 00       	ld.sh	r0,r0[0x0]
80005272:	5d ac       	*unknown*
80005274:	80 00       	ld.sh	r0,r0[0x0]
80005276:	28 f8       	sub	r8,-113
80005278:	80 00       	ld.sh	r0,r0[0x0]
8000527a:	3a c8       	mov	r8,-84
8000527c:	80 00       	ld.sh	r0,r0[0x0]
8000527e:	25 98       	sub	r8,89
80005280:	80 00       	ld.sh	r0,r0[0x0]
80005282:	39 c8       	mov	r8,-100
80005284:	80 00       	ld.sh	r0,r0[0x0]
80005286:	25 78       	sub	r8,87
80005288:	80 00       	ld.sh	r0,r0[0x0]
8000528a:	25 5c       	sub	r12,85
8000528c:	80 00       	ld.sh	r0,r0[0x0]
8000528e:	49 98       	lddpc	r8,800052f0 <main+0x3f0>
80005290:	80 00       	ld.sh	r0,r0[0x0]
80005292:	4b 3c       	lddpc	r12,8000535c <main+0x45c>
80005294:	80 00       	ld.sh	r0,r0[0x0]
80005296:	28 78       	sub	r8,-121
80005298:	80 00       	ld.sh	r0,r0[0x0]
8000529a:	4b bc       	lddpc	r12,80005384 <main+0x484>
8000529c:	80 00       	ld.sh	r0,r0[0x0]
8000529e:	4e c8       	lddpc	r8,8000544c <__avr32_f64_mul_op1_subnormal+0x16>
800052a0:	80 00       	ld.sh	r0,r0[0x0]
800052a2:	5b 24       	cp.w	r4,-14
800052a4:	00 00       	add	r0,r0
800052a6:	00 f0       	st.b	--r0,r0
800052a8:	00 00       	add	r0,r0
800052aa:	07 8d       	ld.ub	sp,r3[0x0]
800052ac:	00 00       	add	r0,r0
800052ae:	07 80       	ld.ub	r0,r3[0x0]
800052b0:	00 00       	add	r0,r0
800052b2:	07 88       	ld.ub	r8,r3[0x0]
800052b4:	80 00       	ld.sh	r0,r0[0x0]
800052b6:	25 fc       	sub	r12,95
800052b8:	80 00       	ld.sh	r0,r0[0x0]
800052ba:	3c d0       	mov	r0,-51
800052bc:	80 00       	ld.sh	r0,r0[0x0]
800052be:	3e 0c       	mov	r12,-32
800052c0:	00 00       	add	r0,r0
800052c2:	08 54       	eor	r4,r4
800052c4:	00 00       	add	r0,r0
800052c6:	07 7c       	ld.ub	r12,--r3
800052c8:	00 00       	add	r0,r0
800052ca:	07 7d       	ld.ub	sp,--r3
800052cc:	00 00       	add	r0,r0
800052ce:	07 8e       	ld.ub	lr,r3[0x0]
800052d0:	00 00       	add	r0,r0
800052d2:	07 8c       	ld.ub	r12,r3[0x0]
800052d4:	00 00       	add	r0,r0
800052d6:	01 02       	ld.w	r2,r0++
800052d8:	80 00       	ld.sh	r0,r0[0x0]
800052da:	4e b0       	lddpc	r0,80005484 <__avr32_f64_mul_op2_subnormal+0xa>
800052dc:	00 00       	add	r0,r0
800052de:	00 eb       	st.h	--r0,r11
800052e0:	00 00       	add	r0,r0
800052e2:	07 aa       	ld.ub	r10,r3[0x2]
800052e4:	00 00       	add	r0,r0
800052e6:	08 60       	and	r0,r4
800052e8:	00 00       	add	r0,r0
800052ea:	07 a8       	ld.ub	r8,r3[0x2]
800052ec:	00 00       	add	r0,r0
800052ee:	07 ac       	ld.ub	r12,r3[0x2]
800052f0:	80 00       	ld.sh	r0,r0[0x0]
800052f2:	4c 3c       	lddpc	r12,800053fc <__avr32_f64_mul+0x60>
800052f4:	00 00       	add	r0,r0
800052f6:	07 78       	ld.ub	r8,--r3
800052f8:	00 00       	add	r0,r0
800052fa:	00 ee       	st.h	--r0,lr
800052fc:	00 00       	add	r0,r0
800052fe:	07 84       	ld.ub	r4,r3[0x0]
80005300:	00 00       	add	r0,r0
80005302:	00 f4       	st.b	--r0,r4
80005304:	00 00       	add	r0,r0
80005306:	00 f6       	st.b	--r0,r6
80005308:	00 00       	add	r0,r0
8000530a:	00 e4       	st.h	--r0,r4
8000530c:	00 00       	add	r0,r0
8000530e:	00 e7       	st.h	--r0,r7
80005310:	00 00       	add	r0,r0
80005312:	00 f8       	st.b	--r0,r8
80005314:	00 00       	add	r0,r0
80005316:	00 fa       	st.b	--r0,r10
80005318:	80 00       	ld.sh	r0,r0[0x0]
8000531a:	59 a4       	cp.w	r4,26
8000531c:	80 00       	ld.sh	r0,r0[0x0]
8000531e:	49 a4       	lddpc	r4,80005384 <main+0x484>
80005320:	80 00       	ld.sh	r0,r0[0x0]
80005322:	5a 18       	cp.w	r8,-31
80005324:	80 00       	ld.sh	r0,r0[0x0]
80005326:	3c 80       	mov	r0,-56
80005328:	00 00       	add	r0,r0
8000532a:	01 05       	ld.w	r5,r0++
8000532c:	00 00       	add	r0,r0
8000532e:	00 e6       	st.h	--r0,r6
80005330:	00 00       	add	r0,r0
80005332:	01 08       	ld.w	r8,r0++
80005334:	00 00       	add	r0,r0
80005336:	00 ff       	st.b	--r0,pc
80005338:	00 00       	add	r0,r0
8000533a:	01 00       	ld.w	r0,r0++
8000533c:	00 00       	add	r0,r0
8000533e:	01 01       	ld.w	r1,r0++
80005340:	00 00       	add	r0,r0
80005342:	01 07       	ld.w	r7,r0++
80005344:	00 00       	add	r0,r0
80005346:	00 fc       	st.b	--r0,r12
80005348:	00 00       	add	r0,r0
8000534a:	00 ec       	st.h	--r0,r12
8000534c:	00 00       	add	r0,r0
8000534e:	00 ea       	st.h	--r0,r10
80005350:	00 00       	add	r0,r0
80005352:	00 f5       	st.b	--r0,r5
80005354:	00 00       	add	r0,r0
80005356:	00 fe       	st.b	--r0,lr
80005358:	00 00       	add	r0,r0
8000535a:	01 06       	ld.w	r6,r0++
8000535c:	00 00       	add	r0,r0
8000535e:	00 ed       	st.h	--r0,sp
80005360:	00 00       	add	r0,r0
80005362:	00 fb       	st.b	--r0,r11
80005364:	00 00       	add	r0,r0
80005366:	00 e9       	st.h	--r0,r9
80005368:	00 00       	add	r0,r0
8000536a:	00 f1       	st.b	--r0,r1
8000536c:	00 00       	add	r0,r0
8000536e:	00 f2       	st.b	--r0,r2
80005370:	00 00       	add	r0,r0
80005372:	00 f9       	st.b	--r0,r9
80005374:	00 00       	add	r0,r0
80005376:	00 f7       	st.b	--r0,r7
80005378:	00 00       	add	r0,r0
8000537a:	01 03       	ld.w	r3,r0++
8000537c:	00 00       	add	r0,r0
8000537e:	00 ef       	st.h	--r0,pc
80005380:	00 00       	add	r0,r0
80005382:	00 f3       	st.b	--r0,r3
80005384:	00 00       	add	r0,r0
80005386:	00 fd       	st.b	--r0,sp
80005388:	00 00       	add	r0,r0
8000538a:	00 e8       	st.h	--r0,r8
8000538c:	00 00       	add	r0,r0
8000538e:	01 04       	ld.w	r4,r0++
80005390:	00 00       	add	r0,r0
80005392:	00 e5       	st.h	--r0,r5
80005394:	80 00       	ld.sh	r0,r0[0x0]
80005396:	28 60       	sub	r0,-122

80005398 <uart_rx_notify>:
	//{
		//udi_cdc_putc(udi_cdc_getc());
		//value = uart_getc();
	//}
#endif
}
80005398:	5e fc       	retal	r12

8000539a <uart_config>:
	USART->idr = 0xFFFFFFFF;
	usart_init_rs232(USART, &usart_options, sysclk_get_pba_hz());
	// Restore both RX and TX
	USART->ier = imr;
#endif
}
8000539a:	5e fc       	retal	r12

8000539c <__avr32_f64_mul>:
8000539c:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
800053a0:	e0 80 00 dc 	breq	80005558 <__avr32_f64_mul_op1_zero>
800053a4:	d4 21       	pushm	r4-r7,lr
800053a6:	f7 e9 20 0e 	eor	lr,r11,r9
800053aa:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800053ae:	30 15       	mov	r5,1
800053b0:	c4 30       	breq	80005436 <__avr32_f64_mul_op1_subnormal>
800053b2:	ab 6b       	lsl	r11,0xa
800053b4:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
800053b8:	ab 6a       	lsl	r10,0xa
800053ba:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
800053be:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800053c2:	c5 c0       	breq	8000547a <__avr32_f64_mul_op2_subnormal>
800053c4:	a1 78       	lsl	r8,0x1
800053c6:	5c f9       	rol	r9
800053c8:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
800053cc:	e0 47 07 ff 	cp.w	r7,2047
800053d0:	c7 70       	breq	800054be <__avr32_f64_mul_op_nan_or_inf>
800053d2:	e0 46 07 ff 	cp.w	r6,2047
800053d6:	c7 40       	breq	800054be <__avr32_f64_mul_op_nan_or_inf>
800053d8:	ee 06 00 0c 	add	r12,r7,r6
800053dc:	e0 2c 03 fe 	sub	r12,1022
800053e0:	f6 08 06 44 	mulu.d	r4,r11,r8
800053e4:	f4 09 07 44 	macu.d	r4,r10,r9
800053e8:	f4 08 06 46 	mulu.d	r6,r10,r8
800053ec:	f6 09 06 4a 	mulu.d	r10,r11,r9
800053f0:	08 07       	add	r7,r4
800053f2:	f4 05 00 4a 	adc	r10,r10,r5
800053f6:	5c 0b       	acr	r11
800053f8:	ed bb 00 14 	bld	r11,0x14
800053fc:	c0 50       	breq	80005406 <__avr32_f64_mul+0x6a>
800053fe:	a1 77       	lsl	r7,0x1
80005400:	5c fa       	rol	r10
80005402:	5c fb       	rol	r11
80005404:	20 1c       	sub	r12,1
80005406:	58 0c       	cp.w	r12,0
80005408:	e0 8a 00 6f 	brle	800054e6 <__avr32_f64_mul_res_subnormal>
8000540c:	e0 4c 07 ff 	cp.w	r12,2047
80005410:	e0 84 00 9c 	brge	80005548 <__avr32_f64_mul_res_inf>
80005414:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80005418:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000541c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80005420:	ee 17 80 00 	eorh	r7,0x8000
80005424:	f1 b7 04 20 	satu	r7,0x1
80005428:	0e 0a       	add	r10,r7
8000542a:	5c 0b       	acr	r11
8000542c:	ed be 00 1f 	bld	lr,0x1f
80005430:	ef bb 00 1f 	bst	r11,0x1f
80005434:	d8 22       	popm	r4-r7,pc

80005436 <__avr32_f64_mul_op1_subnormal>:
80005436:	e4 1b 00 0f 	andh	r11,0xf
8000543a:	f4 0c 12 00 	clz	r12,r10
8000543e:	f6 06 12 00 	clz	r6,r11
80005442:	f7 bc 03 e1 	sublo	r12,-31
80005446:	f8 06 17 30 	movlo	r6,r12
8000544a:	f7 b6 02 01 	subhs	r6,1
8000544e:	e0 46 00 20 	cp.w	r6,32
80005452:	c0 d4       	brge	8000546c <__avr32_f64_mul_op1_subnormal+0x36>
80005454:	ec 0c 11 20 	rsub	r12,r6,32
80005458:	f6 06 09 4b 	lsl	r11,r11,r6
8000545c:	f4 0c 0a 4c 	lsr	r12,r10,r12
80005460:	18 4b       	or	r11,r12
80005462:	f4 06 09 4a 	lsl	r10,r10,r6
80005466:	20 b6       	sub	r6,11
80005468:	0c 17       	sub	r7,r6
8000546a:	ca ab       	rjmp	800053be <__avr32_f64_mul+0x22>
8000546c:	f4 06 09 4b 	lsl	r11,r10,r6
80005470:	c6 40       	breq	80005538 <__avr32_f64_mul_res_zero>
80005472:	30 0a       	mov	r10,0
80005474:	20 b6       	sub	r6,11
80005476:	0c 17       	sub	r7,r6
80005478:	ca 3b       	rjmp	800053be <__avr32_f64_mul+0x22>

8000547a <__avr32_f64_mul_op2_subnormal>:
8000547a:	e4 19 00 0f 	andh	r9,0xf
8000547e:	f0 0c 12 00 	clz	r12,r8
80005482:	f2 05 12 00 	clz	r5,r9
80005486:	f7 bc 03 ea 	sublo	r12,-22
8000548a:	f8 05 17 30 	movlo	r5,r12
8000548e:	f7 b5 02 0a 	subhs	r5,10
80005492:	e0 45 00 20 	cp.w	r5,32
80005496:	c0 d4       	brge	800054b0 <__avr32_f64_mul_op2_subnormal+0x36>
80005498:	ea 0c 11 20 	rsub	r12,r5,32
8000549c:	f2 05 09 49 	lsl	r9,r9,r5
800054a0:	f0 0c 0a 4c 	lsr	r12,r8,r12
800054a4:	18 49       	or	r9,r12
800054a6:	f0 05 09 48 	lsl	r8,r8,r5
800054aa:	20 25       	sub	r5,2
800054ac:	0a 16       	sub	r6,r5
800054ae:	c8 fb       	rjmp	800053cc <__avr32_f64_mul+0x30>
800054b0:	f0 05 09 49 	lsl	r9,r8,r5
800054b4:	c4 20       	breq	80005538 <__avr32_f64_mul_res_zero>
800054b6:	30 08       	mov	r8,0
800054b8:	20 25       	sub	r5,2
800054ba:	0a 16       	sub	r6,r5
800054bc:	c8 8b       	rjmp	800053cc <__avr32_f64_mul+0x30>

800054be <__avr32_f64_mul_op_nan_or_inf>:
800054be:	e4 19 00 0f 	andh	r9,0xf
800054c2:	e4 1b 00 0f 	andh	r11,0xf
800054c6:	14 4b       	or	r11,r10
800054c8:	10 49       	or	r9,r8
800054ca:	e0 47 07 ff 	cp.w	r7,2047
800054ce:	c0 91       	brne	800054e0 <__avr32_f64_mul_op1_not_naninf>
800054d0:	58 0b       	cp.w	r11,0
800054d2:	c3 81       	brne	80005542 <__avr32_f64_mul_res_nan>
800054d4:	e0 46 07 ff 	cp.w	r6,2047
800054d8:	c3 81       	brne	80005548 <__avr32_f64_mul_res_inf>
800054da:	58 09       	cp.w	r9,0
800054dc:	c3 60       	breq	80005548 <__avr32_f64_mul_res_inf>
800054de:	c3 28       	rjmp	80005542 <__avr32_f64_mul_res_nan>

800054e0 <__avr32_f64_mul_op1_not_naninf>:
800054e0:	58 09       	cp.w	r9,0
800054e2:	c3 30       	breq	80005548 <__avr32_f64_mul_res_inf>
800054e4:	c2 f8       	rjmp	80005542 <__avr32_f64_mul_res_nan>

800054e6 <__avr32_f64_mul_res_subnormal>:
800054e6:	5c 3c       	neg	r12
800054e8:	2f fc       	sub	r12,-1
800054ea:	f1 bc 04 c0 	satu	r12,0x6
800054ee:	e0 4c 00 20 	cp.w	r12,32
800054f2:	c1 14       	brge	80005514 <__avr32_f64_mul_res_subnormal+0x2e>
800054f4:	f8 08 11 20 	rsub	r8,r12,32
800054f8:	0e 46       	or	r6,r7
800054fa:	ee 0c 0a 47 	lsr	r7,r7,r12
800054fe:	f4 08 09 49 	lsl	r9,r10,r8
80005502:	12 47       	or	r7,r9
80005504:	f4 0c 0a 4a 	lsr	r10,r10,r12
80005508:	f6 08 09 49 	lsl	r9,r11,r8
8000550c:	12 4a       	or	r10,r9
8000550e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80005512:	c8 3b       	rjmp	80005418 <__avr32_f64_mul+0x7c>
80005514:	f8 08 11 20 	rsub	r8,r12,32
80005518:	f9 b9 00 00 	moveq	r9,0
8000551c:	c0 30       	breq	80005522 <__avr32_f64_mul_res_subnormal+0x3c>
8000551e:	f6 08 09 49 	lsl	r9,r11,r8
80005522:	0e 46       	or	r6,r7
80005524:	ed ea 10 16 	or	r6,r6,r10<<0x1
80005528:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000552c:	f3 ea 10 07 	or	r7,r9,r10
80005530:	f6 0c 0a 4a 	lsr	r10,r11,r12
80005534:	30 0b       	mov	r11,0
80005536:	c7 1b       	rjmp	80005418 <__avr32_f64_mul+0x7c>

80005538 <__avr32_f64_mul_res_zero>:
80005538:	1c 9b       	mov	r11,lr
8000553a:	e6 1b 80 00 	andh	r11,0x8000,COH
8000553e:	30 0a       	mov	r10,0
80005540:	d8 22       	popm	r4-r7,pc

80005542 <__avr32_f64_mul_res_nan>:
80005542:	3f fb       	mov	r11,-1
80005544:	3f fa       	mov	r10,-1
80005546:	d8 22       	popm	r4-r7,pc

80005548 <__avr32_f64_mul_res_inf>:
80005548:	f0 6b 00 00 	mov	r11,-1048576
8000554c:	ed be 00 1f 	bld	lr,0x1f
80005550:	ef bb 00 1f 	bst	r11,0x1f
80005554:	30 0a       	mov	r10,0
80005556:	d8 22       	popm	r4-r7,pc

80005558 <__avr32_f64_mul_op1_zero>:
80005558:	f7 e9 20 0b 	eor	r11,r11,r9
8000555c:	e6 1b 80 00 	andh	r11,0x8000,COH
80005560:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80005564:	e0 4c 07 ff 	cp.w	r12,2047
80005568:	5e 1c       	retne	r12
8000556a:	3f fa       	mov	r10,-1
8000556c:	3f fb       	mov	r11,-1
8000556e:	5e fc       	retal	r12

80005570 <__avr32_f64_sub_from_add>:
80005570:	ee 19 80 00 	eorh	r9,0x8000

80005574 <__avr32_f64_sub>:
80005574:	f7 e9 20 0c 	eor	r12,r11,r9
80005578:	e0 86 00 ca 	brmi	8000570c <__avr32_f64_add_from_sub>
8000557c:	eb cd 40 e0 	pushm	r5-r7,lr
80005580:	16 9c       	mov	r12,r11
80005582:	e6 1c 80 00 	andh	r12,0x8000,COH
80005586:	bf db       	cbr	r11,0x1f
80005588:	bf d9       	cbr	r9,0x1f
8000558a:	10 3a       	cp.w	r10,r8
8000558c:	f2 0b 13 00 	cpc	r11,r9
80005590:	c0 92       	brcc	800055a2 <__avr32_f64_sub+0x2e>
80005592:	16 97       	mov	r7,r11
80005594:	12 9b       	mov	r11,r9
80005596:	0e 99       	mov	r9,r7
80005598:	14 97       	mov	r7,r10
8000559a:	10 9a       	mov	r10,r8
8000559c:	0e 98       	mov	r8,r7
8000559e:	ee 1c 80 00 	eorh	r12,0x8000
800055a2:	f6 07 16 14 	lsr	r7,r11,0x14
800055a6:	ab 7b       	lsl	r11,0xb
800055a8:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800055ac:	ab 7a       	lsl	r10,0xb
800055ae:	bf bb       	sbr	r11,0x1f
800055b0:	f2 06 16 14 	lsr	r6,r9,0x14
800055b4:	c4 50       	breq	8000563e <__avr32_f64_sub_opL_subnormal>
800055b6:	ab 79       	lsl	r9,0xb
800055b8:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800055bc:	ab 78       	lsl	r8,0xb
800055be:	bf b9       	sbr	r9,0x1f

800055c0 <__avr32_f64_sub_opL_subnormal_done>:
800055c0:	e0 47 07 ff 	cp.w	r7,2047
800055c4:	c5 00       	breq	80005664 <__avr32_f64_sub_opH_nan_or_inf>
800055c6:	0e 26       	rsub	r6,r7
800055c8:	c1 20       	breq	800055ec <__avr32_f64_sub_shift_done>
800055ca:	ec 05 11 20 	rsub	r5,r6,32
800055ce:	e0 46 00 20 	cp.w	r6,32
800055d2:	c7 d2       	brcc	800056cc <__avr32_f64_sub_longshift>
800055d4:	f0 05 09 4e 	lsl	lr,r8,r5
800055d8:	f2 05 09 45 	lsl	r5,r9,r5
800055dc:	f0 06 0a 48 	lsr	r8,r8,r6
800055e0:	f2 06 0a 49 	lsr	r9,r9,r6
800055e4:	0a 48       	or	r8,r5
800055e6:	58 0e       	cp.w	lr,0
800055e8:	5f 1e       	srne	lr
800055ea:	1c 48       	or	r8,lr

800055ec <__avr32_f64_sub_shift_done>:
800055ec:	10 1a       	sub	r10,r8
800055ee:	f6 09 01 4b 	sbc	r11,r11,r9
800055f2:	f6 06 12 00 	clz	r6,r11
800055f6:	c0 e0       	breq	80005612 <__avr32_f64_sub_longnormalize_done>
800055f8:	c7 93       	brcs	800056ea <__avr32_f64_sub_longnormalize>
800055fa:	ec 0e 11 20 	rsub	lr,r6,32
800055fe:	f6 06 09 4b 	lsl	r11,r11,r6
80005602:	f4 0e 0a 4e 	lsr	lr,r10,lr
80005606:	1c 4b       	or	r11,lr
80005608:	f4 06 09 4a 	lsl	r10,r10,r6
8000560c:	0c 17       	sub	r7,r6
8000560e:	e0 8a 00 3a 	brle	80005682 <__avr32_f64_sub_subnormal_result>

80005612 <__avr32_f64_sub_longnormalize_done>:
80005612:	f4 09 15 15 	lsl	r9,r10,0x15
80005616:	ab 9a       	lsr	r10,0xb
80005618:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000561c:	ab 9b       	lsr	r11,0xb
8000561e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80005622:	18 4b       	or	r11,r12

80005624 <__avr32_f64_sub_round>:
80005624:	30 07       	mov	r7,0
80005626:	ea 17 80 00 	orh	r7,0x8000
8000562a:	ed ba 00 00 	bld	r10,0x0
8000562e:	f7 b7 01 ff 	subne	r7,-1
80005632:	0e 39       	cp.w	r9,r7
80005634:	5f 29       	srhs	r9
80005636:	12 0a       	add	r10,r9
80005638:	5c 0b       	acr	r11
8000563a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000563e <__avr32_f64_sub_opL_subnormal>:
8000563e:	ab 79       	lsl	r9,0xb
80005640:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80005644:	ab 78       	lsl	r8,0xb
80005646:	f3 e8 10 0e 	or	lr,r9,r8
8000564a:	f9 b6 01 01 	movne	r6,1
8000564e:	ee 0e 11 00 	rsub	lr,r7,0
80005652:	f9 b7 00 01 	moveq	r7,1
80005656:	ef bb 00 1f 	bst	r11,0x1f
8000565a:	f7 ea 10 0e 	or	lr,r11,r10
8000565e:	f9 b7 00 00 	moveq	r7,0
80005662:	ca fb       	rjmp	800055c0 <__avr32_f64_sub_opL_subnormal_done>

80005664 <__avr32_f64_sub_opH_nan_or_inf>:
80005664:	bf db       	cbr	r11,0x1f
80005666:	f7 ea 10 0e 	or	lr,r11,r10
8000566a:	c0 81       	brne	8000567a <__avr32_f64_sub_return_nan>
8000566c:	e0 46 07 ff 	cp.w	r6,2047
80005670:	c0 50       	breq	8000567a <__avr32_f64_sub_return_nan>
80005672:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80005676:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000567a <__avr32_f64_sub_return_nan>:
8000567a:	3f fa       	mov	r10,-1
8000567c:	3f fb       	mov	r11,-1
8000567e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005682 <__avr32_f64_sub_subnormal_result>:
80005682:	5c 37       	neg	r7
80005684:	2f f7       	sub	r7,-1
80005686:	f1 b7 04 c0 	satu	r7,0x6
8000568a:	e0 47 00 20 	cp.w	r7,32
8000568e:	c1 14       	brge	800056b0 <__avr32_f64_sub_subnormal_result+0x2e>
80005690:	ee 08 11 20 	rsub	r8,r7,32
80005694:	f4 08 09 49 	lsl	r9,r10,r8
80005698:	5f 16       	srne	r6
8000569a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000569e:	0c 4a       	or	r10,r6
800056a0:	f6 08 09 49 	lsl	r9,r11,r8
800056a4:	f5 e9 10 0a 	or	r10,r10,r9
800056a8:	f4 07 0a 4b 	lsr	r11,r10,r7
800056ac:	30 07       	mov	r7,0
800056ae:	cb 2b       	rjmp	80005612 <__avr32_f64_sub_longnormalize_done>
800056b0:	ee 08 11 40 	rsub	r8,r7,64
800056b4:	f6 08 09 49 	lsl	r9,r11,r8
800056b8:	14 49       	or	r9,r10
800056ba:	5f 16       	srne	r6
800056bc:	f6 07 0a 4a 	lsr	r10,r11,r7
800056c0:	0c 4a       	or	r10,r6
800056c2:	30 0b       	mov	r11,0
800056c4:	30 07       	mov	r7,0
800056c6:	ca 6b       	rjmp	80005612 <__avr32_f64_sub_longnormalize_done>
800056c8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800056cc <__avr32_f64_sub_longshift>:
800056cc:	f1 b6 04 c0 	satu	r6,0x6
800056d0:	f0 0e 17 00 	moveq	lr,r8
800056d4:	c0 40       	breq	800056dc <__avr32_f64_sub_longshift+0x10>
800056d6:	f2 05 09 4e 	lsl	lr,r9,r5
800056da:	10 4e       	or	lr,r8
800056dc:	f2 06 0a 48 	lsr	r8,r9,r6
800056e0:	30 09       	mov	r9,0
800056e2:	58 0e       	cp.w	lr,0
800056e4:	5f 1e       	srne	lr
800056e6:	1c 48       	or	r8,lr
800056e8:	c8 2b       	rjmp	800055ec <__avr32_f64_sub_shift_done>

800056ea <__avr32_f64_sub_longnormalize>:
800056ea:	f4 06 12 00 	clz	r6,r10
800056ee:	f9 b7 03 00 	movlo	r7,0
800056f2:	f9 b6 03 00 	movlo	r6,0
800056f6:	f9 bc 03 00 	movlo	r12,0
800056fa:	f7 b6 02 e0 	subhs	r6,-32
800056fe:	f4 06 09 4b 	lsl	r11,r10,r6
80005702:	30 0a       	mov	r10,0
80005704:	0c 17       	sub	r7,r6
80005706:	fe 9a ff be 	brle	80005682 <__avr32_f64_sub_subnormal_result>
8000570a:	c8 4b       	rjmp	80005612 <__avr32_f64_sub_longnormalize_done>

8000570c <__avr32_f64_add_from_sub>:
8000570c:	ee 19 80 00 	eorh	r9,0x8000

80005710 <__avr32_f64_add>:
80005710:	f7 e9 20 0c 	eor	r12,r11,r9
80005714:	fe 96 ff 2e 	brmi	80005570 <__avr32_f64_sub_from_add>
80005718:	eb cd 40 e0 	pushm	r5-r7,lr
8000571c:	16 9c       	mov	r12,r11
8000571e:	e6 1c 80 00 	andh	r12,0x8000,COH
80005722:	bf db       	cbr	r11,0x1f
80005724:	bf d9       	cbr	r9,0x1f
80005726:	12 3b       	cp.w	r11,r9
80005728:	c0 72       	brcc	80005736 <__avr32_f64_add+0x26>
8000572a:	16 97       	mov	r7,r11
8000572c:	12 9b       	mov	r11,r9
8000572e:	0e 99       	mov	r9,r7
80005730:	14 97       	mov	r7,r10
80005732:	10 9a       	mov	r10,r8
80005734:	0e 98       	mov	r8,r7
80005736:	30 0e       	mov	lr,0
80005738:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000573c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80005740:	b5 ab       	sbr	r11,0x14
80005742:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80005746:	c6 30       	breq	8000580c <__avr32_f64_add_op2_subnormal>
80005748:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000574c:	b5 a9       	sbr	r9,0x14
8000574e:	e0 47 07 ff 	cp.w	r7,2047
80005752:	c2 80       	breq	800057a2 <__avr32_f64_add_opH_nan_or_inf>
80005754:	0e 26       	rsub	r6,r7
80005756:	c1 20       	breq	8000577a <__avr32_f64_add_shift_done>
80005758:	e0 46 00 36 	cp.w	r6,54
8000575c:	c1 52       	brcc	80005786 <__avr32_f64_add_res_of_done>
8000575e:	ec 05 11 20 	rsub	r5,r6,32
80005762:	e0 46 00 20 	cp.w	r6,32
80005766:	c3 62       	brcc	800057d2 <__avr32_f64_add_longshift>
80005768:	f0 05 09 4e 	lsl	lr,r8,r5
8000576c:	f2 05 09 45 	lsl	r5,r9,r5
80005770:	f0 06 0a 48 	lsr	r8,r8,r6
80005774:	f2 06 0a 49 	lsr	r9,r9,r6
80005778:	0a 48       	or	r8,r5

8000577a <__avr32_f64_add_shift_done>:
8000577a:	10 0a       	add	r10,r8
8000577c:	f6 09 00 4b 	adc	r11,r11,r9
80005780:	ed bb 00 15 	bld	r11,0x15
80005784:	c3 50       	breq	800057ee <__avr32_f64_add_res_of>

80005786 <__avr32_f64_add_res_of_done>:
80005786:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000578a:	18 4b       	or	r11,r12

8000578c <__avr32_f64_add_round>:
8000578c:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80005790:	18 4e       	or	lr,r12
80005792:	ee 1e 80 00 	eorh	lr,0x8000
80005796:	f1 be 04 20 	satu	lr,0x1
8000579a:	1c 0a       	add	r10,lr
8000579c:	5c 0b       	acr	r11
8000579e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800057a2 <__avr32_f64_add_opH_nan_or_inf>:
800057a2:	b5 cb       	cbr	r11,0x14
800057a4:	f7 ea 10 0e 	or	lr,r11,r10
800057a8:	c1 11       	brne	800057ca <__avr32_f64_add_return_nan>
800057aa:	e0 46 07 ff 	cp.w	r6,2047
800057ae:	c0 30       	breq	800057b4 <__avr32_f64_add_opL_nan_or_inf>
800057b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800057b4 <__avr32_f64_add_opL_nan_or_inf>:
800057b4:	b5 c9       	cbr	r9,0x14
800057b6:	f3 e8 10 0e 	or	lr,r9,r8
800057ba:	c0 81       	brne	800057ca <__avr32_f64_add_return_nan>
800057bc:	30 0a       	mov	r10,0
800057be:	30 0b       	mov	r11,0
800057c0:	ea 1b 7f f0 	orh	r11,0x7ff0
800057c4:	18 4b       	or	r11,r12
800057c6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800057ca <__avr32_f64_add_return_nan>:
800057ca:	3f fa       	mov	r10,-1
800057cc:	3f fb       	mov	r11,-1
800057ce:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800057d2 <__avr32_f64_add_longshift>:
800057d2:	f1 b6 04 c0 	satu	r6,0x6
800057d6:	f0 0e 17 00 	moveq	lr,r8
800057da:	c0 60       	breq	800057e6 <__avr32_f64_add_longshift+0x14>
800057dc:	f2 05 09 4e 	lsl	lr,r9,r5
800057e0:	58 08       	cp.w	r8,0
800057e2:	5f 18       	srne	r8
800057e4:	10 4e       	or	lr,r8
800057e6:	f2 06 0a 48 	lsr	r8,r9,r6
800057ea:	30 09       	mov	r9,0
800057ec:	cc 7b       	rjmp	8000577a <__avr32_f64_add_shift_done>

800057ee <__avr32_f64_add_res_of>:
800057ee:	fd ee 10 1e 	or	lr,lr,lr<<0x1
800057f2:	a1 9b       	lsr	r11,0x1
800057f4:	5d 0a       	ror	r10
800057f6:	5d 0e       	ror	lr
800057f8:	2f f7       	sub	r7,-1
800057fa:	e0 47 07 ff 	cp.w	r7,2047
800057fe:	f9 ba 00 00 	moveq	r10,0
80005802:	f9 bb 00 00 	moveq	r11,0
80005806:	f9 be 00 00 	moveq	lr,0
8000580a:	cb eb       	rjmp	80005786 <__avr32_f64_add_res_of_done>

8000580c <__avr32_f64_add_op2_subnormal>:
8000580c:	30 16       	mov	r6,1
8000580e:	58 07       	cp.w	r7,0
80005810:	c9 f1       	brne	8000574e <__avr32_f64_add+0x3e>
80005812:	b5 cb       	cbr	r11,0x14
80005814:	10 0a       	add	r10,r8
80005816:	f6 09 00 4b 	adc	r11,r11,r9
8000581a:	18 4b       	or	r11,r12
8000581c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005820 <__avr32_f32_sub_from_add>:
80005820:	ee 1b 80 00 	eorh	r11,0x8000

80005824 <__avr32_f32_sub>:
80005824:	f7 ec 20 08 	eor	r8,r11,r12
80005828:	c6 66       	brmi	800058f4 <__avr32_f32_add_from_sub>
8000582a:	18 98       	mov	r8,r12
8000582c:	e6 1c 80 00 	andh	r12,0x8000,COH
80005830:	bf db       	cbr	r11,0x1f
80005832:	bf d8       	cbr	r8,0x1f
80005834:	f0 0b 0c 4a 	max	r10,r8,r11
80005838:	f0 0b 0d 49 	min	r9,r8,r11
8000583c:	10 3a       	cp.w	r10,r8
8000583e:	f7 bc 01 01 	subne	r12,1
80005842:	e6 1c 80 00 	andh	r12,0x8000,COH
80005846:	f4 08 15 08 	lsl	r8,r10,0x8
8000584a:	bf b8       	sbr	r8,0x1f
8000584c:	b7 9a       	lsr	r10,0x17
8000584e:	e0 4a 00 ff 	cp.w	r10,255
80005852:	c3 90       	breq	800058c4 <__avr32_f32_sub_op1_nan_or_inf>
80005854:	f2 0b 15 08 	lsl	r11,r9,0x8
80005858:	bf bb       	sbr	r11,0x1f
8000585a:	b7 99       	lsr	r9,0x17
8000585c:	1a dc       	st.w	--sp,r12
8000585e:	c2 a0       	breq	800058b2 <__avr32_f32_sub_op2_subnormal>
80005860:	f4 09 01 0c 	sub	r12,r10,r9
80005864:	c0 c0       	breq	8000587c <__avr32_f32_sub_shift_done>
80005866:	f1 bc 04 a0 	satu	r12,0x5
8000586a:	f8 09 11 20 	rsub	r9,r12,32
8000586e:	f6 09 09 49 	lsl	r9,r11,r9
80005872:	f7 b8 01 01 	subne	r8,1
80005876:	5f 19       	srne	r9
80005878:	f6 0c 0a 4b 	lsr	r11,r11,r12

8000587c <__avr32_f32_sub_shift_done>:
8000587c:	16 18       	sub	r8,r11
8000587e:	1b 0c       	ld.w	r12,sp++
80005880:	f0 0b 12 00 	clz	r11,r8
80005884:	5e 3d       	retlo	0
80005886:	f0 0b 09 48 	lsl	r8,r8,r11
8000588a:	16 1a       	sub	r10,r11
8000588c:	e0 8a 00 27 	brle	800058da <__avr32_f32_sub_subnormal_result>
80005890:	f3 e8 11 89 	or	r9,r9,r8<<0x18
80005894:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
80005898:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8

8000589c <__avr32_f32_sub_round>:
8000589c:	30 0a       	mov	r10,0
8000589e:	ea 1a 80 00 	orh	r10,0x8000
800058a2:	ed bc 00 00 	bld	r12,0x0
800058a6:	f7 ba 01 ff 	subne	r10,-1
800058aa:	14 39       	cp.w	r9,r10
800058ac:	f7 bc 02 ff 	subhs	r12,-1
800058b0:	5e fc       	retal	r12

800058b2 <__avr32_f32_sub_op2_subnormal>:
800058b2:	bf db       	cbr	r11,0x1f
800058b4:	f9 b9 01 01 	movne	r9,1
800058b8:	58 0a       	cp.w	r10,0
800058ba:	cd 31       	brne	80005860 <__avr32_f32_sub+0x3c>
800058bc:	bf d8       	cbr	r8,0x1f
800058be:	f9 ba 01 01 	movne	r10,1
800058c2:	cc fb       	rjmp	80005860 <__avr32_f32_sub+0x3c>

800058c4 <__avr32_f32_sub_op1_nan_or_inf>:
800058c4:	f0 0b 15 01 	lsl	r11,r8,0x1
800058c8:	5e 1e       	retne	-1
800058ca:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800058ce:	f2 0b 16 17 	lsr	r11,r9,0x17
800058d2:	e0 4b 00 ff 	cp.w	r11,255
800058d6:	5e 1c       	retne	r12
800058d8:	5e fe       	retal	-1

800058da <__avr32_f32_sub_subnormal_result>:
800058da:	f4 0a 11 09 	rsub	r10,r10,9
800058de:	f4 0b 11 20 	rsub	r11,r10,32
800058e2:	5e 3d       	retlo	0
800058e4:	f0 0a 0a 4a 	lsr	r10,r8,r10
800058e8:	14 4c       	or	r12,r10
800058ea:	f0 0b 09 48 	lsl	r8,r8,r11
800058ee:	10 49       	or	r9,r8
800058f0:	cd 6b       	rjmp	8000589c <__avr32_f32_sub_round>
800058f2:	d7 03       	nop

800058f4 <__avr32_f32_add_from_sub>:
800058f4:	ee 1b 80 00 	eorh	r11,0x8000

800058f8 <__avr32_f32_add>:
800058f8:	f7 ec 20 08 	eor	r8,r11,r12
800058fc:	c9 26       	brmi	80005820 <__avr32_f32_sub_from_add>
800058fe:	18 98       	mov	r8,r12
80005900:	e6 1c 80 00 	andh	r12,0x8000,COH
80005904:	bf db       	cbr	r11,0x1f
80005906:	bf d8       	cbr	r8,0x1f
80005908:	f0 0b 0c 4a 	max	r10,r8,r11
8000590c:	f0 0b 0d 49 	min	r9,r8,r11
80005910:	f4 08 15 08 	lsl	r8,r10,0x8
80005914:	bf b8       	sbr	r8,0x1f
80005916:	b7 9a       	lsr	r10,0x17
80005918:	e0 4a 00 ff 	cp.w	r10,255
8000591c:	c2 e0       	breq	80005978 <__avr32_f32_add_op1_nan_or_inf>
8000591e:	f2 0b 15 08 	lsl	r11,r9,0x8
80005922:	bf bb       	sbr	r11,0x1f
80005924:	b7 99       	lsr	r9,0x17
80005926:	c1 f0       	breq	80005964 <__avr32_f32_add_op2_subnormal>
80005928:	1a dc       	st.w	--sp,r12
8000592a:	14 29       	rsub	r9,r10
8000592c:	f1 b9 04 a0 	satu	r9,0x5
80005930:	f6 09 0a 4c 	lsr	r12,r11,r9
80005934:	f2 09 11 18 	rsub	r9,r9,24
80005938:	f6 09 09 4b 	lsl	r11,r11,r9
8000593c:	f7 dc d3 08 	bfins	r11,r12,0x18,0x8
80005940:	18 08       	add	r8,r12
80005942:	1b 0c       	ld.w	r12,sp++
80005944:	c2 73       	brcs	80005992 <__avr32_f32_add_res_of>
80005946:	f9 e8 12 8c 	or	r12,r12,r8>>0x8
8000594a:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
8000594e:	30 0a       	mov	r10,0
80005950:	ea 1a 80 00 	orh	r10,0x8000
80005954:	ed bc 00 00 	bld	r12,0x0
80005958:	f7 ba 01 ff 	subne	r10,-1
8000595c:	14 3b       	cp.w	r11,r10
8000595e:	f7 bc 02 ff 	subhs	r12,-1
80005962:	5e fc       	retal	r12

80005964 <__avr32_f32_add_op2_subnormal>:
80005964:	bf db       	cbr	r11,0x1f
80005966:	f9 b9 01 01 	movne	r9,1
8000596a:	58 0a       	cp.w	r10,0
8000596c:	cd e1       	brne	80005928 <__avr32_f32_add+0x30>
8000596e:	bf d8       	cbr	r8,0x1f
80005970:	10 0b       	add	r11,r8
80005972:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
80005976:	5e fc       	retal	r12

80005978 <__avr32_f32_add_op1_nan_or_inf>:
80005978:	f0 0b 15 01 	lsl	r11,r8,0x1
8000597c:	5e 1e       	retne	-1
8000597e:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80005982:	f2 0b 16 17 	lsr	r11,r9,0x17
80005986:	e0 4b 00 ff 	cp.w	r11,255
8000598a:	5e 1c       	retne	r12
8000598c:	a9 79       	lsl	r9,0x9
8000598e:	5e 0c       	reteq	r12
80005990:	5e fe       	retal	-1

80005992 <__avr32_f32_add_res_of>:
80005992:	a1 98       	lsr	r8,0x1
80005994:	2f fa       	sub	r10,-1
80005996:	e0 4a 00 ff 	cp.w	r10,255
8000599a:	f9 b8 00 00 	moveq	r8,0
8000599e:	f9 bb 00 00 	moveq	r11,0
800059a2:	cd 2b       	rjmp	80005946 <__avr32_f32_add+0x4e>

800059a4 <__avr32_s32_to_f32>:
800059a4:	58 0c       	cp.w	r12,0
800059a6:	5e 0c       	reteq	r12
800059a8:	18 9b       	mov	r11,r12
800059aa:	5c 4c       	abs	r12
800059ac:	e0 6a 00 9e 	mov	r10,158
800059b0:	f8 09 12 00 	clz	r9,r12
800059b4:	12 1a       	sub	r10,r9
800059b6:	f8 09 09 4c 	lsl	r12,r12,r9
800059ba:	58 0a       	cp.w	r10,0
800059bc:	e0 8a 00 15 	brle	800059e6 <__avr32_s32_to_f32_subnormal>
800059c0:	37 f9       	mov	r9,127
800059c2:	ed bc 00 08 	bld	r12,0x8
800059c6:	f7 b9 00 ff 	subeq	r9,-1
800059ca:	12 0c       	add	r12,r9
800059cc:	f7 ba 03 fe 	sublo	r10,-2
800059d0:	ed bc 00 1f 	bld	r12,0x1f
800059d4:	f7 ba 01 01 	subne	r10,1
800059d8:	f8 0c 16 07 	lsr	r12,r12,0x7
800059dc:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
800059e0:	a1 7b       	lsl	r11,0x1
800059e2:	5d 0c       	ror	r12
800059e4:	5e fc       	retal	r12

800059e6 <__avr32_s32_to_f32_subnormal>:
800059e6:	f4 0a 11 01 	rsub	r10,r10,1
800059ea:	59 9a       	cp.w	r10,25
800059ec:	f9 bc 02 00 	movhs	r12,0
800059f0:	c1 32       	brcc	80005a16 <__avr32_s32_to_f32_subnormal+0x30>
800059f2:	f4 09 11 20 	rsub	r9,r10,32
800059f6:	f8 09 09 49 	lsl	r9,r12,r9
800059fa:	5f 19       	srne	r9
800059fc:	f8 0a 0a 4c 	lsr	r12,r12,r10
80005a00:	12 4c       	or	r12,r9
80005a02:	37 f9       	mov	r9,127
80005a04:	ed bc 00 08 	bld	r12,0x8
80005a08:	f7 b9 00 ff 	subeq	r9,-1
80005a0c:	12 0c       	add	r12,r9
80005a0e:	f8 0c 16 07 	lsr	r12,r12,0x7
80005a12:	a1 7b       	lsl	r11,0x1
80005a14:	5d 0c       	ror	r12
80005a16:	5e fc       	retal	r12

80005a18 <__avr32_f32_to_s32>:
80005a18:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
80005a1c:	27 fb       	sub	r11,127
80005a1e:	5e 3d       	retlo	0
80005a20:	f6 0b 11 1f 	rsub	r11,r11,31
80005a24:	f8 0a 15 08 	lsl	r10,r12,0x8
80005a28:	bf ba       	sbr	r10,0x1f
80005a2a:	f4 0b 0a 4a 	lsr	r10,r10,r11
80005a2e:	a1 7c       	lsl	r12,0x1
80005a30:	5e 2a       	reths	r10
80005a32:	5c 3a       	neg	r10
80005a34:	5e fa       	retal	r10

80005a36 <__avr32_f32_to_f64>:
80005a36:	f8 0b 15 01 	lsl	r11,r12,0x1
80005a3a:	f9 ba 00 00 	moveq	r10,0
80005a3e:	5e 0b       	reteq	r11
80005a40:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80005a44:	e0 49 00 ff 	cp.w	r9,255
80005a48:	c1 e0       	breq	80005a84 <__extendsfdf_return_op1+0x6>
80005a4a:	a7 7b       	lsl	r11,0x7
80005a4c:	30 0a       	mov	r10,0
80005a4e:	58 09       	cp.w	r9,0
80005a50:	f7 b9 00 ff 	subeq	r9,-1
80005a54:	5f 18       	srne	r8
80005a56:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80005a5a:	fe 39 fc 80 	sub	r9,-896
80005a5e:	f6 08 12 00 	clz	r8,r11
80005a62:	10 19       	sub	r9,r8
80005a64:	f6 08 09 4b 	lsl	r11,r11,r8
80005a68:	ed bb 00 1f 	bld	r11,0x1f
80005a6c:	f7 b9 01 01 	subne	r9,1
80005a70:	ab 9a       	lsr	r10,0xb
80005a72:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005a76:	a1 7b       	lsl	r11,0x1
80005a78:	ab 9b       	lsr	r11,0xb
80005a7a:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80005a7e <__extendsfdf_return_op1>:
80005a7e:	a1 7c       	lsl	r12,0x1
80005a80:	5d 0b       	ror	r11
80005a82:	5e fb       	retal	r11
80005a84:	30 0a       	mov	r10,0
80005a86:	ea 1a ff e0 	orh	r10,0xffe0
80005a8a:	a9 6b       	lsl	r11,0x8
80005a8c:	f9 bb 01 ff 	movne	r11,-1
80005a90:	f4 0b 17 00 	moveq	r11,r10
80005a94:	30 0a       	mov	r10,0
80005a96:	cf 4b       	rjmp	80005a7e <__extendsfdf_return_op1>

80005a98 <__avr32_f64_to_f32>:
80005a98:	f6 09 15 01 	lsl	r9,r11,0x1
80005a9c:	b5 99       	lsr	r9,0x15
80005a9e:	5e 0d       	reteq	0
80005aa0:	f6 08 15 0a 	lsl	r8,r11,0xa
80005aa4:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80005aa8:	ab 6a       	lsl	r10,0xa
80005aaa:	5c 3a       	neg	r10
80005aac:	5c fc       	rol	r12
80005aae:	e0 49 07 ff 	cp.w	r9,2047
80005ab2:	c1 a0       	breq	80005ae6 <__truncdfsf_return_op1+0x6>
80005ab4:	e0 29 03 80 	sub	r9,896
80005ab8:	bf bc       	sbr	r12,0x1f
80005aba:	58 09       	cp.w	r9,0
80005abc:	e0 8a 00 1b 	brle	80005af2 <__truncdfsf_return_op1+0x12>
80005ac0:	37 fa       	mov	r10,127
80005ac2:	ed bc 00 08 	bld	r12,0x8
80005ac6:	f7 ba 00 ff 	subeq	r10,-1
80005aca:	14 0c       	add	r12,r10
80005acc:	f7 b9 03 fe 	sublo	r9,-2
80005ad0:	ed bc 00 1f 	bld	r12,0x1f
80005ad4:	f7 b9 01 01 	subne	r9,1
80005ad8:	f8 0c 16 07 	lsr	r12,r12,0x7
80005adc:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80005ae0 <__truncdfsf_return_op1>:
80005ae0:	a1 7b       	lsl	r11,0x1
80005ae2:	5d 0c       	ror	r12
80005ae4:	5e fc       	retal	r12
80005ae6:	bf dc       	cbr	r12,0x1f
80005ae8:	5e 1e       	retne	-1
80005aea:	30 0c       	mov	r12,0
80005aec:	ea 1c 7f 80 	orh	r12,0x7f80
80005af0:	5e fc       	retal	r12
80005af2:	f2 09 11 01 	rsub	r9,r9,1
80005af6:	59 99       	cp.w	r9,25
80005af8:	f9 bc 02 00 	movhs	r12,0
80005afc:	c1 32       	brcc	80005b22 <__truncdfsf_return_op1+0x42>
80005afe:	f2 0a 11 20 	rsub	r10,r9,32
80005b02:	f8 0a 09 4a 	lsl	r10,r12,r10
80005b06:	5f 1a       	srne	r10
80005b08:	f8 09 0a 4c 	lsr	r12,r12,r9
80005b0c:	14 4c       	or	r12,r10
80005b0e:	37 fa       	mov	r10,127
80005b10:	ed bc 00 08 	bld	r12,0x8
80005b14:	f7 ba 00 ff 	subeq	r10,-1
80005b18:	14 0c       	add	r12,r10
80005b1a:	f8 0c 16 07 	lsr	r12,r12,0x7
80005b1e:	a1 7b       	lsl	r11,0x1
80005b20:	5d 0c       	ror	r12
80005b22:	5e fc       	retal	r12

80005b24 <__avr32_udiv64>:
80005b24:	d4 31       	pushm	r0-r7,lr
80005b26:	1a 97       	mov	r7,sp
80005b28:	20 2d       	sub	sp,8
80005b2a:	10 9c       	mov	r12,r8
80005b2c:	12 9e       	mov	lr,r9
80005b2e:	14 93       	mov	r3,r10
80005b30:	58 09       	cp.w	r9,0
80005b32:	e0 81 00 cd 	brne	80005ccc <__avr32_udiv64+0x1a8>
80005b36:	16 38       	cp.w	r8,r11
80005b38:	e0 88 00 45 	brls	80005bc2 <__avr32_udiv64+0x9e>
80005b3c:	f0 08 12 00 	clz	r8,r8
80005b40:	c0 d0       	breq	80005b5a <__avr32_udiv64+0x36>
80005b42:	f6 08 09 4b 	lsl	r11,r11,r8
80005b46:	f0 09 11 20 	rsub	r9,r8,32
80005b4a:	f8 08 09 4c 	lsl	r12,r12,r8
80005b4e:	f4 09 0a 49 	lsr	r9,r10,r9
80005b52:	f4 08 09 43 	lsl	r3,r10,r8
80005b56:	f3 eb 10 0b 	or	r11,r9,r11
80005b5a:	f8 0e 16 10 	lsr	lr,r12,0x10
80005b5e:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80005b62:	f6 0e 0d 00 	divu	r0,r11,lr
80005b66:	e6 0b 16 10 	lsr	r11,r3,0x10
80005b6a:	00 99       	mov	r9,r0
80005b6c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005b70:	e0 0a 02 48 	mul	r8,r0,r10
80005b74:	10 3b       	cp.w	r11,r8
80005b76:	c0 d2       	brcc	80005b90 <__avr32_udiv64+0x6c>
80005b78:	20 19       	sub	r9,1
80005b7a:	18 0b       	add	r11,r12
80005b7c:	18 3b       	cp.w	r11,r12
80005b7e:	c0 93       	brcs	80005b90 <__avr32_udiv64+0x6c>
80005b80:	f2 c5 00 01 	sub	r5,r9,1
80005b84:	f6 0c 00 06 	add	r6,r11,r12
80005b88:	10 3b       	cp.w	r11,r8
80005b8a:	c0 32       	brcc	80005b90 <__avr32_udiv64+0x6c>
80005b8c:	0a 99       	mov	r9,r5
80005b8e:	0c 9b       	mov	r11,r6
80005b90:	f6 08 01 01 	sub	r1,r11,r8
80005b94:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80005b98:	e2 0e 0d 00 	divu	r0,r1,lr
80005b9c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80005ba0:	00 98       	mov	r8,r0
80005ba2:	e0 0a 02 4a 	mul	r10,r0,r10
80005ba6:	14 33       	cp.w	r3,r10
80005ba8:	c0 a2       	brcc	80005bbc <__avr32_udiv64+0x98>
80005baa:	20 18       	sub	r8,1
80005bac:	18 03       	add	r3,r12
80005bae:	18 33       	cp.w	r3,r12
80005bb0:	c0 63       	brcs	80005bbc <__avr32_udiv64+0x98>
80005bb2:	f0 cb 00 01 	sub	r11,r8,1
80005bb6:	14 33       	cp.w	r3,r10
80005bb8:	f6 08 17 30 	movlo	r8,r11
80005bbc:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80005bc0:	ce c8       	rjmp	80005d98 <__avr32_udiv64+0x274>
80005bc2:	58 08       	cp.w	r8,0
80005bc4:	c0 51       	brne	80005bce <__avr32_udiv64+0xaa>
80005bc6:	30 19       	mov	r9,1
80005bc8:	f2 08 0d 08 	divu	r8,r9,r8
80005bcc:	10 9c       	mov	r12,r8
80005bce:	f8 06 12 00 	clz	r6,r12
80005bd2:	c0 41       	brne	80005bda <__avr32_udiv64+0xb6>
80005bd4:	18 1b       	sub	r11,r12
80005bd6:	30 19       	mov	r9,1
80005bd8:	c4 68       	rjmp	80005c64 <__avr32_udiv64+0x140>
80005bda:	ec 01 11 20 	rsub	r1,r6,32
80005bde:	f4 01 0a 49 	lsr	r9,r10,r1
80005be2:	f8 06 09 4c 	lsl	r12,r12,r6
80005be6:	f6 06 09 48 	lsl	r8,r11,r6
80005bea:	f6 01 0a 41 	lsr	r1,r11,r1
80005bee:	f3 e8 10 08 	or	r8,r9,r8
80005bf2:	f8 03 16 10 	lsr	r3,r12,0x10
80005bf6:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80005bfa:	e2 03 0d 00 	divu	r0,r1,r3
80005bfe:	f0 0b 16 10 	lsr	r11,r8,0x10
80005c02:	00 9e       	mov	lr,r0
80005c04:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005c08:	e0 05 02 49 	mul	r9,r0,r5
80005c0c:	12 3b       	cp.w	r11,r9
80005c0e:	c0 d2       	brcc	80005c28 <__avr32_udiv64+0x104>
80005c10:	20 1e       	sub	lr,1
80005c12:	18 0b       	add	r11,r12
80005c14:	18 3b       	cp.w	r11,r12
80005c16:	c0 93       	brcs	80005c28 <__avr32_udiv64+0x104>
80005c18:	fc c1 00 01 	sub	r1,lr,1
80005c1c:	f6 0c 00 02 	add	r2,r11,r12
80005c20:	12 3b       	cp.w	r11,r9
80005c22:	c0 32       	brcc	80005c28 <__avr32_udiv64+0x104>
80005c24:	02 9e       	mov	lr,r1
80005c26:	04 9b       	mov	r11,r2
80005c28:	12 1b       	sub	r11,r9
80005c2a:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80005c2e:	f6 03 0d 02 	divu	r2,r11,r3
80005c32:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80005c36:	04 99       	mov	r9,r2
80005c38:	e4 05 02 4b 	mul	r11,r2,r5
80005c3c:	16 38       	cp.w	r8,r11
80005c3e:	c0 d2       	brcc	80005c58 <__avr32_udiv64+0x134>
80005c40:	20 19       	sub	r9,1
80005c42:	18 08       	add	r8,r12
80005c44:	18 38       	cp.w	r8,r12
80005c46:	c0 93       	brcs	80005c58 <__avr32_udiv64+0x134>
80005c48:	f2 c3 00 01 	sub	r3,r9,1
80005c4c:	f0 0c 00 05 	add	r5,r8,r12
80005c50:	16 38       	cp.w	r8,r11
80005c52:	c0 32       	brcc	80005c58 <__avr32_udiv64+0x134>
80005c54:	06 99       	mov	r9,r3
80005c56:	0a 98       	mov	r8,r5
80005c58:	f4 06 09 43 	lsl	r3,r10,r6
80005c5c:	f0 0b 01 0b 	sub	r11,r8,r11
80005c60:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80005c64:	f8 06 16 10 	lsr	r6,r12,0x10
80005c68:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80005c6c:	f6 06 0d 00 	divu	r0,r11,r6
80005c70:	e6 0b 16 10 	lsr	r11,r3,0x10
80005c74:	00 9a       	mov	r10,r0
80005c76:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005c7a:	e0 0e 02 48 	mul	r8,r0,lr
80005c7e:	10 3b       	cp.w	r11,r8
80005c80:	c0 d2       	brcc	80005c9a <__avr32_udiv64+0x176>
80005c82:	20 1a       	sub	r10,1
80005c84:	18 0b       	add	r11,r12
80005c86:	18 3b       	cp.w	r11,r12
80005c88:	c0 93       	brcs	80005c9a <__avr32_udiv64+0x176>
80005c8a:	f4 c2 00 01 	sub	r2,r10,1
80005c8e:	f6 0c 00 05 	add	r5,r11,r12
80005c92:	10 3b       	cp.w	r11,r8
80005c94:	c0 32       	brcc	80005c9a <__avr32_udiv64+0x176>
80005c96:	04 9a       	mov	r10,r2
80005c98:	0a 9b       	mov	r11,r5
80005c9a:	f6 08 01 01 	sub	r1,r11,r8
80005c9e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80005ca2:	e2 06 0d 00 	divu	r0,r1,r6
80005ca6:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80005caa:	00 98       	mov	r8,r0
80005cac:	e0 0e 02 4b 	mul	r11,r0,lr
80005cb0:	16 33       	cp.w	r3,r11
80005cb2:	c0 a2       	brcc	80005cc6 <__avr32_udiv64+0x1a2>
80005cb4:	20 18       	sub	r8,1
80005cb6:	18 03       	add	r3,r12
80005cb8:	18 33       	cp.w	r3,r12
80005cba:	c0 63       	brcs	80005cc6 <__avr32_udiv64+0x1a2>
80005cbc:	f0 cc 00 01 	sub	r12,r8,1
80005cc0:	16 33       	cp.w	r3,r11
80005cc2:	f8 08 17 30 	movlo	r8,r12
80005cc6:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80005cca:	c6 b8       	rjmp	80005da0 <__avr32_udiv64+0x27c>
80005ccc:	16 39       	cp.w	r9,r11
80005cce:	e0 8b 00 67 	brhi	80005d9c <__avr32_udiv64+0x278>
80005cd2:	f2 09 12 00 	clz	r9,r9
80005cd6:	c0 b1       	brne	80005cec <__avr32_udiv64+0x1c8>
80005cd8:	10 3a       	cp.w	r10,r8
80005cda:	5f 2a       	srhs	r10
80005cdc:	1c 3b       	cp.w	r11,lr
80005cde:	5f b8       	srhi	r8
80005ce0:	10 4a       	or	r10,r8
80005ce2:	f2 0a 18 00 	cp.b	r10,r9
80005ce6:	c5 b0       	breq	80005d9c <__avr32_udiv64+0x278>
80005ce8:	30 18       	mov	r8,1
80005cea:	c5 b8       	rjmp	80005da0 <__avr32_udiv64+0x27c>
80005cec:	f2 03 11 20 	rsub	r3,r9,32
80005cf0:	fc 09 09 4e 	lsl	lr,lr,r9
80005cf4:	f6 09 09 4c 	lsl	r12,r11,r9
80005cf8:	f4 03 0a 42 	lsr	r2,r10,r3
80005cfc:	f0 09 09 46 	lsl	r6,r8,r9
80005d00:	f0 03 0a 48 	lsr	r8,r8,r3
80005d04:	f6 03 0a 43 	lsr	r3,r11,r3
80005d08:	18 42       	or	r2,r12
80005d0a:	f1 ee 10 0c 	or	r12,r8,lr
80005d0e:	f8 01 16 10 	lsr	r1,r12,0x10
80005d12:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80005d16:	e6 01 0d 04 	divu	r4,r3,r1
80005d1a:	e4 03 16 10 	lsr	r3,r2,0x10
80005d1e:	08 98       	mov	r8,r4
80005d20:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80005d24:	e8 0e 02 45 	mul	r5,r4,lr
80005d28:	0a 33       	cp.w	r3,r5
80005d2a:	c0 d2       	brcc	80005d44 <__avr32_udiv64+0x220>
80005d2c:	20 18       	sub	r8,1
80005d2e:	18 03       	add	r3,r12
80005d30:	18 33       	cp.w	r3,r12
80005d32:	c0 93       	brcs	80005d44 <__avr32_udiv64+0x220>
80005d34:	f0 c0 00 01 	sub	r0,r8,1
80005d38:	e6 0c 00 0b 	add	r11,r3,r12
80005d3c:	0a 33       	cp.w	r3,r5
80005d3e:	c0 32       	brcc	80005d44 <__avr32_udiv64+0x220>
80005d40:	00 98       	mov	r8,r0
80005d42:	16 93       	mov	r3,r11
80005d44:	0a 13       	sub	r3,r5
80005d46:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80005d4a:	e6 01 0d 00 	divu	r0,r3,r1
80005d4e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80005d52:	00 93       	mov	r3,r0
80005d54:	e0 0e 02 4e 	mul	lr,r0,lr
80005d58:	1c 3b       	cp.w	r11,lr
80005d5a:	c0 d2       	brcc	80005d74 <__avr32_udiv64+0x250>
80005d5c:	20 13       	sub	r3,1
80005d5e:	18 0b       	add	r11,r12
80005d60:	18 3b       	cp.w	r11,r12
80005d62:	c0 93       	brcs	80005d74 <__avr32_udiv64+0x250>
80005d64:	f6 0c 00 0c 	add	r12,r11,r12
80005d68:	e6 c5 00 01 	sub	r5,r3,1
80005d6c:	1c 3b       	cp.w	r11,lr
80005d6e:	c0 32       	brcc	80005d74 <__avr32_udiv64+0x250>
80005d70:	0a 93       	mov	r3,r5
80005d72:	18 9b       	mov	r11,r12
80005d74:	e7 e8 11 08 	or	r8,r3,r8<<0x10
80005d78:	1c 1b       	sub	r11,lr
80005d7a:	f0 06 06 42 	mulu.d	r2,r8,r6
80005d7e:	06 96       	mov	r6,r3
80005d80:	16 36       	cp.w	r6,r11
80005d82:	e0 8b 00 0a 	brhi	80005d96 <__avr32_udiv64+0x272>
80005d86:	5f 0b       	sreq	r11
80005d88:	f4 09 09 49 	lsl	r9,r10,r9
80005d8c:	12 32       	cp.w	r2,r9
80005d8e:	5f b9       	srhi	r9
80005d90:	f7 e9 00 09 	and	r9,r11,r9
80005d94:	c0 60       	breq	80005da0 <__avr32_udiv64+0x27c>
80005d96:	20 18       	sub	r8,1
80005d98:	30 09       	mov	r9,0
80005d9a:	c0 38       	rjmp	80005da0 <__avr32_udiv64+0x27c>
80005d9c:	30 09       	mov	r9,0
80005d9e:	12 98       	mov	r8,r9
80005da0:	10 9a       	mov	r10,r8
80005da2:	12 93       	mov	r3,r9
80005da4:	10 92       	mov	r2,r8
80005da6:	12 9b       	mov	r11,r9
80005da8:	2f ed       	sub	sp,-8
80005daa:	d8 32       	popm	r0-r7,pc

80005dac <memset>:
80005dac:	18 98       	mov	r8,r12
80005dae:	c0 38       	rjmp	80005db4 <memset+0x8>
80005db0:	10 cb       	st.b	r8++,r11
80005db2:	20 1a       	sub	r10,1
80005db4:	58 0a       	cp.w	r10,0
80005db6:	cf d1       	brne	80005db0 <memset+0x4>
80005db8:	5e fc       	retal	r12

Disassembly of section .exception:

80005e00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80005e00:	c0 08       	rjmp	80005e00 <_evba>
	...

80005e04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80005e04:	c0 08       	rjmp	80005e04 <_handle_TLB_Multiple_Hit>
	...

80005e08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80005e08:	c0 08       	rjmp	80005e08 <_handle_Bus_Error_Data_Fetch>
	...

80005e0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80005e0c:	c0 08       	rjmp	80005e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80005e10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80005e10:	c0 08       	rjmp	80005e10 <_handle_NMI>
	...

80005e14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80005e14:	c0 08       	rjmp	80005e14 <_handle_Instruction_Address>
	...

80005e18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80005e18:	c0 08       	rjmp	80005e18 <_handle_ITLB_Protection>
	...

80005e1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80005e1c:	c0 08       	rjmp	80005e1c <_handle_Breakpoint>
	...

80005e20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80005e20:	c0 08       	rjmp	80005e20 <_handle_Illegal_Opcode>
	...

80005e24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80005e24:	c0 08       	rjmp	80005e24 <_handle_Unimplemented_Instruction>
	...

80005e28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80005e28:	c0 08       	rjmp	80005e28 <_handle_Privilege_Violation>
	...

80005e2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80005e2c:	c0 08       	rjmp	80005e2c <_handle_Floating_Point>
	...

80005e30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80005e30:	c0 08       	rjmp	80005e30 <_handle_Coprocessor_Absent>
	...

80005e34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80005e34:	c0 08       	rjmp	80005e34 <_handle_Data_Address_Read>
	...

80005e38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80005e38:	c0 08       	rjmp	80005e38 <_handle_Data_Address_Write>
	...

80005e3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80005e3c:	c0 08       	rjmp	80005e3c <_handle_DTLB_Protection_Read>
	...

80005e40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80005e40:	c0 08       	rjmp	80005e40 <_handle_DTLB_Protection_Write>
	...

80005e44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80005e44:	c0 08       	rjmp	80005e44 <_handle_DTLB_Modified>
	...

80005e50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80005e50:	c0 08       	rjmp	80005e50 <_handle_ITLB_Miss>
	...

80005e60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80005e60:	c0 08       	rjmp	80005e60 <_handle_DTLB_Miss_Read>
	...

80005e70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80005e70:	c0 08       	rjmp	80005e70 <_handle_DTLB_Miss_Write>
	...

80005f00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80005f00:	c0 08       	rjmp	80005f00 <_handle_Supervisor_Call>
80005f02:	d7 03       	nop

80005f04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005f04:	30 0c       	mov	r12,0
80005f06:	fe b0 e5 23 	rcall	8000294c <_get_interrupt_handler>
80005f0a:	58 0c       	cp.w	r12,0
80005f0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80005f10:	d6 03       	rete

80005f12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005f12:	30 1c       	mov	r12,1
80005f14:	fe b0 e5 1c 	rcall	8000294c <_get_interrupt_handler>
80005f18:	58 0c       	cp.w	r12,0
80005f1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80005f1e:	d6 03       	rete

80005f20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005f20:	30 2c       	mov	r12,2
80005f22:	fe b0 e5 15 	rcall	8000294c <_get_interrupt_handler>
80005f26:	58 0c       	cp.w	r12,0
80005f28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80005f2c:	d6 03       	rete

80005f2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80005f2e:	30 3c       	mov	r12,3
80005f30:	fe b0 e5 0e 	rcall	8000294c <_get_interrupt_handler>
80005f34:	58 0c       	cp.w	r12,0
80005f36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80005f3a:	d6 03       	rete
80005f3c:	d7 03       	nop
80005f3e:	d7 03       	nop
80005f40:	d7 03       	nop
80005f42:	d7 03       	nop
80005f44:	d7 03       	nop
80005f46:	d7 03       	nop
80005f48:	d7 03       	nop
80005f4a:	d7 03       	nop
80005f4c:	d7 03       	nop
80005f4e:	d7 03       	nop
80005f50:	d7 03       	nop
80005f52:	d7 03       	nop
80005f54:	d7 03       	nop
80005f56:	d7 03       	nop
80005f58:	d7 03       	nop
80005f5a:	d7 03       	nop
80005f5c:	d7 03       	nop
80005f5e:	d7 03       	nop
80005f60:	d7 03       	nop
80005f62:	d7 03       	nop
80005f64:	d7 03       	nop
80005f66:	d7 03       	nop
80005f68:	d7 03       	nop
80005f6a:	d7 03       	nop
80005f6c:	d7 03       	nop
80005f6e:	d7 03       	nop
80005f70:	d7 03       	nop
80005f72:	d7 03       	nop
80005f74:	d7 03       	nop
80005f76:	d7 03       	nop
80005f78:	d7 03       	nop
80005f7a:	d7 03       	nop
80005f7c:	d7 03       	nop
80005f7e:	d7 03       	nop
80005f80:	d7 03       	nop
80005f82:	d7 03       	nop
80005f84:	d7 03       	nop
80005f86:	d7 03       	nop
80005f88:	d7 03       	nop
80005f8a:	d7 03       	nop
80005f8c:	d7 03       	nop
80005f8e:	d7 03       	nop
80005f90:	d7 03       	nop
80005f92:	d7 03       	nop
80005f94:	d7 03       	nop
80005f96:	d7 03       	nop
80005f98:	d7 03       	nop
80005f9a:	d7 03       	nop
80005f9c:	d7 03       	nop
80005f9e:	d7 03       	nop
80005fa0:	d7 03       	nop
80005fa2:	d7 03       	nop
80005fa4:	d7 03       	nop
80005fa6:	d7 03       	nop
80005fa8:	d7 03       	nop
80005faa:	d7 03       	nop
80005fac:	d7 03       	nop
80005fae:	d7 03       	nop
80005fb0:	d7 03       	nop
80005fb2:	d7 03       	nop
80005fb4:	d7 03       	nop
80005fb6:	d7 03       	nop
80005fb8:	d7 03       	nop
80005fba:	d7 03       	nop
80005fbc:	d7 03       	nop
80005fbe:	d7 03       	nop
80005fc0:	d7 03       	nop
80005fc2:	d7 03       	nop
80005fc4:	d7 03       	nop
80005fc6:	d7 03       	nop
80005fc8:	d7 03       	nop
80005fca:	d7 03       	nop
80005fcc:	d7 03       	nop
80005fce:	d7 03       	nop
80005fd0:	d7 03       	nop
80005fd2:	d7 03       	nop
80005fd4:	d7 03       	nop
80005fd6:	d7 03       	nop
80005fd8:	d7 03       	nop
80005fda:	d7 03       	nop
80005fdc:	d7 03       	nop
80005fde:	d7 03       	nop
80005fe0:	d7 03       	nop
80005fe2:	d7 03       	nop
80005fe4:	d7 03       	nop
80005fe6:	d7 03       	nop
80005fe8:	d7 03       	nop
80005fea:	d7 03       	nop
80005fec:	d7 03       	nop
80005fee:	d7 03       	nop
80005ff0:	d7 03       	nop
80005ff2:	d7 03       	nop
80005ff4:	d7 03       	nop
80005ff6:	d7 03       	nop
80005ff8:	d7 03       	nop
80005ffa:	d7 03       	nop
80005ffc:	d7 03       	nop
80005ffe:	d7 03       	nop
