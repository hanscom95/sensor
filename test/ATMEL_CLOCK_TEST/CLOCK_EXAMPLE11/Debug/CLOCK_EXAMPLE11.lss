
CLOCK_EXAMPLE11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073c  00400000  00400000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  0040073c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  20000430  00400b6c  00010430  2**2
                  ALLOC
  3 .stack        00003000  20000450  00400b8c  00010430  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001045a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00003bd5  00000000  00000000  000104b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be0  00000000  00000000  0001408a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000c43  00000000  00000000  00014c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002b8  00000000  00000000  000158ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a8  00000000  00000000  00015b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000cb43  00000000  00000000  00015e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000469d  00000000  00000000  00022950  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0003bd92  00000000  00000000  00026fed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005d8  00000000  00000000  00062d80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003450 	.word	0x20003450
  400004:	00400321 	.word	0x00400321
  400008:	0040031d 	.word	0x0040031d
  40000c:	0040031d 	.word	0x0040031d
  400010:	0040031d 	.word	0x0040031d
  400014:	0040031d 	.word	0x0040031d
  400018:	0040031d 	.word	0x0040031d
	...
  40002c:	0040031d 	.word	0x0040031d
  400030:	0040031d 	.word	0x0040031d
  400034:	00000000 	.word	0x00000000
  400038:	0040031d 	.word	0x0040031d
  40003c:	0040052d 	.word	0x0040052d
  400040:	0040031d 	.word	0x0040031d
  400044:	0040031d 	.word	0x0040031d
  400048:	0040031d 	.word	0x0040031d
  40004c:	0040031d 	.word	0x0040031d
  400050:	0040031d 	.word	0x0040031d
  400054:	0040031d 	.word	0x0040031d
  400058:	0040031d 	.word	0x0040031d
  40005c:	00000000 	.word	0x00000000
  400060:	0040031d 	.word	0x0040031d
  400064:	0040031d 	.word	0x0040031d
  400068:	0040031d 	.word	0x0040031d
  40006c:	0040031d 	.word	0x0040031d
  400070:	0040031d 	.word	0x0040031d
  400074:	00000000 	.word	0x00000000
  400078:	0040031d 	.word	0x0040031d
  40007c:	00000000 	.word	0x00000000
  400080:	0040031d 	.word	0x0040031d
	...
  40008c:	0040031d 	.word	0x0040031d
  400090:	0040031d 	.word	0x0040031d
  400094:	0040031d 	.word	0x0040031d
  400098:	0040031d 	.word	0x0040031d
  40009c:	0040031d 	.word	0x0040031d
  4000a0:	0040031d 	.word	0x0040031d
  4000a4:	0040031d 	.word	0x0040031d
	...
  4000b4:	0040031d 	.word	0x0040031d
  4000b8:	00000000 	.word	0x00000000
  4000bc:	0040031d 	.word	0x0040031d

004000c0 <__do_global_dtors_aux>:
  4000c0:	b510      	push	{r4, lr}
  4000c2:	4c05      	ldr	r4, [pc, #20]	; (4000d8 <__do_global_dtors_aux+0x18>)
  4000c4:	7823      	ldrb	r3, [r4, #0]
  4000c6:	b933      	cbnz	r3, 4000d6 <__do_global_dtors_aux+0x16>
  4000c8:	4b04      	ldr	r3, [pc, #16]	; (4000dc <__do_global_dtors_aux+0x1c>)
  4000ca:	b113      	cbz	r3, 4000d2 <__do_global_dtors_aux+0x12>
  4000cc:	4804      	ldr	r0, [pc, #16]	; (4000e0 <__do_global_dtors_aux+0x20>)
  4000ce:	f3af 8000 	nop.w
  4000d2:	2301      	movs	r3, #1
  4000d4:	7023      	strb	r3, [r4, #0]
  4000d6:	bd10      	pop	{r4, pc}
  4000d8:	20000430 	.word	0x20000430
  4000dc:	00000000 	.word	0x00000000
  4000e0:	0040073c 	.word	0x0040073c

004000e4 <frame_dummy>:
  4000e4:	b508      	push	{r3, lr}
  4000e6:	4b06      	ldr	r3, [pc, #24]	; (400100 <frame_dummy+0x1c>)
  4000e8:	b11b      	cbz	r3, 4000f2 <frame_dummy+0xe>
  4000ea:	4806      	ldr	r0, [pc, #24]	; (400104 <frame_dummy+0x20>)
  4000ec:	4906      	ldr	r1, [pc, #24]	; (400108 <frame_dummy+0x24>)
  4000ee:	f3af 8000 	nop.w
  4000f2:	4806      	ldr	r0, [pc, #24]	; (40010c <frame_dummy+0x28>)
  4000f4:	6803      	ldr	r3, [r0, #0]
  4000f6:	b113      	cbz	r3, 4000fe <frame_dummy+0x1a>
  4000f8:	4b05      	ldr	r3, [pc, #20]	; (400110 <frame_dummy+0x2c>)
  4000fa:	b103      	cbz	r3, 4000fe <frame_dummy+0x1a>
  4000fc:	4798      	blx	r3
  4000fe:	bd08      	pop	{r3, pc}
  400100:	00000000 	.word	0x00000000
  400104:	0040073c 	.word	0x0040073c
  400108:	20000434 	.word	0x20000434
  40010c:	0040073c 	.word	0x0040073c
  400110:	00000000 	.word	0x00000000

00400114 <sysclk_init>:

	SystemCoreClockUpdate();
}

void sysclk_init(void)
{
  400114:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400116:	480e      	ldr	r0, [pc, #56]	; (400150 <sysclk_init+0x3c>)
  400118:	4b0e      	ldr	r3, [pc, #56]	; (400154 <sysclk_init+0x40>)
  40011a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
		break;

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  40011c:	2010      	movs	r0, #16
  40011e:	4b0e      	ldr	r3, [pc, #56]	; (400158 <sysclk_init+0x44>)
  400120:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400122:	4c0e      	ldr	r4, [pc, #56]	; (40015c <sysclk_init+0x48>)
  400124:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400126:	2800      	cmp	r0, #0
  400128:	d0fc      	beq.n	400124 <sysclk_init+0x10>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40012a:	4b0d      	ldr	r3, [pc, #52]	; (400160 <sysclk_init+0x4c>)
  40012c:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40012e:	4a0d      	ldr	r2, [pc, #52]	; (400164 <sysclk_init+0x50>)
  400130:	4b0d      	ldr	r3, [pc, #52]	; (400168 <sysclk_init+0x54>)
  400132:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400134:	4c0d      	ldr	r4, [pc, #52]	; (40016c <sysclk_init+0x58>)
  400136:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400138:	2800      	cmp	r0, #0
  40013a:	d0fc      	beq.n	400136 <sysclk_init+0x22>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40013c:	2010      	movs	r0, #16
  40013e:	4b0c      	ldr	r3, [pc, #48]	; (400170 <sysclk_init+0x5c>)
  400140:	4798      	blx	r3
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400142:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x60>)
  400144:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400146:	4802      	ldr	r0, [pc, #8]	; (400150 <sysclk_init+0x3c>)
  400148:	4b02      	ldr	r3, [pc, #8]	; (400154 <sysclk_init+0x40>)
  40014a:	4798      	blx	r3
  40014c:	bd10      	pop	{r4, pc}
  40014e:	bf00      	nop
  400150:	05f5e100 	.word	0x05f5e100
  400154:	004004cd 	.word	0x004004cd
  400158:	00400275 	.word	0x00400275
  40015c:	004002c1 	.word	0x004002c1
  400160:	004002d1 	.word	0x004002d1
  400164:	20183f01 	.word	0x20183f01
  400168:	400e0400 	.word	0x400e0400
  40016c:	004002e1 	.word	0x004002e1
  400170:	00400211 	.word	0x00400211
  400174:	004003bd 	.word	0x004003bd

00400178 <board_init>:
		ioport_set_pin_mode(pin, mode);\
		ioport_disable_pin(pin);\
	} while (0)
	
void board_init(void)
{
  400178:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40017a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40017e:	4b21      	ldr	r3, [pc, #132]	; (400204 <board_init+0x8c>)
  400180:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400182:	200b      	movs	r0, #11
  400184:	4c20      	ldr	r4, [pc, #128]	; (400208 <board_init+0x90>)
  400186:	47a0      	blx	r4
  400188:	200c      	movs	r0, #12
  40018a:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40018c:	4b1f      	ldr	r3, [pc, #124]	; (40020c <board_init+0x94>)
  40018e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400192:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400194:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400198:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  40019a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  40019e:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001a0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001a4:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  4001aa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001b0:	631a      	str	r2, [r3, #48]	; 0x30
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4001b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4001b6:	615a      	str	r2, [r3, #20]
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
  4001bc:	665a      	str	r2, [r3, #100]	; 0x64

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
		base->PIO_PPDER = mask;
	} else {
		base->PIO_PPDDR = mask;
  4001be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
  4001c2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
  4001c4:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  4001c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABCDSR[0] |= mask;
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  4001ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4001cc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4001d0:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  4001d2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4001d4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
  4001d8:	675a      	str	r2, [r3, #116]	; 0x74
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4001de:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001e0:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001e2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4001ea:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001ec:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4001f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
  4001f6:	2208      	movs	r2, #8
  4001f8:	631a      	str	r2, [r3, #48]	; 0x30
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4001fa:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4001fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  400200:	bd10      	pop	{r4, pc}
  400202:	bf00      	nop
  400204:	400e1450 	.word	0x400e1450
  400208:	004002f1 	.word	0x004002f1
  40020c:	400e0e00 	.word	0x400e0e00

00400210 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400210:	4b17      	ldr	r3, [pc, #92]	; (400270 <pmc_switch_mck_to_pllack+0x60>)
  400212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400214:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  400218:	4310      	orrs	r0, r2
  40021a:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40021c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40021e:	f013 0f08 	tst.w	r3, #8
  400222:	d109      	bne.n	400238 <pmc_switch_mck_to_pllack+0x28>
  400224:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400228:	4911      	ldr	r1, [pc, #68]	; (400270 <pmc_switch_mck_to_pllack+0x60>)
  40022a:	e001      	b.n	400230 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40022c:	3b01      	subs	r3, #1
  40022e:	d019      	beq.n	400264 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400230:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400232:	f012 0f08 	tst.w	r2, #8
  400236:	d0f9      	beq.n	40022c <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400238:	4b0d      	ldr	r3, [pc, #52]	; (400270 <pmc_switch_mck_to_pllack+0x60>)
  40023a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40023c:	f022 0203 	bic.w	r2, r2, #3
  400240:	f042 0202 	orr.w	r2, r2, #2
  400244:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400246:	6e98      	ldr	r0, [r3, #104]	; 0x68
  400248:	f010 0008 	ands.w	r0, r0, #8
  40024c:	d10c      	bne.n	400268 <pmc_switch_mck_to_pllack+0x58>
  40024e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400252:	4907      	ldr	r1, [pc, #28]	; (400270 <pmc_switch_mck_to_pllack+0x60>)
  400254:	e001      	b.n	40025a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400256:	3b01      	subs	r3, #1
  400258:	d008      	beq.n	40026c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40025a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40025c:	f012 0f08 	tst.w	r2, #8
  400260:	d0f9      	beq.n	400256 <pmc_switch_mck_to_pllack+0x46>
  400262:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  400264:	2001      	movs	r0, #1
  400266:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400268:	2000      	movs	r0, #0
  40026a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  40026c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40026e:	4770      	bx	lr
  400270:	400e0400 	.word	0x400e0400

00400274 <pmc_switch_mainck_to_fastrc>:
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  400274:	4911      	ldr	r1, [pc, #68]	; (4002bc <pmc_switch_mainck_to_fastrc+0x48>)
  400276:	6a0a      	ldr	r2, [r1, #32]
  400278:	f442 125c 	orr.w	r2, r2, #3604480	; 0x370000
  40027c:	f042 0208 	orr.w	r2, r2, #8
  400280:	620a      	str	r2, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400282:	460a      	mov	r2, r1
  400284:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400286:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40028a:	d0fb      	beq.n	400284 <pmc_switch_mainck_to_fastrc+0x10>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40028c:	4a0b      	ldr	r2, [pc, #44]	; (4002bc <pmc_switch_mainck_to_fastrc+0x48>)
  40028e:	6a13      	ldr	r3, [r2, #32]
  400290:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  400298:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40029c:	4303      	orrs	r3, r0

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40029e:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4002a0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002a2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4002a6:	d0fb      	beq.n	4002a0 <pmc_switch_mainck_to_fastrc+0x2c>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4002a8:	4a04      	ldr	r2, [pc, #16]	; (4002bc <pmc_switch_mainck_to_fastrc+0x48>)
  4002aa:	6a13      	ldr	r3, [r2, #32]
  4002ac:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4002b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4002b4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4002b8:	6213      	str	r3, [r2, #32]
  4002ba:	4770      	bx	lr
  4002bc:	400e0400 	.word	0x400e0400

004002c0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4002c0:	4b02      	ldr	r3, [pc, #8]	; (4002cc <pmc_osc_is_ready_mainck+0xc>)
  4002c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4002c4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4002c8:	4770      	bx	lr
  4002ca:	bf00      	nop
  4002cc:	400e0400 	.word	0x400e0400

004002d0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4002d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4002d4:	4b01      	ldr	r3, [pc, #4]	; (4002dc <pmc_disable_pllack+0xc>)
  4002d6:	629a      	str	r2, [r3, #40]	; 0x28
  4002d8:	4770      	bx	lr
  4002da:	bf00      	nop
  4002dc:	400e0400 	.word	0x400e0400

004002e0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4002e0:	4b02      	ldr	r3, [pc, #8]	; (4002ec <pmc_is_locked_pllack+0xc>)
  4002e2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4002e4:	f000 0002 	and.w	r0, r0, #2
  4002e8:	4770      	bx	lr
  4002ea:	bf00      	nop
  4002ec:	400e0400 	.word	0x400e0400

004002f0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4002f0:	281f      	cmp	r0, #31
  4002f2:	d80d      	bhi.n	400310 <pmc_enable_periph_clk+0x20>
		return 1;
	}

	if (ul_id < 32) {
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4002f4:	4b08      	ldr	r3, [pc, #32]	; (400318 <pmc_enable_periph_clk+0x28>)
  4002f6:	699a      	ldr	r2, [r3, #24]
  4002f8:	2301      	movs	r3, #1
  4002fa:	4083      	lsls	r3, r0
  4002fc:	401a      	ands	r2, r3
  4002fe:	4293      	cmp	r3, r2
  400300:	d008      	beq.n	400314 <pmc_enable_periph_clk+0x24>
			PMC->PMC_PCER0 = 1 << ul_id;
  400302:	2301      	movs	r3, #1
  400304:	fa03 f000 	lsl.w	r0, r3, r0
  400308:	4b03      	ldr	r3, [pc, #12]	; (400318 <pmc_enable_periph_clk+0x28>)
  40030a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40030c:	2000      	movs	r0, #0
  40030e:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400310:	2001      	movs	r0, #1
  400312:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400314:	2000      	movs	r0, #0
}
  400316:	4770      	bx	lr
  400318:	400e0400 	.word	0x400e0400

0040031c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40031c:	e7fe      	b.n	40031c <Dummy_Handler>
  40031e:	bf00      	nop

00400320 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400320:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
  400322:	4b19      	ldr	r3, [pc, #100]	; (400388 <Reset_Handler+0x68>)
  400324:	4a19      	ldr	r2, [pc, #100]	; (40038c <Reset_Handler+0x6c>)
  400326:	429a      	cmp	r2, r3
  400328:	d003      	beq.n	400332 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
  40032a:	4b19      	ldr	r3, [pc, #100]	; (400390 <Reset_Handler+0x70>)
  40032c:	4a16      	ldr	r2, [pc, #88]	; (400388 <Reset_Handler+0x68>)
  40032e:	429a      	cmp	r2, r3
  400330:	d304      	bcc.n	40033c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400332:	4b18      	ldr	r3, [pc, #96]	; (400394 <Reset_Handler+0x74>)
  400334:	4a18      	ldr	r2, [pc, #96]	; (400398 <Reset_Handler+0x78>)
  400336:	429a      	cmp	r2, r3
  400338:	d30f      	bcc.n	40035a <Reset_Handler+0x3a>
  40033a:	e01a      	b.n	400372 <Reset_Handler+0x52>
  40033c:	4b17      	ldr	r3, [pc, #92]	; (40039c <Reset_Handler+0x7c>)
  40033e:	4c18      	ldr	r4, [pc, #96]	; (4003a0 <Reset_Handler+0x80>)
  400340:	1ae4      	subs	r4, r4, r3
  400342:	f024 0403 	bic.w	r4, r4, #3
  400346:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  400348:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
  40034a:	480f      	ldr	r0, [pc, #60]	; (400388 <Reset_Handler+0x68>)
  40034c:	490f      	ldr	r1, [pc, #60]	; (40038c <Reset_Handler+0x6c>)
  40034e:	585a      	ldr	r2, [r3, r1]
  400350:	501a      	str	r2, [r3, r0]
  400352:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
  400354:	42a3      	cmp	r3, r4
  400356:	d1fa      	bne.n	40034e <Reset_Handler+0x2e>
  400358:	e7eb      	b.n	400332 <Reset_Handler+0x12>
  40035a:	4b12      	ldr	r3, [pc, #72]	; (4003a4 <Reset_Handler+0x84>)
  40035c:	4912      	ldr	r1, [pc, #72]	; (4003a8 <Reset_Handler+0x88>)
  40035e:	1ac9      	subs	r1, r1, r3
  400360:	f021 0103 	bic.w	r1, r1, #3
  400364:	1d1a      	adds	r2, r3, #4
  400366:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
  400368:	2200      	movs	r2, #0
  40036a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40036e:	428b      	cmp	r3, r1
  400370:	d1fb      	bne.n	40036a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400372:	4b0e      	ldr	r3, [pc, #56]	; (4003ac <Reset_Handler+0x8c>)
  400374:	4a0e      	ldr	r2, [pc, #56]	; (4003b0 <Reset_Handler+0x90>)
  400376:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
  40037a:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  40037c:	4b0d      	ldr	r3, [pc, #52]	; (4003b4 <Reset_Handler+0x94>)
  40037e:	4798      	blx	r3

	/* Branch to main function */
	main();
  400380:	4b0d      	ldr	r3, [pc, #52]	; (4003b8 <Reset_Handler+0x98>)
  400382:	4798      	blx	r3
  400384:	e7fe      	b.n	400384 <Reset_Handler+0x64>
  400386:	bf00      	nop
  400388:	20000000 	.word	0x20000000
  40038c:	0040073c 	.word	0x0040073c
  400390:	20000430 	.word	0x20000430
  400394:	20000450 	.word	0x20000450
  400398:	20000430 	.word	0x20000430
  40039c:	20000004 	.word	0x20000004
  4003a0:	20000433 	.word	0x20000433
  4003a4:	2000042c 	.word	0x2000042c
  4003a8:	2000044b 	.word	0x2000044b
  4003ac:	e000ed00 	.word	0xe000ed00
  4003b0:	00400000 	.word	0x00400000
  4003b4:	004005c9 	.word	0x004005c9
  4003b8:	0040053d 	.word	0x0040053d

004003bc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) {
  4003bc:	4b3c      	ldr	r3, [pc, #240]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  4003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4003c0:	f003 0303 	and.w	r3, r3, #3
  4003c4:	2b01      	cmp	r3, #1
  4003c6:	d00f      	beq.n	4003e8 <SystemCoreClockUpdate+0x2c>
  4003c8:	b113      	cbz	r3, 4003d0 <SystemCoreClockUpdate+0x14>
  4003ca:	2b02      	cmp	r3, #2
  4003cc:	d029      	beq.n	400422 <SystemCoreClockUpdate+0x66>
  4003ce:	e057      	b.n	400480 <SystemCoreClockUpdate+0xc4>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
  4003d0:	4b38      	ldr	r3, [pc, #224]	; (4004b4 <SystemCoreClockUpdate+0xf8>)
  4003d2:	695b      	ldr	r3, [r3, #20]
  4003d4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4003d8:	bf14      	ite	ne
  4003da:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4003de:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4003e2:	4b35      	ldr	r3, [pc, #212]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  4003e4:	601a      	str	r2, [r3, #0]
  4003e6:	e04b      	b.n	400480 <SystemCoreClockUpdate+0xc4>
		}
		break;

	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  4003e8:	4b31      	ldr	r3, [pc, #196]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  4003ea:	6a1b      	ldr	r3, [r3, #32]
  4003ec:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4003f0:	d003      	beq.n	4003fa <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4003f2:	4a32      	ldr	r2, [pc, #200]	; (4004bc <SystemCoreClockUpdate+0x100>)
  4003f4:	4b30      	ldr	r3, [pc, #192]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  4003f6:	601a      	str	r2, [r3, #0]
  4003f8:	e042      	b.n	400480 <SystemCoreClockUpdate+0xc4>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4003fa:	4a31      	ldr	r2, [pc, #196]	; (4004c0 <SystemCoreClockUpdate+0x104>)
  4003fc:	4b2e      	ldr	r3, [pc, #184]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  4003fe:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  400400:	4b2b      	ldr	r3, [pc, #172]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  400402:	6a1b      	ldr	r3, [r3, #32]
  400404:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400408:	2b10      	cmp	r3, #16
  40040a:	d002      	beq.n	400412 <SystemCoreClockUpdate+0x56>
  40040c:	2b20      	cmp	r3, #32
  40040e:	d004      	beq.n	40041a <SystemCoreClockUpdate+0x5e>
  400410:	e036      	b.n	400480 <SystemCoreClockUpdate+0xc4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  400412:	4a2c      	ldr	r2, [pc, #176]	; (4004c4 <SystemCoreClockUpdate+0x108>)
  400414:	4b28      	ldr	r3, [pc, #160]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  400416:	601a      	str	r2, [r3, #0]
				break;
  400418:	e032      	b.n	400480 <SystemCoreClockUpdate+0xc4>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  40041a:	4a28      	ldr	r2, [pc, #160]	; (4004bc <SystemCoreClockUpdate+0x100>)
  40041c:	4b26      	ldr	r3, [pc, #152]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  40041e:	601a      	str	r2, [r3, #0]
				break;
  400420:	e02e      	b.n	400480 <SystemCoreClockUpdate+0xc4>
			}
		}
		break;

	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
  400422:	4b23      	ldr	r3, [pc, #140]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  400424:	6a1b      	ldr	r3, [r3, #32]
  400426:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40042a:	d003      	beq.n	400434 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40042c:	4a23      	ldr	r2, [pc, #140]	; (4004bc <SystemCoreClockUpdate+0x100>)
  40042e:	4b22      	ldr	r3, [pc, #136]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  400430:	601a      	str	r2, [r3, #0]
  400432:	e012      	b.n	40045a <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400434:	4a22      	ldr	r2, [pc, #136]	; (4004c0 <SystemCoreClockUpdate+0x104>)
  400436:	4b20      	ldr	r3, [pc, #128]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  400438:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
  40043a:	4b1d      	ldr	r3, [pc, #116]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  40043c:	6a1b      	ldr	r3, [r3, #32]
  40043e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400442:	2b10      	cmp	r3, #16
  400444:	d002      	beq.n	40044c <SystemCoreClockUpdate+0x90>
  400446:	2b20      	cmp	r3, #32
  400448:	d004      	beq.n	400454 <SystemCoreClockUpdate+0x98>
  40044a:	e006      	b.n	40045a <SystemCoreClockUpdate+0x9e>
				/* So the 4MHz RC selection is forbidden */
				Assert(false);
				break;

			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
  40044c:	4a1d      	ldr	r2, [pc, #116]	; (4004c4 <SystemCoreClockUpdate+0x108>)
  40044e:	4b1a      	ldr	r3, [pc, #104]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  400450:	601a      	str	r2, [r3, #0]
				break;
  400452:	e002      	b.n	40045a <SystemCoreClockUpdate+0x9e>

			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
  400454:	4a19      	ldr	r2, [pc, #100]	; (4004bc <SystemCoreClockUpdate+0x100>)
  400456:	4b18      	ldr	r3, [pc, #96]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  400458:	601a      	str	r2, [r3, #0]
			default:
				break;
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  40045a:	4b15      	ldr	r3, [pc, #84]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  40045c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40045e:	f003 0303 	and.w	r3, r3, #3
  400462:	2b02      	cmp	r3, #2
  400464:	d10c      	bne.n	400480 <SystemCoreClockUpdate+0xc4>
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400466:	4b12      	ldr	r3, [pc, #72]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  400468:	6a98      	ldr	r0, [r3, #40]	; 0x28
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40046a:	6a99      	ldr	r1, [r3, #40]	; 0x28
  40046c:	4b12      	ldr	r3, [pc, #72]	; (4004b8 <SystemCoreClockUpdate+0xfc>)

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
  40046e:	f3c0 400a 	ubfx	r0, r0, #16, #11
			}
		}

		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
  400472:	681a      	ldr	r2, [r3, #0]
  400474:	fb00 2202 	mla	r2, r0, r2, r2
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
					>> CKGR_PLLAR_DIVA_Pos));
  400478:	b2c9      	uxtb	r1, r1
		if ((uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
				PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *=
					((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
					>> CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40047a:	fbb2 f2f1 	udiv	r2, r2, r1
  40047e:	601a      	str	r2, [r3, #0]

	default:
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
  400480:	4b0b      	ldr	r3, [pc, #44]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  400482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400484:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400488:	2b70      	cmp	r3, #112	; 0x70
  40048a:	d107      	bne.n	40049c <SystemCoreClockUpdate+0xe0>
		SystemCoreClock /= 3U;
  40048c:	4b0a      	ldr	r3, [pc, #40]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  40048e:	681a      	ldr	r2, [r3, #0]
  400490:	490d      	ldr	r1, [pc, #52]	; (4004c8 <SystemCoreClockUpdate+0x10c>)
  400492:	fba1 0202 	umull	r0, r2, r1, r2
  400496:	0852      	lsrs	r2, r2, #1
  400498:	601a      	str	r2, [r3, #0]
  40049a:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >>
  40049c:	4b04      	ldr	r3, [pc, #16]	; (4004b0 <SystemCoreClockUpdate+0xf4>)
  40049e:	6b19      	ldr	r1, [r3, #48]	; 0x30
  4004a0:	4b05      	ldr	r3, [pc, #20]	; (4004b8 <SystemCoreClockUpdate+0xfc>)
  4004a2:	f3c1 1102 	ubfx	r1, r1, #4, #3
  4004a6:	681a      	ldr	r2, [r3, #0]
  4004a8:	40ca      	lsrs	r2, r1
  4004aa:	601a      	str	r2, [r3, #0]
  4004ac:	4770      	bx	lr
  4004ae:	bf00      	nop
  4004b0:	400e0400 	.word	0x400e0400
  4004b4:	400e1410 	.word	0x400e1410
  4004b8:	20000000 	.word	0x20000000
  4004bc:	00b71b00 	.word	0x00b71b00
  4004c0:	003d0900 	.word	0x003d0900
  4004c4:	007a1200 	.word	0x007a1200
  4004c8:	aaaaaaab 	.word	0xaaaaaaab

004004cc <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
  4004cc:	4b0f      	ldr	r3, [pc, #60]	; (40050c <system_init_flash+0x40>)
  4004ce:	4298      	cmp	r0, r3
  4004d0:	d804      	bhi.n	4004dc <system_init_flash+0x10>
		EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4004d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4004d6:	4b0e      	ldr	r3, [pc, #56]	; (400510 <system_init_flash+0x44>)
  4004d8:	601a      	str	r2, [r3, #0]
  4004da:	4770      	bx	lr
	} else {
		if (ul_clk < CHIP_FREQ_FWS_1) {
  4004dc:	4b0d      	ldr	r3, [pc, #52]	; (400514 <system_init_flash+0x48>)
  4004de:	4298      	cmp	r0, r3
  4004e0:	d803      	bhi.n	4004ea <system_init_flash+0x1e>
			EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4004e2:	4a0d      	ldr	r2, [pc, #52]	; (400518 <system_init_flash+0x4c>)
  4004e4:	4b0a      	ldr	r3, [pc, #40]	; (400510 <system_init_flash+0x44>)
  4004e6:	601a      	str	r2, [r3, #0]
  4004e8:	4770      	bx	lr
		} else {
			if (ul_clk < CHIP_FREQ_FWS_2) {
  4004ea:	4b0c      	ldr	r3, [pc, #48]	; (40051c <system_init_flash+0x50>)
  4004ec:	4298      	cmp	r0, r3
  4004ee:	d803      	bhi.n	4004f8 <system_init_flash+0x2c>
				EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4004f0:	4a0b      	ldr	r2, [pc, #44]	; (400520 <system_init_flash+0x54>)
  4004f2:	4b07      	ldr	r3, [pc, #28]	; (400510 <system_init_flash+0x44>)
  4004f4:	601a      	str	r2, [r3, #0]
  4004f6:	4770      	bx	lr
			} else {
				if (ul_clk < CHIP_FREQ_FWS_3) {
  4004f8:	4b0a      	ldr	r3, [pc, #40]	; (400524 <system_init_flash+0x58>)
  4004fa:	4298      	cmp	r0, r3
					EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4004fc:	bf94      	ite	ls
  4004fe:	4a0a      	ldrls	r2, [pc, #40]	; (400528 <system_init_flash+0x5c>)
				} else {
					EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400500:	f04f 2204 	movhi.w	r2, #67109888	; 0x4000400
  400504:	4b02      	ldr	r3, [pc, #8]	; (400510 <system_init_flash+0x44>)
  400506:	601a      	str	r2, [r3, #0]
  400508:	4770      	bx	lr
  40050a:	bf00      	nop
  40050c:	01312cff 	.word	0x01312cff
  400510:	400e0a00 	.word	0x400e0a00
  400514:	026259ff 	.word	0x026259ff
  400518:	04000100 	.word	0x04000100
  40051c:	039386ff 	.word	0x039386ff
  400520:	04000200 	.word	0x04000200
  400524:	04c4b3ff 	.word	0x04c4b3ff
  400528:	04000300 	.word	0x04000300

0040052c <SysTick_Handler>:
 *
 * Process System Tick Event and increments the ul_ms_ticks counter.
 */
void SysTick_Handler(void)
{
	ul_ms_ticks++;
  40052c:	4b02      	ldr	r3, [pc, #8]	; (400538 <SysTick_Handler+0xc>)
  40052e:	681a      	ldr	r2, [r3, #0]
  400530:	3201      	adds	r2, #1
  400532:	601a      	str	r2, [r3, #0]
  400534:	4770      	bx	lr
  400536:	bf00      	nop
  400538:	2000044c 	.word	0x2000044c

0040053c <main>:
 * \brief Initialize the clock system and blink a LED at a constant 1 Hz frequency.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
  40053c:	b508      	push	{r3, lr}
	sysclk_init();
  40053e:	4b1b      	ldr	r3, [pc, #108]	; (4005ac <main+0x70>)
  400540:	4798      	blx	r3
	board_init();
  400542:	4b1b      	ldr	r3, [pc, #108]	; (4005b0 <main+0x74>)
  400544:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  400546:	4b1b      	ldr	r3, [pc, #108]	; (4005b4 <main+0x78>)
  400548:	4a1b      	ldr	r2, [pc, #108]	; (4005b8 <main+0x7c>)
  40054a:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  40054c:	21f0      	movs	r1, #240	; 0xf0
  40054e:	4a1b      	ldr	r2, [pc, #108]	; (4005bc <main+0x80>)
  400550:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  400554:	2200      	movs	r2, #0
  400556:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
  400558:	2207      	movs	r2, #7
  40055a:	601a      	str	r2, [r3, #0]
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40055c:	4818      	ldr	r0, [pc, #96]	; (4005c0 <main+0x84>)
		port->PIO_CODR = mask;
	} else {
		port->PIO_SODR = mask;
  40055e:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 */
static void mdelay(uint32_t ul_dly_ticks)
{
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  400562:	4b18      	ldr	r3, [pc, #96]	; (4005c4 <main+0x88>)
  400564:	f44f 2500 	mov.w	r5, #524288	; 0x80000
  400568:	f44f 2480 	mov.w	r4, #262144	; 0x40000
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40056c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  40056e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
		port->PIO_CODR = mask;
  400572:	bf14      	ite	ne
  400574:	6346      	strne	r6, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  400576:	6306      	streq	r6, [r0, #48]	; 0x30
  400578:	6819      	ldr	r1, [r3, #0]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  40057a:	681a      	ldr	r2, [r3, #0]
  40057c:	1a52      	subs	r2, r2, r1
  40057e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  400582:	d3fa      	bcc.n	40057a <main+0x3e>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  400584:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  400586:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		port->PIO_CODR = mask;
  40058a:	bf14      	ite	ne
  40058c:	6345      	strne	r5, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  40058e:	6305      	streq	r5, [r0, #48]	; 0x30
 */
static void mdelay(uint32_t ul_dly_ticks)
{
	uint32_t ul_cur_ticks;

	ul_cur_ticks = ul_ms_ticks;
  400590:	6819      	ldr	r1, [r3, #0]
	while ((ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks) {
  400592:	681a      	ldr	r2, [r3, #0]
  400594:	1a52      	subs	r2, r2, r1
  400596:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
  40059a:	d3fa      	bcc.n	400592 <main+0x56>
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
  40059c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  40059e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		port->PIO_CODR = mask;
  4005a2:	bf14      	ite	ne
  4005a4:	6344      	strne	r4, [r0, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
  4005a6:	6304      	streq	r4, [r0, #48]	; 0x30
  4005a8:	e7e0      	b.n	40056c <main+0x30>
  4005aa:	bf00      	nop
  4005ac:	00400115 	.word	0x00400115
  4005b0:	00400179 	.word	0x00400179
  4005b4:	e000e010 	.word	0xe000e010
  4005b8:	0001869f 	.word	0x0001869f
  4005bc:	e000ed00 	.word	0xe000ed00
  4005c0:	400e0e00 	.word	0x400e0e00
  4005c4:	2000044c 	.word	0x2000044c

004005c8 <__libc_init_array>:
  4005c8:	b570      	push	{r4, r5, r6, lr}
  4005ca:	4e0f      	ldr	r6, [pc, #60]	; (400608 <__libc_init_array+0x40>)
  4005cc:	4d0f      	ldr	r5, [pc, #60]	; (40060c <__libc_init_array+0x44>)
  4005ce:	1b76      	subs	r6, r6, r5
  4005d0:	10b6      	asrs	r6, r6, #2
  4005d2:	d007      	beq.n	4005e4 <__libc_init_array+0x1c>
  4005d4:	3d04      	subs	r5, #4
  4005d6:	2400      	movs	r4, #0
  4005d8:	3401      	adds	r4, #1
  4005da:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4005de:	4798      	blx	r3
  4005e0:	42a6      	cmp	r6, r4
  4005e2:	d1f9      	bne.n	4005d8 <__libc_init_array+0x10>
  4005e4:	4e0a      	ldr	r6, [pc, #40]	; (400610 <__libc_init_array+0x48>)
  4005e6:	4d0b      	ldr	r5, [pc, #44]	; (400614 <__libc_init_array+0x4c>)
  4005e8:	1b76      	subs	r6, r6, r5
  4005ea:	f000 f895 	bl	400718 <_init>
  4005ee:	10b6      	asrs	r6, r6, #2
  4005f0:	d008      	beq.n	400604 <__libc_init_array+0x3c>
  4005f2:	3d04      	subs	r5, #4
  4005f4:	2400      	movs	r4, #0
  4005f6:	3401      	adds	r4, #1
  4005f8:	f855 3f04 	ldr.w	r3, [r5, #4]!
  4005fc:	4798      	blx	r3
  4005fe:	42a6      	cmp	r6, r4
  400600:	d1f9      	bne.n	4005f6 <__libc_init_array+0x2e>
  400602:	bd70      	pop	{r4, r5, r6, pc}
  400604:	bd70      	pop	{r4, r5, r6, pc}
  400606:	bf00      	nop
  400608:	00400724 	.word	0x00400724
  40060c:	00400724 	.word	0x00400724
  400610:	0040072c 	.word	0x0040072c
  400614:	00400724 	.word	0x00400724

00400618 <register_fini>:
  400618:	4b02      	ldr	r3, [pc, #8]	; (400624 <register_fini+0xc>)
  40061a:	b113      	cbz	r3, 400622 <register_fini+0xa>
  40061c:	4802      	ldr	r0, [pc, #8]	; (400628 <register_fini+0x10>)
  40061e:	f000 b805 	b.w	40062c <atexit>
  400622:	4770      	bx	lr
  400624:	00000000 	.word	0x00000000
  400628:	00400639 	.word	0x00400639

0040062c <atexit>:
  40062c:	4601      	mov	r1, r0
  40062e:	2000      	movs	r0, #0
  400630:	4602      	mov	r2, r0
  400632:	4603      	mov	r3, r0
  400634:	f000 b818 	b.w	400668 <__register_exitproc>

00400638 <__libc_fini_array>:
  400638:	b538      	push	{r3, r4, r5, lr}
  40063a:	4d09      	ldr	r5, [pc, #36]	; (400660 <__libc_fini_array+0x28>)
  40063c:	4c09      	ldr	r4, [pc, #36]	; (400664 <__libc_fini_array+0x2c>)
  40063e:	1b64      	subs	r4, r4, r5
  400640:	10a4      	asrs	r4, r4, #2
  400642:	bf18      	it	ne
  400644:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
  400648:	d005      	beq.n	400656 <__libc_fini_array+0x1e>
  40064a:	3c01      	subs	r4, #1
  40064c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400650:	4798      	blx	r3
  400652:	2c00      	cmp	r4, #0
  400654:	d1f9      	bne.n	40064a <__libc_fini_array+0x12>
  400656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40065a:	f000 b867 	b.w	40072c <_fini>
  40065e:	bf00      	nop
  400660:	00400738 	.word	0x00400738
  400664:	0040073c 	.word	0x0040073c

00400668 <__register_exitproc>:
  400668:	b5f0      	push	{r4, r5, r6, r7, lr}
  40066a:	4c27      	ldr	r4, [pc, #156]	; (400708 <__register_exitproc+0xa0>)
  40066c:	6826      	ldr	r6, [r4, #0]
  40066e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
  400672:	b085      	sub	sp, #20
  400674:	4607      	mov	r7, r0
  400676:	2c00      	cmp	r4, #0
  400678:	d041      	beq.n	4006fe <__register_exitproc+0x96>
  40067a:	6865      	ldr	r5, [r4, #4]
  40067c:	2d1f      	cmp	r5, #31
  40067e:	dd1e      	ble.n	4006be <__register_exitproc+0x56>
  400680:	4822      	ldr	r0, [pc, #136]	; (40070c <__register_exitproc+0xa4>)
  400682:	b918      	cbnz	r0, 40068c <__register_exitproc+0x24>
  400684:	f04f 30ff 	mov.w	r0, #4294967295
  400688:	b005      	add	sp, #20
  40068a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40068c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400690:	9103      	str	r1, [sp, #12]
  400692:	9202      	str	r2, [sp, #8]
  400694:	9301      	str	r3, [sp, #4]
  400696:	f3af 8000 	nop.w
  40069a:	9903      	ldr	r1, [sp, #12]
  40069c:	9a02      	ldr	r2, [sp, #8]
  40069e:	9b01      	ldr	r3, [sp, #4]
  4006a0:	4604      	mov	r4, r0
  4006a2:	2800      	cmp	r0, #0
  4006a4:	d0ee      	beq.n	400684 <__register_exitproc+0x1c>
  4006a6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
  4006aa:	6025      	str	r5, [r4, #0]
  4006ac:	2000      	movs	r0, #0
  4006ae:	6060      	str	r0, [r4, #4]
  4006b0:	4605      	mov	r5, r0
  4006b2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  4006b6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
  4006ba:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  4006be:	b93f      	cbnz	r7, 4006d0 <__register_exitproc+0x68>
  4006c0:	1cab      	adds	r3, r5, #2
  4006c2:	2000      	movs	r0, #0
  4006c4:	3501      	adds	r5, #1
  4006c6:	6065      	str	r5, [r4, #4]
  4006c8:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
  4006cc:	b005      	add	sp, #20
  4006ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4006d0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
  4006d4:	f04f 0c01 	mov.w	ip, #1
  4006d8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  4006dc:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
  4006e0:	fa0c f205 	lsl.w	r2, ip, r5
  4006e4:	4316      	orrs	r6, r2
  4006e6:	2f02      	cmp	r7, #2
  4006e8:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
  4006ec:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  4006f0:	d1e6      	bne.n	4006c0 <__register_exitproc+0x58>
  4006f2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
  4006f6:	431a      	orrs	r2, r3
  4006f8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4006fc:	e7e0      	b.n	4006c0 <__register_exitproc+0x58>
  4006fe:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
  400702:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
  400706:	e7b8      	b.n	40067a <__register_exitproc+0x12>
  400708:	00400714 	.word	0x00400714
  40070c:	00000000 	.word	0x00000000
  400710:	00000043 	.word	0x00000043

00400714 <_global_impure_ptr>:
  400714:	20000008                                ... 

00400718 <_init>:
  400718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40071a:	bf00      	nop
  40071c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40071e:	bc08      	pop	{r3}
  400720:	469e      	mov	lr, r3
  400722:	4770      	bx	lr

00400724 <__init_array_start>:
  400724:	00400619 	.word	0x00400619

00400728 <__frame_dummy_init_array_entry>:
  400728:	004000e5                                ..@.

0040072c <_fini>:
  40072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40072e:	bf00      	nop
  400730:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400732:	bc08      	pop	{r3}
  400734:	469e      	mov	lr, r3
  400736:	4770      	bx	lr

00400738 <__fini_array_start>:
  400738:	004000c1 	.word	0x004000c1
